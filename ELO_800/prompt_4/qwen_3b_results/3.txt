```python
import sys

def find_stable_arrangement(n, k):
    if k > n:
        return -1
    
    # If k == 1, we can always place the rook on any empty cell
    if k == 1:
        for i in range(1, n + 1):
            for j in range(1, n + 1):
                if (i, j) not in [(1, 1), (1, n), (n, 1), (n, n)]:
                    return '.' * (j - 1) + 'R' + '.' * (n - j)
    
    # For k >= 2, we need to ensure no rook can move to an adjacent cell
    # Place rooks in opposite corners
    if k % 2 == 1:
        return -1
    else:
        for i in range(1, n + 1, 2):
            for j in range(1, n + 1, 2):
                if (i, j) not in [(1, 1), (1, n), (n, 1), (n, n)]:
                    return '.' * (j - 1) + 'R' + '.' * (n - j)

if __name__ == "__main__":
    t = int(input().strip())
    for _ in range(t):
        n, k = map(int, input().strip().split())
        result = find_stable_arrangement(n, k)
        print(result)
```

This solution checks if a stable arrangement of rooks exists based on the constraints provided. It uses a simple heuristic to place rooks in opposite corners when the number of rooks is even. For odd numbers of rooks, it immediately returns `-1` as no stable arrangement is possible under the given rules. 

For every test case, it prints the arrangement of rooks on the board in the required format. If a stable arrangement cannot be found, it outputs `-1`.
