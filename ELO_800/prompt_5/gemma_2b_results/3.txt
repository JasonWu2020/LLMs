<start_of_turn>model
```python
def is_stable(board, row, col):
  for j in range(1, n):
    if board[row][j] == 'R':
      if board[j][col] == 'R':
        return False

  for j in range(1, n):
    if board[j][col] == 'R':
      if board[row][j] == 'R':
        return False

  return True

def find_stable_arrangement(n, k):
  board = [['' for _ in range(n)] for _ in range(n)]
  for _ in range(k):
    row = int(input())
    col = int(input())

  for i in range(n):
    for j in range(n):
      if i == 0 and j == 0:  
        board[i][j] = 'R' 
 
  i = 0
  j = 0  
  while i < n:
    while j < n:
      if is_stable(board, i, j):
        print('R', end='')
        j = j + 1
      else:
        j = j + 1
    i = i + 1
  

if __name__ == '__main__':
  t = int(input())
  for _ in range(t):
    n, k = map(int, input().split())
    find_stable_arrangement(n, k) 
``` 
<end_of_turn>
