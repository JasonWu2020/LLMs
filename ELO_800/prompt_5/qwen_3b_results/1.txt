```python
import sys

input = sys.stdin.read
data = input().split()

t = int(data[0])
data = data[1:]

for _ in range(t):
    n = int(data[0])
    data = data[1:]
    p = list(map(int, data[:n]))
    data = data[n:]
    
    # Initialize graph
    graph = [[] for _ in range(n + 1)]
    for i in range(1, n + 1):
        graph[i].append(p[i - 1])
    
    # Find strongly connected components
    def dfs(graph, node, visited, stack):
        visited[node] = True
        for neighbor in graph[node]:
            if not visited[neighbor]:
                dfs(graph, neighbor, visited, stack)
        stack.append(node)

    visited = [False] * (n + 1)
    stack = []
    for i in range(1, n + 1):
        if not visited[i]:
            dfs(graph, i, visited, stack)
    
    # Sort nodes based on reverse postorder
    nodes = sorted(stack, key=lambda x: -postorder[x])
    
    # Count the number of strongly connected components
    scc_count = 0
    while stack:
        node = stack.pop()
        if not visited[node]:
            visited[node] = True
            scc_count += 1
    
    # Minimum number of invitations needed
    min_invitations = max(scc_count - 1, 1)
    print(min_invitations)
```

This solution reads the test cases and calculates the minimum number of invitations needed for at least two friends to come to the party based on the given constraints. It uses depth-first search (DFS) to find strongly connected components (SCCs) in the graph and then determines the minimum number of invitations required.
