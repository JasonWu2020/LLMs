```python
def is_valid(board, row, col):
    for i in range(row):
        if board[i][col]:
            return False
    for i in range(len(board)):
        if board[row][i]:
            return False
    return True

def place_rooks(n, k):
    board = [[False]*n for _ in range(n)]
    if k > n:
        return -1

    def dfs(row, col):
        if col == n:
            if row == n:
                return True
            return dfs(row+1, 0)
        for i in range(n):
            if not board[row][i] and is_valid(board, row, i):
                board[row][i] = True
                if dfs(row, i+1):
                    return True
                board[row][i] = False
        return False

    if dfs(0, 0):
        return board
    else:
        return -1

def print_board(board):
    for row in board:
        print(''.join(['R' if cell else '.' for cell in row]))

t = int(input())
for _ in range(t):
    n, k = map(int, input().split())
    board = place_rooks(n, k)
    if board == -1:
        print(-1)
    else:
        print_board(board)
```
