```python
from itertools import combinations

def is_stable(board):
    n = len(board)
    for i in range(n):
        for j in range(n):
            if board[i][j] == 'R':
                # Check rows and columns
                for x in range(n):
                    if board[x][j] == 'R' or board[i][x] == 'R':
                        return False
    return True

def find_stable_arrangement(n, k):
    for board in combinations(combinations(range(1, n+1), k), k):
        board = [list(row) for row in zip(*board)]
        if is_stable(board):
            return ['R'.join(row) for row in board]
    return -1

t = int(input())
for _ in range(t):
    n, k = map(int, input().split())
    result = find_stable_arrangement(n, k)
    print(result)
```
