```python3
import sys
sys.setrecursionlimit(10**6)

def dfs(board, i, j):
    if i == len(board): 
        return True
    for col in range(len(board)):
        if (col != j and board[i][col] == 0) or ((i - j) % abs(i - j) == 0 and board[(i + j) // abs(i - j)][col] == 0):
            board[i][col] = 1
            if dfs(board, i+1, col):
                return True
            board[i][col] = 0
    return False

def findStableBoard(n, k):
    if k > n:
        return -1
    board = [[0]*n for _ in range(n)]
    if dfs(board, 0, 0):
        for i in range(n):
            for j in range(n):
                if board[i][j]:
                    print("R", end="")
                else:
                    print(".", end="")
            print()
        return
    print(-1)

# Read input
test_cases = int(input().strip())
for _ in range(test_cases):
    n, k = map(int, input().split())
    findStableBoard(n, k)
```
```python3
findStableBoard(3, 2)
```
