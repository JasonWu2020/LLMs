<start_of_turn>model
**Critique:**

The solution is concise and efficient, but it can be improved.

* **Time complexity:** The code iterates over the encrypted message only once, so the time complexity is O(n), where n is the length of the message.
* **Space complexity:** The code uses a set `visited` to store the characters that have already been seen, so the space complexity is O(n) as well.

**Improved solution:**

```python
t = int(input())

for _ in range(t):
    n = int(input())
    s = input().strip()

    a = ""
    visited = set()

    for i in range(n):
        c = s[i]
        if c not in visited:
            a += c
            visited.add(c)

    print(a)
```

**Changes:**

* The code uses a set `visited` to store the characters that have already been seen, instead of adding a character if it has already been seen. This reduces the time complexity of the code.
* The code iterates over the encrypted message only once, so the time complexity remains O(n).

**Time complexity:** O(n)

**Space complexity:** O(n)<eos>
