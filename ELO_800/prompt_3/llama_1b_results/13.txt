```python
def main():
    t = int(input())
    for _ in range(t):
        n = int(input())
        a = list(map(int, input().split()))
        ans = 1
        for i in range(1, n - 1):
            if a[i - 1]!= a[i] and a[i]!= a[i + 1]:
                ans += 1
        print(ans - 1)
    return

if __name__ == '__main__':
    main()
```

The original solution has a time complexity of O(n^2) due to the nested for loop, which is not efficient for large inputs. A more efficient solution can be achieved by using a single pass through the array and keeping track of the maximum sum of adjacent elements that are different from the current element.

```python
def main():
    t = int(input())
    for _ in range(t):
        n = int(input())
        a = list(map(int, input().split()))
        ans = 1
        max_sum = float('-inf')
        for i in range(1, n - 1):
            current_sum = a[i - 1] + a[i + 1]
            if current_sum > max_sum:
                max_sum = current_sum
            if a[i - 1]!= a[i] and a[i]!= a[i + 1]:
                ans += 1
        print(max_sum - 1)
    return

if __name__ == '__main__':
    main()
```

This solution has a time complexity of O(n) and space complexity of O(1), making it more efficient for large inputs.
