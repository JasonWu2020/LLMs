The outputted solution has a time complexity of O(n), which is efficient for this problem. However, it has a space complexity of O(n) as well, which might not be the most space-efficient solution. 

One potential improvement is to use a 1D array to store the maximum sum we can get up to each position in the first row, and a 1D array to store the maximum sum we can get up to each position in the second row, instead of a 2D array.

Here's an alternative solution:

```python
import sys

n = int(input())
heights1 = list(map(int, input().split()))
heights2 = list(map(int, input().split()))

heights1.append(0)
heights2.append(0)

f = [0] * (n+1)
g = [0] * (n+1)

f[1] = heights1[1]
g[1] = heights2[1]

for i in range(2, n+1):
    f[i] = max(f[i-1], g[i-1] + heights1[i])
    g[i] = max(g[i-1], f[i-2] + heights2[i])

print(max(f[n], g[n]))
```

This solution has a time complexity of O(n) and a space complexity of O(n), which is more space-efficient than the original solution.
