The outputted solution has a time complexity of O(n), which is efficient for the given problem. However, it can be improved to O(1) by observing that the minimum number of invitations needed is always the minimum between the number of distinct values in the array p and 2.

The reason is that if there are more than 2 distinct values in the array p, it means that there are at least 2 friends who will attend the party regardless of the invitations sent. In this case, we can send invitations to any 2 friends, and they will attend the party. Therefore, the minimum number of invitations needed is 2.

If there are 2 distinct values in the array p, it means that there is only 1 friend who will attend the party regardless of the invitations sent. In this case, we need to send invitations to this friend and their best friend, so the minimum number of invitations needed is 2.

If there is only 1 distinct value in the array p, it means that all friends will not attend the party regardless of the invitations sent. In this case, we need to send invitations to all friends, so the minimum number of invitations needed is n.

Here is another solution adhering to the same input and output specifications:

```python
t = int(input())

for _ in range(t):
    n = int(input())
    p = list(map(int, input().split()))
    distinct_values = len(set(p))
    print(min(distinct_values, 2))
```
