### Critique of the Provided Solution

#### Code Structure:
- **Complexity**: The solution employs a brute-force approach to find suitable partitions. This isn't necessarily inefficient due to the small constraints (up to `n=45,000`), but it might not scale well for very large inputs without optimizations.
- **Efficiency**: Given the nature of the algorithm, it can be quite slow for larger inputs due to the combinatorial explosion of possibilities. There are more efficient ways to find valid partitions using mathematical properties of numbers.
- **GCD Calculation**: The internal function `__gcd` could potentially be optimized or replaced with built-in Python functionality (`math.gcd`), though in this case, it doesn't change the overall time complexity significantly.

#### Best Practices:
- **Clarity**: The comments in the code are somewhat lacking, especially for functions like `__gcd` which are quite basic and usually predefined.
- **Function Names**: While not a critical issue, better names for functions could improve readability (`find_valid_partition` might be more descriptive).
- **Exception Handling**: There is no exception handling in case of unexpected input types or values, although given the strict specification that input is a single integer within the defined bounds, this might not be necessary.

### Alternative Solution
Given the constraints and the nature of the problem, a smarter approach can be taken, which involves recognizing patterns in numbers that contribute to having a GCD greater than 1.

#### Improved Algorithm:
We know that numbers can be grouped into pairs (like 2 & 3, 4 & 5, etc.) that always have a GCD of 1. We can pair these up and try to form one set containing one member from each pair, thereby creating a higher chance of having a common divisor.

#### Python Code:
```python
from math import gcd

def find_partition_improved(n):
    if n % 2 == 1:
        return "No"
    
    # Group numbers by pairs to ensure at least one common divisor (e.g., GCD of 2)
    groups = [list(range(i*2, i*2+n, 2)) for i in range(n//2+1)]
    
    # Try to partition into two groups
    for group in groups:
        group1 = [group[i] for i in range(len(group)//2)]
        group2 = [group[i] for i in range(len(group)//2, len(group))]
        
        if gcd(sum(group1), sum(group2)) > 1:
            return "Yes\n" + "\n".join(["{} {}".format(len(group1), ' '.join(map(str, group1))),
                                        "{} {}".format(len(group2), ' '.join(map(str, group2)))])
    
    return "No"

if __name__ == "__main__":
    n = int(input().strip())
    print(find_partition_improved(n))
```

### Explanation of Improvement:
1. **Pairing Numbers**: Instead of trying every possible combination, we group numbers into pairs starting from 2 (pairs that inherently have a GCD of at least 2). This reduces the search space significantly.
2. **Partition Logic**: When partitioning, we take every other number starting from the beginning and every other number starting from the middle of our paired list. This method naturally leads to having at least a common divisor of 2 between the sums of the two sets.

This approach is more efficient and leverages the inherent properties of numbers to find a valid partition faster, making it better suited for larger inputs within the given constraints.
