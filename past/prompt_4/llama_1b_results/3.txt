The solution provided has a time complexity of O(n^2) due to the nested loops, which is not efficient for large inputs. A more efficient solution can be achieved using a hash table to store the values of the slimes.

Here's a revised solution:

```python
def maxSlimeValue(n, a):
    hash_table = {}
    for i in range(n):
        hash_table[a[i]] = i
    max_val = float('-inf')
    for i in range(n):
        if hash_table.get(a[i]) > max_val:
            max_val = hash_table[a[i]]
    return max_val

n = int(input())
a = list(map(int, input().split()))
print(maxSlimeValue(n, a))
```

This solution has a time complexity of O(n) and a space complexity of O(n), making it more efficient for large inputs.

Here's another solution that uses a hash table to store the values of the slimes:

```python
def maxSlimeValue(n, a):
    hash_table = {}
    for i in range(n):
        hash_table[a[i]] = i
    max_val = float('-inf')
    for i in range(n):
        if hash_table[a[i]] > max_val:
            max_val = hash_table[a[i]]
    return max_val

n = int(input())
a = list(map(int, input().split()))
print(maxSlimeValue(n, a))
```

This solution also has a time complexity of O(n) and a space complexity of O(n), making it efficient for large inputs.
