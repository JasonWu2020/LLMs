<start_of_turn>model
**Critique:**

The solution is correct, but it can be improved.

**Improvements:**

- **Use a dictionary to store the invitations:** Instead of iterating over the list of friends and checking if their best friend has already received an invitation, we can store the invitations in a dictionary to check if a friend has already received an invitation in constant time.

**Revised Solution:**

```python
t = int(input())

for _ in range(t):
    n = int(input())
    p = list(map(int, input().split()))

    inv = {}
    for i in range(n):
        if p[i] != i and p[i] not in inv:
            inv[p[i]] = True

    print(len(inv) + 1)
```

**Note:**

- The code reads the number of test cases, then for each test case, reads the number of friends and their best friend connections.
- It then calculates the number of friends who have not received an invitation from their best friend and adds $1 to that number.
- Finally, the total number of invitations is printed.<eos>
