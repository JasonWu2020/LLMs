The outputted solution has a time complexity of O(n^2) because it uses two nested loops to check every possible pair of camels. This is not the most efficient solution, especially for large inputs.

Here's an alternative solution that uses a set data structure to keep track of the positions that each camel can spit to, and then checks if any of these positions match a camel's position:

```python
n = int(input())
x = []
d = []
for i in range(n):
    xi, di = map(int, input().split())
    x.append(xi)
    d.append(di)

spittable_positions = set()
for i in range(n):
    spittable_positions.add(x[i] + d[i])
    spittable_positions.add(x[i] - d[i])

for i in range(n):
    if x[i] in spittable_positions:
        print("YES")
        exit()
print("NO")
```
