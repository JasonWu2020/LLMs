The outputted solution has a time complexity of O(n log n) due to the sorting operation, which may be inefficient for large inputs. 

A more efficient solution can be achieved by using a heap data structure to keep track of the largest and smallest elements in the lists.

Here's an alternative solution:

```python
import heapq

n = int(input())
a = list(map(int, input().split()))
b = list(map(int, input().split()))
heapq.heapify(a)
heapq.heapify(b)
s = 0
for _ in range(min(n, n)):
    if a and b:
        if -heapq.heappop(a) > -heapq.heappop(b):
            s += -heapq.heappop(a)
        else:
            heapq.heappush(a, -heapq.heappop(b))
    elif a:
        s += -heapq.heappop(a)
    else:
        s -= -heapq.heappop(b)
print(s)
```

This solution has a time complexity of O(n log n) due to the heapify and heappop operations, but it is more efficient than the original solution for large inputs.
