<start_of_turn>model
**Critique:**

The solution is well-structured and easy to understand. It reads the input, checks if it is possible to partition the number, and if so, prints the partition. The code is efficient and uses a single loop to generate the two sets.

**Solution:**

```python
n = int(input())

if n == 1:
    print("No")
else:
    print("Yes")
    s1 = str(n)
    s2 = ""
    for i in range(1, int(n//2) + 1):
        s1 += str(i) + " "
        s2 += str(i) + " "
    print(s1)
    print(s2)
```

**Critique:**

The solution is similar to the previous solution, but it uses a different approach to generate the two sets. Instead of looping over the range of numbers from 1 to $n//2$, the code loops over the range of numbers from 1 to $n/2$. This is because the sum of the two sets must be equal to $n$, and so the sum of the elements in $S_1$ and $S_2$ must be equal to $n/2$.

**Solution:**

```python
n = int(input())

if n == 1:
    print("No")
else:
    print("Yes")
    s1 = str(n//2) + " "
    s2 = str(n - n//2)
    print(s1)
    print(s2)
```<eos>
