```python
def find_beautiful_number(n, k, digits):
    # Find the last k digits of the original number
    last_k_digits = digits[-k:]
    
    # If the last k digits are already beautiful, return the original number
    if all(last_k_digits[i] == last_k_digits[i + k % len(last_k_digits)] for i in range(len(last_k_digits) - k)):
        return n, digits
    
    # Otherwise, adjust the last k digits to make them beautiful
    new_last_k_digits = [str(min(int(digit), 9)) for digit in last_k_digits]
    
    # Create the beautiful number by repeating the new last k digits
    beautiful_number = (n - len(new_last_k_digits)) * ['0'] + new_last_k_digits
    
    return n, beautiful_number

# Reading input
n, k = map(int, input().split())
digits = list(map(int, input()))

# Finding and printing the beautiful number
result_n, result_digits = find_beautiful_number(n, k, digits)
print(result_n)
print(''.join(map(str, result_digits)))
```

This Python script takes an integer `x` with `n` digits and a positive integer `k` less than `n`, and outputs the smallest "beautiful" integer `y` that is greater than or equal to `x`. The script works by checking the last `k` digits of `x`, adjusting them if necessary to make the entire number "beautiful", and then constructing the resulting "beautiful" number.

Please note that this solution assumes that the input is provided correctly and follows the specified format.
