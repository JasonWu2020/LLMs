```python
def count_ways(n, m, buses):
    MOD = 10**9 + 7
    dp = [0] * (n + 1)
    dp[0] = 1
    
    for _ in range(m):
        s, t = buses[_]
        for i in range(s, n):
            dp[i + 1] += dp[i]
            dp[i + 1] %= MOD
        dp[t] -= dp[s - 1]
        dp[t] += MOD
        dp[t] %= MOD
    
    return dp[n]

# Reading input
n, m = map(int, input().split())
buses = []
for _ in range(m):
    s, t = map(int, input().split())
    buses.append((s, t))

# Printing the result
print(count_ways(n, m, buses))
```

This solution correctly implements the logic described in the problem statement. It uses dynamic programming to keep track of the number of ways Gerald can reach each bus stop, ensuring that he always moves towards the school. The final answer is calculated by taking the result at the last bus stop (number `n`) modulo `1000000007`.
