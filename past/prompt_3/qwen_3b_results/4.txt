```python
def min_invitations():
    import sys
    input = sys.stdin.read
    data = input().split()
    
    t = int(data[0])
    result = []
    
    for _ in range(t):
        n = int(data[1])
        p = list(map(int, data[2:]))
        data = data[n+2:]
        
        # Count the number of friends who have received invitations
        invited_count = 0
        
        # Iterate through each friend
        for i in range(n):
            # Check if the current friend and their best friend have received invitations
            if (i + 1) in p:
                invited_count += 1
        
        # If at least two friends have received invitations, return 1
        # Otherwise, return 2
        result.append(1 if invited_count >= 2 else 2)
    
    for res in result:
        print(res)

min_invitations()
```

This solution reads input from stdin, processes each test case, and prints the minimum number of invitations required. Let's improve it for clarity and efficiency:

1. Use `sys.stdin` to read the input directly.
2. Process each test case separately.
3. Ensure that the logic correctly counts the number of friends who have received invitations.
4. Simplify the logic to handle the constraints more efficiently.

Here is the revised solution:

```python
import sys

def min_invitations():
    t = int(input())
    result = []

    for _ in range(t):
        n = int(input())
        p = list(map(int, input().split()))

        # Count the number of friends who have received invitations
        invited_count = sum(p[i] in p for i in range(n))

        # If at least two friends have received invitations, return 1
        # Otherwise, return 2
        result.append(1 if invited_count >= 2 else 2)

    for res in result:
        print(res)

min_invitations()
```
