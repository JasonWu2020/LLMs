Critique of the outputted solution:

The solution is simple and efficient, it directly calculates the expected value of candies Alya will have after `n` moves, and then subtracts it from the total candies to get the number of candies Alya ate.

However, the solution assumes that the input is valid, i.e., `n` and `k` are non-negative integers. If the input is not valid, the solution may produce incorrect results.

Another potential issue is that the solution does not handle the case where `k` is less than `n`.

Here's an alternative solution that addresses these issues:

```python
import sys

def calculate_eaten_candies(n, k):
    if not (isinstance(n, int) and isinstance(k, int)):
        raise ValueError("Both n and k must be integers.")
    if n < 1 or k < 0:
        raise ValueError("n must be greater than 0 and k must be non-negative.")
    if k > n * (n + 1) // 2:
        raise ValueError("k cannot be greater than the expected value of candies.")

    eaten_candies = 0
    total_candies = 0
    i = 1
    while total_candies < k:
        if total_candies + i <= k:
            total_candies += i
            eaten_candies += 1
        i += 1
    return eaten_candies

n, k = map(int, input().split())
print(calculate_eaten_candies(n, k))
```

This solution first checks if the input is valid, then uses a while loop to simulate the game and calculate the number of candies Alya ate. It keeps track of the total number of candies and the number of moves, and increments the total number of candies by the current number of candies added each time a move is made. The number of moves is incremented each time a move is made, and the loop continues until the total number of candies reaches or exceeds `k`. The number of candies eaten is then returned.
