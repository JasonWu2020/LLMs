```python3
from collections import defaultdict

def find_optimal_score_difference(n, a, b):
    # Initialize dictionaries to store the frequency of elements in both lists
    freq_a = defaultdict(int)
    freq_b = defaultdict(int)

    # Count the frequency of each element in both lists
    for i in range(n):
        freq_a[a[i]] += 1
        freq_b[b[i]] += 1

    # Sort the frequencies of elements in descending order
    sorted_freq_a = sorted(freq_a.items(), key=lambda x: (-x[1], x[0]))
    sorted_freq_b = sorted(freq_b.items(), key=lambda x: (-x[1], x[0]))

    # Calculate the total number of elements that can be used to increase A's score
    usable_a = sum(x[1] // 2 for x in sorted_freq_a)

    # If the total number of usable elements is less than or equal to half of the total elements,
    # then A cannot win because B can always counter A's moves with similar moves.
    if usable_a <= len(a) // 2:
        return 0

    # Otherwise, A can always win by removing all elements from B's list that he can use to increase his score.
    return -len(b)

# Read input
n = int(input())
a = list(map(int, input().split()))
b = list(map(int, input().split()))

# Print the result
print(find_optimal_score_difference(n, a, b))
```
