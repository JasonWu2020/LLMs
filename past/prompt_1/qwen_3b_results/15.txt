```python
import numpy as np

def solve_tree_placement(n, edges, points):
    G = [[] for _ in range(n)]
    for u, v in edges:
        u, v = u-1, v-1
        G[u].append(v)
        G[v].append(u)

    def dfs(node, parent, visited):
        visited[node] = True
        for child in G[node]:
            if not visited[child]:
                dfs(child, node, visited)

    def find_root(visited):
        for i in range(n):
            if not visited[i]:
                return i
        return -1

    def bfs(start, visited, parent):
        queue = [start]
        while queue:
            node = queue.pop(0)
            visited[node] = True
            for child in G[node]:
                if not visited[child]:
                    parent[child] = node
                    queue.append(child)

    def find_parent(parent):
        for i in range(n):
            if parent[i] == -1:
                return i

    def assign_points(points, parent):
        assignment = [-1] * n
        queue = [find_parent(parent)]
        while queue:
            node = queue.pop(0)
            assignment[node] = len(points) + 1
            for child in G[node]:
                if assignment[child] == -1:
                    parent[child] = node
                    queue.append(child)
        return assignment

    def check_placement(points, assignment):
        for i in range(n-1):
            u, v = assignment[edges[i][0]], assignment[edges[i][1]]
            if u > v:
                u, v = v, u
            if not (u < v < u+v-1):
                return False
        return True

    visited = [False] * n
    dfs(0, -1, visited)

    root = find_root(visited)
    parent = [-1] * n
    bfs(root, visited, parent)
    assignment = assign_points(points, parent)
    if not check_placement(points, assignment):
        return "No solution found"
    
    return ' '.join(map(str, assignment))

n = int(input())
edges = [list(map(int, input().split())) for _ in range(n-1)]
points = [list(map(int, input().split())) for _ in range(n)]
print(solve_tree_placement(n, edges, points))
```
