```python
from typing import List
import numpy as np

def read_input() -> List[List[str]]:
    n, m = map(int, input().split())
    maze = [input() for _ in range(n)]
    return maze

def can_walk_infinite(maze: List[List[str]]) -> bool:
    maze_np = np.array(maze).astype(np.int8)
    size = maze_np.shape

    directions = np.array([[0, -1], [0, 1], [-1, 0], [1, 0]])
    visited = set()
    def dfs(x, y):
        if (x, y) in visited:
            return False
        visited.add((x, y))
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < size[0] and 0 <= ny < size[1] and maze_np[nx][ny] == 0:
                if not dfs(nx, ny):
                    return False
        return True
    
    for i in range(size[0]):
        for j in range(size[1]):
            if maze_np[i][j] == 'S':
                start_x, start_y = i, j
                break
    
    return dfs(start_x, start_y)

maze = read_input()
print("Yes" if can_walk_infinite(maze) else "No")
```
This Python script reads the input maze dimensions and layout, processes it using numpy for efficient matrix manipulation, defines a depth-first search function to explore paths, and finally determines if the little boy can walk infinitely from his starting position based on the given problem specification.
