```python
def smallest_beautiful_integer(x_str, k):
    # Convert x string to list of integers
    digits = [int(digit) for digit in x_str]

    # Calculate the length of y (m)
    n = len(digits)
    m = n + k

    # If k is equal to n, we can just return the same x
    if k == n:
        return m, digits

    # Find the smallest beautiful integer starting with the same prefix as x
    start_index = n - k
    while start_index > 0:
        if all(digits[i] == digits[i + k] for i in range(start_index)):
            break
        start_index -= 1

    # Adjust digits to form the smallest beautiful integer
    while start_index < n:
        digits[start_index] += 1
        if digits[start_index] <= digits[start_index + k]:
            for i in range(start_index, start_index + k):
                digits[i] = digits[i + k]
        else:
            digits[start_index] = 0
        start_index += 1

    # Append leading zeros to form the final m-digit number
    while start_index < m:
        digits.insert(0, 0)
        start_index += 1

    return m, digits

# Reading input from stdin
n, k = map(int, input().split())
x_str = input()

# Getting output
m, digits = smallest_beautiful_integer(x_str, k)

# Printing output to stdout
print(m)
print(''.join(map(str, digits)))
```
