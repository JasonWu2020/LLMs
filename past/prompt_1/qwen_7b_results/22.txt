```python
from collections import defaultdict

def process_string(s: str, k: int) -> None:
    """
    Function to find the minimum number of unique characters and a corresponding substring
    after deleting at most k characters.
    
    :param s: Input string
    :param k: Maximum number of deletions allowed
    """
    char_count = defaultdict(int)
    min_unique_chars = float('inf')
    max_char_pos = -1
    start_del_pos = -1
    
    for end_pos, char in enumerate(s):
        char_count[char] += 1
        current_unique_chars = len(char_count)
        
        while current_unique_chars > min_unique_chars and start_del_pos < end_pos:
            char_count[s[start_del_pos]] -= 1
            if char_count[s[start_del_pos]] == 0:
                del char_count[s[start_del_pos]]
                min_unique_chars = min(min_unique_chars, current_unique_chars)
            start_del_pos += 1
        
        if current_unique_chars <= min_unique_chars + k:
            min_unique_chars = current_unique_chars
            max_char_pos = end_pos
    
    # Adjusting for k deletions and printing the result
    result = s[:max_char_pos]
    print(min_unique_chars)
    print(result)

if __name__ == "__main__":
    input_string = input().strip()
    k = int(input().strip())
    process_string(input_string, k)
```
This Python script defines a function `process_string` that takes two parameters, a string `s` and an integer `k`, processes the string to determine the minimum number of unique characters that can remain after deleting at most `k` characters, and prints this minimum number along with a corresponding substring meeting the criteria. The script reads the input string and `k` from stdin and outputs the solution to stdout, adhering to the specified format and requirements.
