```python
import sys

def read_int():
    return int(input())

def read_ints():
    return map(int, input().split())

n = read_int()
g = [[] for _ in range(n + 1)]
for _ in range(n - 1):
    u, v = read_ints()
    g[u].append(v)
    g[v].append(u)

leaves = read_ints()

def dfs(u, p, order):
    if not g[u]:
        return (u, order.index(u) + 1, 1)
    leaves_found = [0] * n
    for v in g[u]:
        if v!= p:
            x, idx, c = dfs(v, u, order)
            if c == 1:
                leaves_found[idx] = 1
    if sum(leaves_found) == len(order) - 1:
        return (u, order.index(u) + 1, 0)
    return None

def backtrack(u, p, order, path, path2):
    if not g[u]:
        path2.append(u)
        return
    leaves_found = [0] * n
    for v in g[u]:
        if v!= p:
            x, idx, c = dfs(v, u, order)
            if x:
                path.append(x[0])
                path2.append(x[0])
                path.append(x[0])
                return backtrack(x[0], u, order, path, path2)
                path.pop()
                path2.pop()
    return None

path = []
path2 = []
dfs(1, 0, leaves)
if path:
    print(' '.join(map(str, path)))
else:
    print(-1)
```
