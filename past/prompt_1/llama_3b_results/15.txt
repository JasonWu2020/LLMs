```python
import sys
import io, os
input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline

class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
    def find(self, a):
        acopy = a
        while a!= self.parent[a]:
            a = self.parent[a]
        while acopy!= a:
            self.parent[acopy], acopy = a, self.parent[acopy]
        return a
    def union(self, a, b):
        self.parent[self.find(b)] = self.find(a)

def main():
    n = int(input())
    G = [[] for _ in range(n+1)]
    for _ in range(n-1):
        u, v = map(int, input().split())
        G[u].append(v)
        G[v].append(u)

    p = []
    for i in range(1, n+1):
        x, y = map(int, input().split())
        p.append((x, y, i))

    p.sort()

    parent = [0] * (n+1)
    root = UnionFind(n+1)
    for i in range(n):
        x, y, v = p[i]
        for u in G[v]:
            if parent[u] == 0:
                parent[u] = v
                root.union(u, v)

    ans = [0] * (n+1)
    for i in range(n):
        x, y, v = p[i]
        if parent[v] == 0:
            ans[v] = v
            continue
        ans[v] = parent[v]
        x1, y1 = x, y
        x2, y2 = 0, 0
        for u in G[v]:
            if u!= parent[v]:
                x2, y2 = p[root.find(u)][0], p[root.find(u)][1]
        if x1 == x2:
            if x1 < x2:
                ans[parent[v]] = v
                ans[v] = parent[v]
            else:
                ans[v] = v
                ans[parent[v]] = parent[parent[v]]
        else:
            if y1 < y2:
                ans[parent[v]] = v
                ans[v] = parent[v]
            else:
                ans[v] = v
                ans[parent[v]] = parent[parent[v]]

    print(*[i for i in ans[1:]])

main()
```
