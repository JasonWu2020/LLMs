```python
def find_smallest_beautiful_integer():
    n, k = map(int, input().split())
    digits = list(map(int, input()))
    
    # Find the position to start repeating
    repeat_pos = n % (k + 1)
    
    if repeat_pos == 0:
        repeat_pos = k + 1
    
    # Determine the repeating part
    repeating_part = digits[:repeat_pos]
    
    # Construct the smallest beautiful integer
    beautiful_integer = repeating_part * (len(digits) // repeat_pos)
    
    # If there are remaining digits after full cycles of repeating part
    if len(digits) % repeat_pos != 0:
        beautiful_integer += repeating_part[:len(digits) % repeat_pos]
    
    m = len(beautiful_integer)
    print(m)
    print(''.join(map(str, beautiful_integer)))

find_smallest_beautiful_integer()
```
