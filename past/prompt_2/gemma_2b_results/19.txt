<start_of_turn>model
```python
def solution():
    n = int(input())
    edges = []
    for _ in range(n - 1):
      u, v = map(int, input().split())
      edges.append((u, v))
    
    k = int(input())
    leaves = list(map(int, input().split()))

    
    dfs_visit = {}

    def dfs(node):
      dfs_visit[node] = True
      print(node, end=" ")

      for neighbor in adj[node]:
        if not dfs_visit[neighbor]:
          dfs(neighbor)
    

    dfs_visit = {}  
    for i in range(1, n+1):
        if i not in dfs_visit:
            dfs(i)    
    
    leaves_order = []
  

    for i in range(k):
        for node in leaves:
            if node == leaves[i]:
                leaves_order.append(node)
                   

    
    if leaves_order:
        print(*leaves_order, sep=" ")
    else:
        print(-1) 
```

```

   ```
  
```
<end_of_turn>
