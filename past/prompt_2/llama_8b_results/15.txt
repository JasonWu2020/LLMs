```python
from collections import deque
import sys

n = int(input())
graph = [[] for _ in range(n+1)]
for _ in range(n-1):
    u, v = map(int, input().split())
    graph[u].append(v)
    graph[v].append(u)

points = [list(map(int, input().split())) for _ in range(n)]

def get_clockwise_angle(p1, p2, p3):
    x1, y1 = p1
    x2, y2 = p2
    x3, y3 = p3
    return (x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)

def is_clockwise(p1, p2, p3):
    return get_clockwise_angle(p1, p2, p3) > 0

def get_ccw_angle(p1, p2, p3):
    return -get_clockwise_angle(p1, p3, p2)

def is_ccw(p1, p2, p3):
    return get_ccw_angle(p1, p2, p3) > 0

def is_between(p1, p2, p3):
    return is_ccw(p1, p2, p3) and is_ccw(p3, p2, p1)

def is_intersecting(p1, p2, p3, p4):
    return is_between(p1, p3, p2) and is_between(p2, p3, p1)

def find_intersection(p1, p2, p3, p4):
    x1, y1 = p1
    x2, y2 = p2
    x3, y3 = p3
    x4, y4 = p4
    dx1 = x2 - x1
    dy1 = y2 - y1
    dx2 = x4 - x3
    dy2 = y4 - y3
    denom = dx1 * dy2 - dx2 * dy1
    if denom == 0:
        return None
    t = (dx2 * (y1 - y3) - dy2 * (x1 - x3)) / denom
    u = (dx1 * (y3 - y4) - dy1 * (x3 - x4)) / denom
    if 0 <= t <= 1 and 0 <= u <= 1:
        x = x1 + t * dx1
        y = y1 + t * dy1
        return (x, y)
    return None

def solve(graph, points):
    n = len(graph)
    assigned = [-1] * n
    visited = [False] * n
    stack = deque()
    stack.append(0)
    visited[0] = True
    while stack:
        u = stack.pop()
        for v in graph[u]:
            if not visited[v]:
                visited[v] = True
                stack.append(v)
                assigned[v] = u
    for i in range(n):
        if assigned[i] == i:
            stack.append(i)
            break
    while stack:
        u = stack.pop()
        for v in graph[u]:
            if assigned[v] == u:
                stack.append(v)
    result = [0] * n
    for i in range(n):
        x, y = points[i]
        result[assigned[i]] = i + 1
        for v in graph[assigned[i]]:
            if assigned[i]!= v:
                x2, y2 = points[v]
                if is_intersecting((x, y), (x2, y2), points[assigned[i]], points[v]):
                    intersection = find_intersection((x, y), (x2, y2), points[assigned[i]], points[v])
                    if intersection is not None:
                        x, y = intersection
                        result[assigned[i]] = v + 1
                        result[v] = assigned[i] + 1
    return''.join(map(str, result))

print(solve(graph, points))
```
