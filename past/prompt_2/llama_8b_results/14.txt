```python
from collections import deque

def solve(n, m, grid):
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    queue = deque([(0, 0, 0, 0, 0)])
    visited = set((0, 0, 0, 0))
    found = False

    while queue:
        x, y, u, v, dist = queue.popleft()
        if dist >= n and dist % n == 0 or dist >= m and dist % m == 0:
            found = True
            break
        for dx, dy in directions:
            new_x, new_y = x + dx, y + dy
            new_u, new_v = (u + new_x) % n, (v + new_y) % m
            if 0 <= new_x < n and 0 <= new_y < m and grid[new_x][new_y]!= '#' and (new_x, new_y, new_u, new_v) not in visited:
                queue.append((new_x, new_y, new_u, new_v, dist + 1))
                visited.add((new_x, new_y, new_u, new_v))

    return "Yes" if found else "No"

n, m = map(int, input().split())
grid = [input() for _ in range(n)]
start_x, start_y = None, None
for i in range(n):
    for j in range(m):
        if grid[i][j] == 'S':
            start_x, start_y = i, j

if start_x is None:
    print("No")
else:
    print(solve(n, m, grid))
```
