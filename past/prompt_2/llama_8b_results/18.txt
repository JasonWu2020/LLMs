```python
from collections import defaultdict

def dfs(graph, start, visited, path):
    visited[start] = True
    path.append(start)
    if start == end:
        return path
    for node in graph[start]:
        if not visited[node]:
            new_path = dfs(graph, node, visited, path)
            if new_path:
                return new_path
    path.pop()
    return None

def solve():
    n = int(input())
    graph = defaultdict(list)
    for _ in range(n):
        a, b = map(int, input().split())
        graph[a].append(b)
        graph[b].append(a)
    for node in graph:
        if len(graph[node]) == 1:
            start = node
            break
    for node in graph:
        if len(graph[node]) == 1 and node!= start:
            end = node
            break
    visited = {node: False for node in graph}
    path = dfs(graph, start, visited, [])
    if not path:
        return None
    path.reverse()
    return path

def main():
    n = int(input())
    path = solve()
    if path:
        print(' '.join(map(str, path)))
    else:
        print('')

if __name__ == "__main__":
    main()
```
