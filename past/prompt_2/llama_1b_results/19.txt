```
from collections import deque

def find_path(n, edges, leaves):
    graph = [[] for _ in range(n + 1)]
    for u, v in edges:
        graph[u].append(v)
        graph[v].append(u)

    parent = [None] * (n + 1)
    depth = [0] * (n + 1)
    visited = [False] * (n + 1)
    queue = deque([(1, 0)])  # root

    while queue:
        node, depth = queue.popleft()
        if not visited[node]:
            visited[node] = True
            for neighbor in graph[node]:
                if not visited[neighbor]:
                    parent[neighbor] = node
                    queue.append((neighbor, depth + 1))

    path = []
    current = 1
    while current!= 1:
        path.append(current)
        current = parent[current]
    path.append(1)

    for leaf in leaves:
        current = leaf
        while True:
            path.append(current)
            if current == 1:
                break
            current = parent[current]

    return path[::-1]

n = int(input())
edges = []
for _ in range(n - 1):
    u, v = map(int, input().split())
    edges.append((u, v))

leaves = list(map(int, input().split()))
print(*find_path(n, edges, leaves))
```
