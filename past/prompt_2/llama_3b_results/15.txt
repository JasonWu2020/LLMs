```python
import sys
import io, os
input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline

def read():
    return int(input())

def read_str():
    return input().decode().strip()

def read_int_list():
    return list(map(int,input().split()))

def read_int_tuple():
    return tuple(map(int,input().split()))

def read_ints():
    return map(int,input().split())

def read_int():
    return int(input())

def read_str_list():
    return list(input().split())

def read_str_list_2d(n):
    return [input().split() for _ in range(n)]

def read_2d_list(n):
    return [list(map(int,x)) for x in read_str_list_2d(n)]

def read_2ds():
    return [list(map(int, input().split())) for _ in range(read())]

def read_2d():
    return map(int, input().split())

def read_2d_list(n):
    return [list(map(int, input().split())) for _ in range(n)]

from collections import deque
import math
import heapq
from collections import Counter
from collections import defaultdict
from bisect import bisect_left,bisect_right
import itertools
from math import gcd

def solve():
    n = read()
    G = [[] for _ in range(n+1)]
    for i in range(n-1):
        u,v = read_int_tuple()
        G[u].append(v)
        G[v].append(u)

    pts = [read_int_tuple() for _ in range(n)]

    def get_dists(p1,p2):
        return math.sqrt((p1[0]-p2[0])**2+(p1[1]-p2[1])**2)

    def check(p):
        for i in range(1,n+1):
            for v in G[i]:
                d1 = get_dists(p,pts[i-1])
                d2 = get_dists(p,pts[v-1])
                if d1+d2 < get_dists(pts[i-1),pts[v-1]):
                    return False
        return True

    def dfs(p,pre,depth):
        for v in G[p]:
            if v==pre:
                continue
            if check(pts[v-1]):
                pts[v-1] = pts[p-1]
                dfs(v,p,depth+1)
            else:
                pts[v-1] = pts[p-1]
                pts[p-1] = pts[v-1]
                depth1 = depth
                depth2 = depth
                dfs(v,p,depth+1)
                depth1 += 1
                pts[p-1] = pts[v-1]
                pts[v-1] = pts[p-1]
                depth2 += 1
                dfs(v,p,depth2)
        return depth

    ans = [0]*n
    def dfs2(p,pre):
        for v in G[p]:
            if v==pre:
                continue
            ans[v-1] = p
            dfs2(v,p)
    ans[1:] = [x for x in range(1,n+1)]
    dfs(1,0,0)
    dfs2(1,0)
    print(*ans)

t = 1
for _ in range(t):
    solve()
```
