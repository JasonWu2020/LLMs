```python
from collections import defaultdict

def find_route(n, stamps):
    graph = defaultdict(list)
    for u, v in stamps:
        graph[u].append(v)

    def dfs(current, visited, path):
        if current == 1:
            return path
        for neighbor in graph[current]:
            if neighbor not in visited:
                visited.add(neighbor)
                result = dfs(neighbor, visited, path + [neighbor])
                if result is not None:
                    return result
        return None

    visited = set()
    result1 = dfs(1, visited, [])
    if result1 is None:
        visited = set()
        result2 = dfs(2, visited, [])
        if result2 is not None:
            return result2
        else:
            return None
    else:
        return result1

n = int(input())
stamps = []
for _ in range(n):
    u, v = map(int, input().split())
    stamps.append((u, v))
print(*find_route(n, stamps))
```
