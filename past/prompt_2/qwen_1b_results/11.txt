```python3
from typing import List

def max_team_height(n: int, heights_row1: List[int], heights_row2: List[int]) -> int:
    dp = [[0] * (n + 1) for _ in range(2)]
    
    for i in range(1, n + 1):
        dp[i % 2][i] = dp[(i - 1) % 2][i - 1] + heights_row1[i - 1]
        
        if i < n:
            dp[i % 2][i + 1] = dp[(i - 1) % 2][i] + heights_row2[i]
            
    return max(dp[n % 2])

if __name__ == "__main__":
    n = int(input())
    heights_row1 = list(map(int, input().split()))
    heights_row2 = list(map(int, input().split()))

    print(max_team_height(n, heights_row1, heights_row2))
```

This Python script defines a function `max_team_height` which calculates the maximum possible total height of players in a team Demid can choose based on the given inputs. It uses dynamic programming with memoization (`dp`) to efficiently compute the result. The main logic iterates over each student, updating the DP table accordingly until it reaches the end of both rows. Finally, it returns the maximum value found in the last cell of the DP table, representing the optimal choice for the entire team.
