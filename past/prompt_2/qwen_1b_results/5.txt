```python3
import sys
from typing import List

def min_cost_to_sort_binary_string(s: str) -> int:
    n = len(s)
    prefix_sum = [0] * (n + 1)
    
    for i in range(1, n + 1):
        prefix_sum[i] += prefix_sum[i - 1]
        if s[i - 1] == '1':
            prefix_sum[i] -= i
    
    dp = [[float('inf')] * n for _ in range(n)]
    for j in range(n):
        dp[j][j] = 0
    
    for k in range(1, n):
        for i in range(n - k):
            j = i + k
            for l in range(i, j):
                cost = prefix_sum[j + 1] - prefix_sum[l + 1] - (k - (j - l))
                dp[i][j] = min(dp[i][j], cost + dp[i][l] + dp[l + 1][j])
    
    return dp[0][n - 1]

if __name__ == "__main__":
    t = int(input())
    for _ in range(t):
        s = input().strip()
        print(min_cost_to_sort_binary_string(s))
```

This Python program reads the number of test cases `t` followed by `t` lines, each containing a binary string `s`. It then calculates the minimum total cost required to sort the binary string `s` using the described operation and prints the result for each test case.
