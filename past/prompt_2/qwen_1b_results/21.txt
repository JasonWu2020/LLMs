```python3
import sys
input = sys.stdin.readline

def main():
    n = int(input())
    a = list(map(int, input().strip().split()))
    
    dp = [0] * (n + 1)
    dp[0] = 0
    
    max_dominos = 0
    
    for i in range(1, n + 1):
        left_max = 0
        right_max = 0
        
        for j in range(i - 1, -1, -1):
            if a[j] > left_max:
                left_max = a[j]
        
        for k in range(n - i + 1, -1, -1):
            if a[k + i - 1] >= right_max:
                right_max = a[k + i - 1]
                
        dp[i] = max(dp[i], dp[i - 1])
        
        if left_max <= right_max:
            dp[i] += min(left_max, right_max) // 2
        else:
            dp[i] += (left_max + right_max - 1) // 2
            
        max_dominos = max(max_dominos, dp[i])
    
    print(max_dominos)

if __name__ == "__main__":
    main()
```

This Python script reads an integer `n` followed by `n` integers representing the lengths of columns in a Young diagram. It then calculates the maximum number of non-overlapping dominos that can fit within the histogram, based on the constraints provided. The solution uses dynamic programming to keep track of the best placement of dominos at each column index.
