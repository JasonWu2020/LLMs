```python
def find_path(stamp_list):
    graph = {}
    for a, b in stamp_list:
        if a not in graph:
            graph[a] = []
        if b not in graph:
            graph[b] = []
        graph[a].append(b)
        graph[b].append(a)

    def dfs(start_city):
        path = [start_city]
        stack = [start_city]
        while stack:
            current_city = stack.pop()
            for neighbor in graph.get(current_city, []):
                if neighbor not in path:
                    path.append(neighbor)
                    stack.append(neighbor)
        return path

    start_cities = {city for city in graph if len(graph[city]) == 1}
    for start_city in start_cities:
        path = dfs(start_city)
        if len(path) == len(stamp_list) + 1:
            return path

if __name__ == "__main__":
    n = int(input())
    stamp_list = [list(map(int, input().split())) for _ in range(n)]
    solution = find_path(stamp_list)
    print(*solution)
```
