```python
from typing import List, Tuple
import sys

def read_input():
    return list(map(int, sys.stdin.readline().strip().split()))

def solve(n: int, edges: List[Tuple[int]], points: List[Tuple[int]]) -> None:
    parent = [-1] * n
    def find(x):
        if parent[x] == -1:
            return x
        parent[x] = find(parent[x])
        return parent[x]
    
    def union(x, y):
        rootX = find(x)
        rootY = find(y)
        if rootX != rootY:
            parent[rootX] = rootY
    
    def check(edges, points):
        for edge in edges:
            x1, y1 = points[edge[0] - 1]
            x2, y2 = points[edge[1] - 1]
            for i in range(2, n):
                x3, y3 = points[i - 1]
                if (y2 - y1) * (x3 - x2) == (y3 - y2) * (x2 - x1):
                    return False
        return True
    
    def construct(points):
        for i in range(1, n):
            union(i, i + 1)
        
        for edge in edges:
            union(edge[0], edge[1])
        
        root_map = {}
        for i in range(n):
            root = find(i)
            if root not in root_map:
                root_map[root] = len(root_map)
        
        for i in range(n):
            points[i].append(root_map[find(i)])
    
    n_points = len(points)
    construct(points)
    print(*[p[-1] + 1 for p in points])

if __name__ == "__main__":
    n = read_input()[0]
    edges = [read_input() for _ in range(n - 1)]
    points = [read_input() for _ in range(n)]
    solve(n, edges, points)
```
