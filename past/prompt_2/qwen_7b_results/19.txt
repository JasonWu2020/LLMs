```python
from collections import defaultdict, deque

def find_route(n, edges, leaves):
    adj_list = defaultdict(list)
    for u, v in edges:
        adj_list[u].append(v)
        adj_list[v].append(u)
    
    # Leaf node degrees
    leaf_degrees = {i: 1 for i in leaves}
    
    def dfs(node, parent):
        for child in adj_list[node]:
            if child == parent: continue
            if leaf_degrees.get(child, 0) > 0:
                leaf_degrees[child] -= 1
                leaf_degrees[node] += 1
                return True
            if dfs(child, node): return True
        return False
    
    # Initialize stack with root
    stack = [1]
    result = []
    
    while stack:
        current = stack.pop()
        for neighbor in adj_list[current]:
            if neighbor != parent:
                stack.append(neighbor)
                result.extend([current, neighbor])
                
    for leaf in sorted(leaves, reverse=True):
        for neighbor in adj_list[leaf]:
            if neighbor != 1:
                result.extend([leaf, neighbor])
                break
                
    if len(result) == 2 * n - 1:
        return result
    else:
        return [-1]

if __name__ == "__main__":
    n = int(input())
    edges = [list(map(int, input().split())) for _ in range(n - 1)]
    k = int(input())
    leaves = list(map(int, input().split()))
    result = find_route(n, edges, leaves)
    print(result)
```
