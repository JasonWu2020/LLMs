{"header": "A. Equality\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given a string $s$ of length $n$, which consists only of the first $k$ letters of the Latin alphabet. All letters in string $s$ are uppercase.\nA\nsubsequence\nof string $s$ is a string that can be derived from $s$ by deleting some of its symbols without changing the order of the remaining symbols. For example, \"\nADE\n\" and \"\nBD\n\" are subsequences of \"\nABCDE\n\", but \"\nDEA\n\" is not.\nA subsequence of $s$ called\ngood\nif the number of occurences of each of the first $k$ letters of the alphabet is the same.\nFind the length of the longest good subsequence of $s$.\nNote\nIn the first example, \"\nACBCAB\n\" (\"\nAC\nAA\nBC\nC\nAB\n\") is one of the subsequences that has the same frequency of '\nA\n', '\nB\n' and '\nC\n'. Subsequence \"\nCAB\n\" also has the same frequency of these letters, but doesn't have the maximum possible length.\nIn the second example, none of the subsequences can have '\nD\n', hence the answer is $0$.", "input_specification": "Input\n\nThe first line of the input contains integers $n$ ($1\\le n \\le 10^5$) and $k$ ($1 \\le k \\le 26$).\n\nThe second line of the input contains the string $s$ of length $n$. String $s$ only contains uppercase letters from ' A ' to the $k$-th letter of Latin alphabet.", "output_specification": "Output\n\nPrint the only integer\u00a0\u2014 the length of the longest good subsequence of string $s$.", "sample_tests": "Examples\n\nInput\n9 3ACAABCCAB\n\nOutput\n6\n\nInput\n9 4ABCABCABC\n\nOutput\n0", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1038/A"}
{"header": "B. Non-Coprime Partition\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Find out if it is possible to partition the first $n$ positive integers into two\nnon-empty\ndisjoint sets $S_1$ and $S_2$ such that:\n$\\mathrm{gcd}(\\mathrm{sum}(S_1), \\mathrm{sum}(S_2)) > 1$\nHere $\\mathrm{sum}(S)$ denotes the sum of all elements present in set $S$ and $\\mathrm{gcd}$ means the\ngreatest common divisor\n.\nEvery integer number from $1$ to $n$ should be present in\nexactly one\nof $S_1$ or $S_2$.\nNote\nIn the first example, there is no way to partition a single number into two non-empty sets, hence the answer is \"No\".\nIn the second example, the sums of the sets are $2$ and $4$ respectively. The $\\mathrm{gcd}(2, 4) = 2 > 1$, hence that is one of the possible answers.", "input_specification": "Input\n\nThe only line of the input contains a single integer $n$ ($1 \\le n \\le 45\\,000$)", "output_specification": "Output\n\nIf such partition doesn't exist, print \"No\" (quotes for clarity).\n\nOtherwise, print \"Yes\" (quotes for clarity), followed by two lines, describing $S_1$ and $S_2$ respectively.\n\nEach set description starts with the set size, followed by the elements of the set in any order. Each set must be non-empty.\n\nIf there are multiple possible partitions\u00a0\u2014 print any of them.", "sample_tests": "Examples\n\nInput\n1\n\nOutput\nNo\n\nInput\n3\n\nOutput\nYes1 22 1 3", "difficulty": 1100, "url": "https://codeforces.com/problemset/problem/1038/B"}
{"header": "C. Gambling\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Two players A and B have a list of $n$ integers each. They both want to maximize the subtraction between their score and their opponent's score.\nIn one turn, a player can either add to his score any element from his list (assuming his list is not empty), the element is removed from the list afterward. Or remove an element from his opponent's list (assuming his opponent's list is not empty).\nNote, that in case there are equal elements in the list only one of them will be affected in the operations above. For example, if there are elements $\\{1, 2, 2, 3\\}$ in a list and you decided to choose $2$ for the next turn, only a single instance of $2$ will be deleted (and added to the score, if necessary).\nThe player A starts the game and the game stops when both lists are empty. Find the difference between A's score and B's score at the end of the game, if both of the players are playing optimally.\nOptimal play between two players means that both players choose the best possible strategy to achieve the best possible outcome for themselves. In this problem, it means that each player, each time makes a move, which maximizes the final difference between his score and his opponent's score, knowing that the opponent is doing the same.\nNote\nIn the first example, the game could have gone as follows:\nA removes $5$ from B's list.\nB removes $4$ from A's list.\nA takes his $1$.\nB takes his $1$.\nHence, A's score is $1$, B's score is $1$ and difference is $0$.\nThere is also another optimal way of playing:\nA removes $5$ from B's list.\nB removes $4$ from A's list.\nA removes $1$ from B's list.\nB removes $1$ from A's list.\nThe difference in the scores is still $0$.\nIn the second example, irrespective of the moves the players make, they will end up with the same number of numbers added to their score, so the difference will be $0$.", "input_specification": "Input\n\nThe first line of input contains an integer $n$ ($1 \\le n \\le 100\\,000$)\u00a0\u2014 the sizes of the list.\n\nThe second line contains $n$ integers $a_i$ ($1 \\le a_i \\le 10^6$), describing the list of the player A, who starts the game.\n\nThe third line contains $n$ integers $b_i$ ($1 \\le b_i \\le 10^6$), describing the list of the player B.", "output_specification": "Output\n\nOutput the difference between A's score and B's score ($A-B$) if both of them are playing optimally.", "sample_tests": "Examples\n\nInput\n21 45 1\n\nOutput\n0\n\nInput\n3100 100 100100 100 100\n\nOutput\n0\n\nInput\n22 15 6\n\nOutput\n-3", "difficulty": 1300, "url": "https://codeforces.com/problemset/problem/1038/C"}
{"header": "D. Slime\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "There are $n$ slimes in a row. Each slime has an integer value (possibly negative or zero) associated with it.\nAny slime can eat its adjacent slime (the closest slime to its left or to its right, assuming that this slime exists).\nWhen a slime with a value $x$ eats a slime with a value $y$, the eaten slime disappears, and the value of the remaining slime changes to $x - y$.\nThe slimes will eat each other until there is only one slime left.\nFind the maximum possible value of the last slime.\nNote\nIn the first example, a possible way of getting the last slime with value $4$ is:\nSecond slime eats the third slime, the row now contains slimes $2, -1, 1$\nSecond slime eats the third slime, the row now contains slimes $2, -2$\nFirst slime eats the second slime, the row now contains $4$\nIn the second example, the first slime can keep eating slimes to its right to end up with a value of $4$.", "input_specification": "Input\n\nThe first line of the input contains an integer $n$ ($1 \\le n \\le 500\\,000$) denoting the number of slimes.\n\nThe next line contains $n$ integers $a_i$ ($-10^9 \\le a_i \\le 10^9$), where $a_i$ is the value of $i$-th slime.", "output_specification": "Output\n\nPrint an only integer\u00a0\u2014 the maximum possible value of the last slime.", "sample_tests": "Examples\n\nInput\n42 1 2 1\n\nOutput\n4\n\nInput\n50 -1 -1 -1 -1\n\nOutput\n4", "difficulty": 1800, "url": "https://codeforces.com/problemset/problem/1038/D"}
{"header": "A. Two Friends\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Monocarp wants to throw a party. He has $n$ friends, and he wants to have at least $2$ of them at his party.\nThe $i$-th friend's best friend is $p_i$. All $p_i$ are distinct, and for every $i \\in [1, n]$, $p_i \\ne i$.\nMonocarp can send invitations to friends. The $i$-th friend comes to the party if\nboth the $i$-th friend and the $p_i$-th friend\nreceive an invitation (note that the $p_i$-th friend doesn't have to actually come to the party). Each invitation is sent to exactly one of the friends.\nFor example, if $p = [3, 1, 2, 5, 4]$, and Monocarp sends invitations to the friends $[1, 2, 4, 5]$, then the friends $[2, 4, 5]$ will come to the party. The friend $1$ won't come since his best friend didn't receive an invitation; the friend $3$ won't come since he didn't receive an invitation.\nCalculate the minimum number of invitations Monocarp has to send so that\nat least $2$\nfriends come to the party.\nNote\nIn the first testcase, Monocarp can send invitations to friends $4$ and $5$. Both of them will come to the party since they are each other's best friends, and both of them have invitations.\nIn the second testcase, Monocarp can send invitations to friends $1, 2$ and $3$, for example. Then friends $1$ and $2$ will attend: friend $1$ and his best friend $2$ have invitations, friend $2$ and his best friend $3$ have invitations. Friend $3$ won't attend since his friend $4$ doesn't have an invitation. It's impossible to send invitations to fewer than $3$ friends in such a way that at least $2$ come.\nIn the third testcase, Monocarp can send invitations to both friends $1$ and $2$, and both of them will attend.", "input_specification": "Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 5000$)\u00a0\u2014 the number of test cases.\n\nEach test case consists of two lines:\n\n the first line contains one integer $n$ ($2 \\le n \\le 50$)\u00a0\u2014 the number of friends; the second line contains $n$ integers $p_1, p_2, \\dots, p_n$ ($1 \\le p_i \\le n$; $p_i \\ne i$; all $p_i$ are distinct).", "output_specification": "Output\n\nPrint one integer\u00a0\u2014 the minimum number of invitations Monocarp has to send.", "sample_tests": "Example\n\nInput\n\n3\n\n5\n\n3 1 2 5 4\n\n4\n\n2 3 4 1\n\n2\n\n2 1\n\nOutput\n2\n3\n2", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1969/A"}
{"header": "B. Shifts and Sorting\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Let's define a\ncyclic shift\nof some string $s$ as a transformation from $s_1 s_2 \\dots s_{n-1} s_{n}$ into $s_{n} s_1 s_2 \\dots s_{n-1}$. In other words, you take one last character $s_n$ and place it before the first character while moving all other characters to the right.\nYou are given a binary string $s$ (a string consisting of only\n0\n-s and/or\n1\n-s).\nIn one operation, you can choose any substring $s_l s_{l+1} \\dots s_r$ ($1 \\le l < r \\le |s|$) and cyclically shift it. The\ncost\nof such operation is equal to $r - l + 1$ (or the length of the chosen substring).\nYou can perform the given operation any number of times. What is the minimum\ntotal\ncost to make $s$ sorted in non-descending order?\nNote\nIn the first test case, you can choose the whole string and perform a cyclic shift:\n10\n$\\rightarrow$\n01\n. The length of the substring is $2$, so the cost is $2$.\nIn the second test case, the string is already sorted, so you don't need to perform any operations.\nIn the third test case, one of the optimal strategies is the next:\nchoose substring $[1, 3]$:\n11000\n$\\rightarrow$\n01100\n;\nchoose substring $[2, 4]$:\n01100\n$\\rightarrow$\n00110\n;\nchoose substring $[3, 5]$:\n00110\n$\\rightarrow$\n00011\n.\nThe total cost is $3 + 3 + 3 = 9$.", "input_specification": "Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of test cases.\n\nThe first and only line of each test case contains a binary string $s$ ($2 \\le |s| \\le 2 \\cdot 10^5$; $s_i \\in$ { 0 , 1 })\u00a0\u2014 the string you need to sort.\n\nAdditional constraint on the input: the sum of lengths of strings over all test cases doesn't exceed $2 \\cdot 10^5$.", "output_specification": "Output\n\nFor each test case, print the single integer\u00a0\u2014 the minimum total cost to make string sorted using operation above any number of times.", "sample_tests": "Example\n\nInput\n\n5\n\n10\n\n0000\n\n11000\n\n101011\n\n01101001\n\nOutput\n2\n0\n9\n5\n11", "difficulty": 1000, "url": "https://codeforces.com/problemset/problem/1969/B"}
{"header": "C. Minimizing the Sum\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given an integer array $a$ of length $n$.\nYou can perform the following operation: choose an element of the array and replace it with any of its neighbor's value.\nFor example, if $a=[3, 1, 2]$, you can get one of the arrays $[3, 3, 2]$, $[3, 2, 2]$ and $[1, 1, 2]$ using one operation, but not $[2, 1, 2$] or $[3, 4, 2]$.\nYour task is to calculate the minimum possible total sum of the array if you can perform the aforementioned operation at most $k$ times.\nNote\nIn the first example, one of the possible sequences of operations is the following: $[3, 1, 2] \\rightarrow [1, 1, 2$].\nIn the second example, you do not need to apply the operation.\nIn the third example, one of the possible sequences of operations is the following: $[2, 2, 1, 3] \\rightarrow [2, 1, 1, 3] \\rightarrow [2, 1, 1, 1]$.\nIn the fourth example, one of the possible sequences of operations is the following: $[4, 1, 2, 2, 4, 3] \\rightarrow [1, 1, 2, 2, 4, 3] \\rightarrow [1, 1, 1, 2, 4, 3] \\rightarrow [1, 1, 1, 2, 2, 3]$.", "input_specification": "Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 3 \\cdot 10^5$; $0 \\le k \\le 10$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nAdditional constraint on the input: the sum of $n$ over all test cases doesn't exceed $3 \\cdot 10^5$.", "output_specification": "Output\n\nFor each test case, print a single integer\u00a0\u2014 the minimum possible total sum of the array if you can perform the aforementioned operation at most $k$ times.", "sample_tests": "Example\n\nInput\n\n4\n\n3 1\n\n3 1 2\n\n1 3\n\n5\n\n4 2\n\n2 2 1 3\n\n6 3\n\n4 1 2 2 4 3\n\nOutput\n4\n5\n5\n10", "difficulty": 1700, "url": "https://codeforces.com/problemset/problem/1969/C"}
{"header": "D. Shop Game\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Alice and Bob are playing a game in the shop. There are $n$ items in the shop; each item has two parameters: $a_i$ (item price for Alice) and $b_i$ (item price for Bob).\nAlice wants to choose a subset (possibly empty) of items and buy them. After that, Bob does the following:\nif Alice bought less than $k$ items, Bob can take all of them for free;\notherwise, he will take $k$ items for free that Alice bought (Bob chooses which $k$ items it will be), and for the rest of the chosen items, Bob will buy them from Alice and pay $b_i$ for the $i$-th item.\nAlice's profit is equal to $\\sum\\limits_{i \\in S} b_i - \\sum\\limits_{j \\in T} a_j$, where $S$ is the set of items Bob buys from Alice, and $T$ is the set of items Alice buys from the shop. In other words, Alice's profit is the difference between the amount Bob pays her and the amount she spends buying the items.\nAlice wants to maximize her profit, Bob wants to minimize Alice's profit. Your task is to calculate Alice's profit if both Alice and Bob act optimally.\nNote\nIn the first test case, Alice should buy the $2$-nd item and sell it to Bob, so her profit is $2 - 1 = 1$.\nIn the second test case, Alice should buy the $1$-st, the $2$-nd and the $3$-rd item; then Bob takes the $1$-st item for free and pays for the $2$-nd and the $3$-rd item. Alice's profit is $(3+2) - (1+2+1) = 1$. Bob could take $2$-nd item for free instead; this does not change Alice's profit. Bob won't take the $3$-rd item for free, since this would lead to a profit of $2$.", "input_specification": "Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5$; $0 \\le k \\le n$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nThe third line contains $n$ integers $b_1, b_2, \\dots, b_n$ ($1 \\le b_i \\le 10^9$).\n\nAdditional constraint on the input: the sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$.", "output_specification": "Output\n\nFor each test case, print a single integer\u00a0\u2014 Alice's profit if both Alice and Bob act optimally.", "sample_tests": "Example\n\nInput\n\n4\n\n2 0\n\n2 1\n\n1 2\n\n4 1\n\n1 2 1 4\n\n3 3 2 3\n\n4 2\n\n2 1 1 1\n\n4 2 3 2\n\n6 2\n\n1 3 4 9 1 3\n\n7 6 8 10 6 8\n\nOutput\n1\n1\n0\n7", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/1969/D"}
{"header": "A. Drinks Choosing\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Old timers of Summer Informatics School can remember previous camps in which each student was given a drink of his choice on the vechorka (late-evening meal). Or may be the story was more complicated?\nThere are $n$ students living in a building, and for each of them the favorite drink $a_i$ is known. So you know $n$ integers $a_1, a_2, \\dots, a_n$, where $a_i$ ($1 \\le a_i \\le k$) is the type of the favorite drink of the $i$-th student. The drink types are numbered from $1$ to $k$.\nThere are infinite number of drink sets. Each set consists of\nexactly two\nportions of the same drink. In other words, there are $k$ types of drink sets, the $j$-th type contains two portions of the drink $j$. The available number of sets of each of the $k$ types is infinite.\nYou know that students will receive the minimum possible number of sets to give all students exactly one drink. Obviously, the number of sets will be exactly $\\lceil \\frac{n}{2} \\rceil$, where $\\lceil x \\rceil$ is $x$ rounded up.\nAfter students receive the sets, they will distribute their portions by their choice: each student will get exactly one portion. Note, that if $n$ is odd then one portion will remain unused and the students' teacher will drink it.\nWhat is the maximum number of students that can get their favorite drink if $\\lceil \\frac{n}{2} \\rceil$ sets will be chosen optimally and students will distribute portions between themselves optimally?\nNote\nIn the first example, students could choose three sets with drinks $1$, $1$ and $2$ (so they will have two sets with two drinks of the type $1$ each and one set with two drinks of the type $2$, so portions will be $1, 1, 1, 1, 2, 2$). This way all students except the second one will get their favorite drinks.\nAnother possible answer is sets with drinks $1$, $2$ and $3$. In this case the portions will be $1, 1, 2, 2, 3, 3$. Then all the students except one will gain their favorite drinks. The only student that will not gain the favorite drink will be a student with $a_i = 1$ (i.e. the first, the third or the fourth).", "input_specification": "Input\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n, k \\le 1\\,000$) \u2014 the number of students in the building and the number of different drinks.\n\nThe next $n$ lines contain student's favorite drinks. The $i$-th line contains a single integer from $1$ to $k$ \u2014 the type of the favorite drink of the $i$-th student.", "output_specification": "Output\n\nPrint exactly one integer \u2014 the maximum number of students that can get a favorite drink.", "sample_tests": "Examples\n\nInput\n5 3\n1\n3\n1\n1\n2\n\nOutput\n4\n\nInput\n10 3\n2\n1\n3\n2\n3\n3\n1\n3\n1\n2\n\nOutput\n9", "difficulty": 1000, "url": "https://codeforces.com/problemset/problem/1195/A"}
{"header": "B. Sport Mafia\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Each evening after the dinner the SIS's students gather together to play the game of Sport Mafia.\nFor the tournament, Alya puts candies into the box, which will serve as a prize for a winner. To do that, she performs $n$ actions. The first action performed is to put a single candy into the box. For each of the remaining moves she can choose from two options:\nthe first option, in case the box contains at least one candy, is to take\nexactly one candy out and eat it\n. This way the number of candies in the box decreased by $1$;\nthe second option is to put candies in the box. In this case, Alya will put $1$ more candy, than she put in the previous time.\nThus, if the box is empty, then it can only use the second option.\nFor example, one possible sequence of Alya's actions look as follows:\nput one candy into the box;\nput two candies into the box;\neat one candy from the box;\neat one candy from the box;\nput three candies into the box;\neat one candy from the box;\nput four candies into the box;\neat one candy from the box;\nput five candies into the box;\nThis way she will perform $9$ actions, the number of candies at the end will be $11$, while Alya will eat $4$ candies in total.\nYou know the total number of actions $n$ and the number of candies at the end $k$. You need to find the total number of sweets Alya ate. That is the number of moves of the first option. It's guaranteed, that for the given $n$ and $k$ the answer always exists.\nPlease note, that during an action of the first option, Alya takes out and eats exactly one candy.\nNote\nIn the first example, Alya has made one move only. According to the statement, the first move is always putting one candy in the box. Hence Alya ate $0$ candies.\nIn the second example the possible sequence of Alya's actions looks as follows:\nput $1$ candy,\nput $2$ candies,\neat a candy,\neat a candy,\nput $3$ candies,\neat a candy,\nput $4$ candies,\neat a candy,\nput $5$ candies.\nThis way, she will make exactly $n=9$ actions and in the end the box will contain $1+2-1-1+3-1+4-1+5=11$ candies. The answer is $4$, since she ate $4$ candies in total.", "input_specification": "Input\n\nThe first line contains two integers $n$ and $k$ ($1 \\le n \\le 10^9$; $0 \\le k \\le 10^9$)\u00a0\u2014 the total number of moves and the number of candies in the box at the end. \n\nIt's guaranteed, that for the given $n$ and $k$ the answer exists.", "output_specification": "Output\n\nPrint a single integer\u00a0\u2014 the number of candies, which Alya ate. Please note, that in this problem there aren't multiple possible answers\u00a0\u2014 the answer is unique for any input data.", "sample_tests": "Examples\n\nInput\n1 1\n\nOutput\n0\n\nInput\n9 11\n\nOutput\n4\n\nInput\n5 0\n\nOutput\n3\n\nInput\n3 2\n\nOutput\n1", "difficulty": 1000, "url": "https://codeforces.com/problemset/problem/1195/B"}
{"header": "C. Basketball Exercise\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Finally, a basketball court has been opened in SIS, so Demid has decided to hold a basketball exercise session. $2 \\cdot n$ students have come to Demid's exercise session, and he lined up them into two rows of the same size (there are exactly $n$ people in each row). Students are numbered from $1$ to $n$ in each row in order from left to right.\nNow Demid wants to choose a team to play basketball. He will choose players from left to right, and the index of each chosen player (excluding the first one\ntaken\n) will be strictly greater than the index of the previously chosen player. To avoid giving preference to one of the rows, Demid chooses students in such a way that no consecutive chosen students belong to the same row. The first student can be chosen among all $2n$ students (there are no additional constraints), and a team can consist of any number of students.\nDemid thinks, that in order to compose a perfect team, he should choose students in such a way, that the total height of all chosen students is maximum possible. Help Demid to find the maximum possible total height of players in a team he can choose.\nNote\nIn the first example Demid can choose the following team as follows:\nIn the second example Demid can choose the following team as follows:", "input_specification": "Input\n\nThe first line of the input contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of students in each row.\n\nThe second line of the input contains $n$ integers $h_{1, 1}, h_{1, 2}, \\ldots, h_{1, n}$ ($1 \\le h_{1, i} \\le 10^9$), where $h_{1, i}$ is the height of the $i$-th student in the first row.\n\nThe third line of the input contains $n$ integers $h_{2, 1}, h_{2, 2}, \\ldots, h_{2, n}$ ($1 \\le h_{2, i} \\le 10^9$), where $h_{2, i}$ is the height of the $i$-th student in the second row.", "output_specification": "Output\n\nPrint a single integer \u2014 the maximum possible total height of players in a team Demid can choose.", "sample_tests": "Examples\n\nInput\n5\n9 3 5 7 3\n5 8 1 4 5\n\nOutput\n29\n\nInput\n3\n1 2 9\n10 1 1\n\nOutput\n19\n\nInput\n1\n7\n4\n\nOutput\n7", "difficulty": 1400, "url": "https://codeforces.com/problemset/problem/1195/C"}
{"header": "C. Basketball Exercise\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Finally, a basketball court has been opened in SIS, so Demid has decided to hold a basketball exercise session. $2 \\cdot n$ students have come to Demid's exercise session, and he lined up them into two rows of the same size (there are exactly $n$ people in each row). Students are numbered from $1$ to $n$ in each row in order from left to right.\nNow Demid wants to choose a team to play basketball. He will choose players from left to right, and the index of each chosen player (excluding the first one\ntaken\n) will be strictly greater than the index of the previously chosen player. To avoid giving preference to one of the rows, Demid chooses students in such a way that no consecutive chosen students belong to the same row. The first student can be chosen among all $2n$ students (there are no additional constraints), and a team can consist of any number of students.\nDemid thinks, that in order to compose a perfect team, he should choose students in such a way, that the total height of all chosen students is maximum possible. Help Demid to find the maximum possible total height of players in a team he can choose.\nNote\nIn the first example Demid can choose the following team as follows:\nIn the second example Demid can choose the following team as follows:", "input_specification": "Input\n\nThe first line of the input contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of students in each row.\n\nThe second line of the input contains $n$ integers $h_{1, 1}, h_{1, 2}, \\ldots, h_{1, n}$ ($1 \\le h_{1, i} \\le 10^9$), where $h_{1, i}$ is the height of the $i$-th student in the first row.\n\nThe third line of the input contains $n$ integers $h_{2, 1}, h_{2, 2}, \\ldots, h_{2, n}$ ($1 \\le h_{2, i} \\le 10^9$), where $h_{2, i}$ is the height of the $i$-th student in the second row.", "output_specification": "Output\n\nPrint a single integer \u2014 the maximum possible total height of players in a team Demid can choose.", "sample_tests": "Examples\n\nInput\n5\n9 3 5 7 3\n5 8 1 4 5\n\nOutput\n29\n\nInput\n3\n1 2 9\n10 1 1\n\nOutput\n19\n\nInput\n1\n7\n4\n\nOutput\n7", "difficulty": 1400, "url": "https://codeforces.com/problemset/problem/1195/D"}
{"header": "E. OpenStreetMap\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Seryozha conducts a course dedicated to building a map of heights of Stepanovo recreation center. He laid a rectangle grid of size $n \\times m$ cells on a map (rows of grid are numbered from $1$ to $n$ from north to south, and columns are numbered from $1$ to $m$ from west to east). After that he measured the average height of each cell above Rybinsk sea level and obtained a matrix of heights of size $n \\times m$. The cell $(i, j)$ lies on the intersection of the $i$-th row and the $j$-th column and has height $h_{i, j}$.\nSeryozha is going to look at the result of his work in the browser. The screen of Seryozha's laptop can fit a subrectangle of size $a \\times b$ of matrix of heights ($1 \\le a \\le n$, $1 \\le b \\le m$). Seryozha tries to decide how the weather can affect the recreation center \u2014 for example, if it rains, where all the rainwater will gather. To do so, he is going to find the cell having minimum height among all cells that are shown on the screen of his laptop.\nHelp Seryozha to calculate the sum of heights of such cells for all possible subrectangles he can see on his screen. In other words, you have to calculate the sum of minimum heights in submatrices of size $a \\times b$ with top left corners in $(i, j)$ over all $1 \\le i \\le n - a + 1$ and $1 \\le j \\le m - b + 1$.\nConsider the sequence $g_i = (g_{i - 1} \\cdot x + y) \\bmod z$. You are given integers $g_0$, $x$, $y$ and $z$. By miraculous coincidence, $h_{i, j} = g_{(i - 1) \\cdot m + j - 1}$ ($(i - 1) \\cdot m + j - 1$ is the index).\nNote\nThe matrix from the first example:", "input_specification": "Input\n\nThe first line of the input contains four integers $n$, $m$, $a$ and $b$ ($1 \\le n, m \\le 3\\,000$, $1 \\le a \\le n$, $1 \\le b \\le m$) \u2014 the number of rows and columns in the matrix Seryozha has, and the number of rows and columns that can be shown on the screen of the laptop, respectively.\n\nThe second line of the input contains four integers $g_0$, $x$, $y$ and $z$ ($0 \\le g_0, x, y < z \\le 10^9$).", "output_specification": "Output\n\nPrint a single integer \u2014 the answer to the problem.", "sample_tests": "Example\n\nInput\n3 4 2 1\n1 2 3 59\n\nOutput\n111", "difficulty": 2100, "url": "https://codeforces.com/problemset/problem/1195/E"}
{"header": "A. Lexicographically Maximum Subsequence\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "You've got string\ns\n, consisting of only lowercase English letters. Find its lexicographically maximum subsequence.\nWe'll call a non-empty string\ns\n[\np\n1\np\n2\n...\np\nk\n]\u2009=\ns\np\n1\ns\np\n2\n...\ns\np\nk\n(1\u2009\u2264\np\n1\n<\np\n2\n<\u2009...\u2009<\np\nk\n\u2264\u2009|\ns\n|)\na\nsubsequence\nof string\ns\n=\ns\n1\ns\n2\n...\ns\n|\ns\n|\n.\nString\nx\n=\nx\n1\nx\n2\n...\nx\n|\nx\n|\nis\nlexicographically larger\nthan string\ny\n=\ny\n1\ny\n2\n...\ny\n|\ny\n|\n, if either\n|\nx\n|\u2009>\u2009|\ny\n|\nand\nx\n1\n=\ny\n1\n,\nx\n2\n=\ny\n2\n,\u2009... ,\nx\n|\ny\n|\n=\ny\n|\ny\n|\n, or exists such number\nr\n(\nr\n<\u2009|\nx\n|,\nr\n<\u2009|\ny\n|)\n, that\nx\n1\n=\ny\n1\n,\nx\n2\n=\ny\n2\n,\u2009... ,\nx\nr\n=\ny\nr\nand\nx\nr\n+\u20091\n>\ny\nr\n+\u20091\n. Characters in lines are compared like their ASCII codes.\nNote\nLet's look at samples and see what the sought subsequences look like (they are marked with uppercase bold letters).\nThe first sample:\na\nB\na\nBBA\nThe second sample:\nabb\nC\nb\nCC\na\nC\nbb\nCB\naa\nBA", "input_specification": "Input\n\nThe single line contains a non-empty string *s* , consisting only of lowercase English letters. The string's length doesn't exceed 10 5 .", "output_specification": "Output\n\nPrint the lexicographically maximum subsequence of string *s* .", "sample_tests": "Examples\n\nInput\nababba\n\nOutput\nbbba\n\nInput\nabbcbccacbbcbaaba\n\nOutput\ncccccbba", "difficulty": 1100, "url": "https://codeforces.com/problemset/problem/196/A"}
{"header": "B. Infinite Maze\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "We've got a rectangular\nn\n\u00d7\nm\n-cell maze. Each cell is either passable, or is a wall (impassable). A little boy found the maze and cyclically tiled a plane with it so that the plane became an infinite maze. Now on this plane cell\n(\nx\n,\ny\n)\nis a wall if and only if cell\nis a wall.\nIn this problem\nis a remainder of dividing number\na\nby number\nb\n.\nThe little boy stood at some cell on the plane and he wondered whether he can walk infinitely far away from his starting position. From cell\n(\nx\n,\ny\n)\nhe can go to one of the following cells:\n(\nx\n,\ny\n-\u20091)\n,\n(\nx\n,\ny\n+\u20091)\n,\n(\nx\n-\u20091,\ny\n)\nand\n(\nx\n+\u20091,\ny\n)\n, provided that the cell he goes to is not a wall.\nNote\nIn the first sample the little boy can go up for infinitely long as there is a \"clear path\" that goes vertically. He just needs to repeat the following steps infinitely: up, up, left, up, up, right, up.\nIn the second sample the vertical path is blocked. The path to the left doesn't work, too \u2014 the next \"copy\" of the maze traps the boy.", "input_specification": "Input\n\nThe first line contains two space-separated integers *n* and *m* ( 1\u2009\u2264\u2009 *n* ,\u2009 *m* \u2009\u2264\u20091500 ) \u2014 the height and the width of the maze that the boy used to cyclically tile the plane.\n\nEach of the next *n* lines contains *m* characters \u2014 the description of the labyrinth. Each character is either a \" # \", that marks a wall, a \" . \", that marks a passable cell, or an \" S \", that marks the little boy's starting point. \n\nThe starting point is a passable cell. It is guaranteed that character \" S \" occurs exactly once in the input.", "output_specification": "Output\n\nPrint \" Yes \" (without the quotes), if the little boy can walk infinitely far from the starting point. Otherwise, print \" No \" (without the quotes).", "sample_tests": "Examples\n\nInput\n5 4##.###S##..##.###..#\n\nOutput\nYes\n\nInput\n5 4##.###S##..#..#.#.##\n\nOutput\nNo", "difficulty": 2000, "url": "https://codeforces.com/problemset/problem/196/B"}
{"header": "C. Paint Tree\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "You are given a tree with\nn\nvertexes and\nn\npoints on a plane, no three points lie on one straight line.\nYour task is to paint the given tree on a plane, using the given points as vertexes.\nThat is, you should correspond each vertex of the tree to exactly one point and each point should correspond to a vertex. If two vertexes of the tree are connected by an edge, then the corresponding points should have a segment painted between them. The segments that correspond to non-adjacent edges, should not have common points. The segments that correspond to adjacent edges should have exactly one common point.\nNote\nThe possible solutions for the sample are given below.", "input_specification": "Input\n\nThe first line contains an integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u20091500 ) \u2014 the number of vertexes on a tree (as well as the number of chosen points on the plane).\n\nEach of the next *n* \u2009-\u20091 lines contains two space-separated integers *u* *i* and *v* *i* ( 1\u2009\u2264\u2009 *u* *i* ,\u2009 *v* *i* \u2009\u2264\u2009 *n* , *u* *i* \u2009\u2260\u2009 *v* *i* ) \u2014 the numbers of tree vertexes connected by the *i* -th edge.\n\nEach of the next *n* lines contain two space-separated integers *x* *i* and *y* *i* ( \u2009-\u200910 9 \u2009\u2264\u2009 *x* *i* ,\u2009 *y* *i* \u2009\u2264\u200910 9 ) \u2014 the coordinates of the *i* -th point on the plane. No three points lie on one straight line.\n\nIt is guaranteed that under given constraints problem has a solution.", "output_specification": "Output\n\nPrint *n* distinct space-separated integers from 1 to *n* : the *i* -th number must equal the number of the vertex to place at the *i* -th point (the points are numbered in the order, in which they are listed in the input).\n\nIf there are several solutions, print any of them.", "sample_tests": "Examples\n\nInput\n31 32 30 01 12 0\n\nOutput\n1 3 2\n\nInput\n41 22 31 4-1 -23 5-3 32 0\n\nOutput\n4 2 1 3", "difficulty": 2200, "url": "https://codeforces.com/problemset/problem/196/C"}
{"header": "A. Spit Problem\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "In a Berland's zoo there is an enclosure with camels. It is known that camels like to spit. Bob watched these interesting animals for the whole day and registered in his notepad where each animal spitted. Now he wants to know if in the zoo there are two camels, which spitted at each other. Help him to solve this task.\nThe trajectory of a camel's spit is an arc, i.e. if the camel in position\nx\nspits\nd\nmeters right, he can hit only the camel in position\nx\n+\nd\n, if such a camel exists.", "input_specification": "Input\n\nThe first line contains integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u2009100 ) \u2014 the amount of camels in the zoo. Each of the following *n* lines contains two integers *x* *i* and *d* *i* ( \u2009-\u200910 4 \u2009\u2264\u2009 *x* *i* \u2009\u2264\u200910 4 ,\u20091\u2009\u2264\u2009| *d* *i* |\u2009\u2264\u20092\u00b710 4 ) \u2014 records in Bob's notepad. *x* *i* is a position of the *i* -th camel, and *d* *i* is a distance at which the *i* -th camel spitted. Positive values of *d* *i* correspond to the spits right, negative values correspond to the spits left. No two camels may stand in the same position.", "output_specification": "Output\n\nIf there are two camels, which spitted at each other, output YES . Otherwise, output NO .", "sample_tests": "Examples\n\nInput\n20 11 -1\n\nOutput\nYES\n\nInput\n30 11 12 -2\n\nOutput\nNO\n\nInput\n52 -103 100 55 -510 1\n\nOutput\nYES", "difficulty": 1000, "url": "https://codeforces.com/problemset/problem/29/A"}
{"header": "B. Traffic Lights\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "A car moves from point A to point B at speed\nv\nmeters per second. The action takes place on the X-axis. At the distance\nd\nmeters from A there are traffic lights. Starting from time 0, for the first\ng\nseconds the green light is on, then for the following\nr\nseconds the red light is on, then again the green light is on for the\ng\nseconds, and so on.\nThe car can be instantly accelerated from\n0\nto\nv\nand vice versa, can instantly slow down from the\nv\nto\n0\n. Consider that it passes the traffic lights at the green light instantly. If the car approaches the traffic lights at the moment when the red light has just turned on, it doesn't have time to pass it. But if it approaches the traffic lights at the moment when the green light has just turned on, it can move. The car leaves point A at the time 0.\nWhat is the minimum time for the car to get from point A to point B without breaking the traffic rules?", "input_specification": "Input\n\nThe first line contains integers *l* , *d* , *v* , *g* , *r* ( 1\u2009\u2264\u2009 *l* ,\u2009 *d* ,\u2009 *v* ,\u2009 *g* ,\u2009 *r* \u2009\u2264\u20091000,\u2009 *d* \u2009<\u2009 *l* ) \u2014 the distance between A and B (in meters), the distance from A to the traffic lights, car's speed, the duration of green light and the duration of red light.", "output_specification": "Output\n\nOutput a single number \u2014 the minimum time that the car needs to get from point A to point B. Your output must have relative or absolute error less than 10 \u2009-\u20096 .", "sample_tests": "Examples\n\nInput\n2 1 3 4 5\n\nOutput\n0.66666667\n\nInput\n5 4 3 1 1\n\nOutput\n2.33333333", "difficulty": 1500, "url": "https://codeforces.com/problemset/problem/29/B"}
{"header": "C. Mail Stamps\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "One day Bob got a letter in an envelope. Bob knows that when Berland's post officers send a letter directly from city\n\u00abA\u00bb\nto city\n\u00abB\u00bb\n, they stamp it with\n\u00abA B\u00bb\n, or\n\u00abB A\u00bb\n. Unfortunately, often it is impossible to send a letter directly from the city of the sender to the city of the receiver, that's why the letter is sent via some intermediate cities. Post officers never send a letter in such a way that the route of this letter contains some city more than once. Bob is sure that the post officers stamp the letters accurately.\nThere are\nn\nstamps on the envelope of Bob's letter. He understands that the possible routes of this letter are only two. But the stamps are numerous, and Bob can't determine himself none of these routes. That's why he asks you to help him. Find one of the possible routes of the letter.", "input_specification": "Input\n\nThe first line contains integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ) \u2014 amount of mail stamps on the envelope. Then there follow *n* lines with two integers each \u2014 description of the stamps. Each stamp is described with indexes of the cities between which a letter is sent. The indexes of cities are integers from 1 to 10 9 . Indexes of all the cities are different. Every time the letter is sent from one city to another, exactly one stamp is put on the envelope. It is guaranteed that the given stamps correspond to some valid route from some city to some other city.", "output_specification": "Output\n\nOutput *n* \u2009+\u20091 numbers \u2014 indexes of cities in one of the two possible routes of the letter.", "sample_tests": "Examples\n\nInput\n21 100100 2\n\nOutput\n2 100 1 \n\nInput\n33 1100 23 2\n\nOutput\n100 2 3 1", "difficulty": 1700, "url": "https://codeforces.com/problemset/problem/29/C"}
{"header": "D. Ant on the Tree\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Connected undirected graph without cycles is called a tree. Trees is a class of graphs which is interesting not only for people, but for ants too.\nAn ant stands at the root of some tree. He sees that there are\nn\nvertexes in the tree, and they are connected by\nn\n-\u20091\nedges so that there is a path between any pair of vertexes. A leaf is a distinct from root vertex, which is connected with exactly one other vertex.\nThe ant wants to visit every vertex in the tree and return to the root, passing every edge twice. In addition, he wants to visit the leaves in a specific order. You are to find some possible route of the ant.", "input_specification": "Input\n\nThe first line contains integer *n* ( 3\u2009\u2264\u2009 *n* \u2009\u2264\u2009300 ) \u2014 amount of vertexes in the tree. Next *n* \u2009-\u20091 lines describe edges. Each edge is described with two integers \u2014 indexes of vertexes which it connects. Each edge can be passed in any direction. Vertexes are numbered starting from 1 . The root of the tree has number 1 . The last line contains *k* integers, where *k* is amount of leaves in the tree. These numbers describe the order in which the leaves should be visited. It is guaranteed that each leaf appears in this order exactly once.", "output_specification": "Output\n\nIf the required route doesn't exist, output -1 . Otherwise, output 2 *n* \u2009-\u20091 numbers, describing the route. Every time the ant comes to a vertex, output it's index.", "sample_tests": "Examples\n\nInput\n31 22 33\n\nOutput\n1 2 3 2 1 \n\nInput\n61 21 32 44 54 65 6 3\n\nOutput\n1 2 4 5 4 6 4 2 1 3 1 \n\nInput\n61 21 32 44 54 65 3 6\n\nOutput\n-1", "difficulty": 2000, "url": "https://codeforces.com/problemset/problem/29/D"}
{"header": "A. Long Beautiful Integer\n\ntime limit per test\n 3 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given an integer $x$ of $n$ digits $a_1, a_2, \\ldots, a_n$, which make up its decimal notation in order from left to right.\nAlso, you are given a positive integer $k < n$.\nLet's call integer $b_1, b_2, \\ldots, b_m$\nbeautiful\nif $b_i = b_{i+k}$ for each $i$, such that $1 \\leq i \\leq m - k$.\nYou need to find the smallest\nbeautiful\ninteger $y$, such that $y \\geq x$.", "input_specification": "Input\n\nThe first line of input contains two integers $n, k$ ($2 \\leq n \\leq 200\\,000, 1 \\leq k < n$): the number of digits in $x$ and $k$.\n\nThe next line of input contains $n$ digits $a_1, a_2, \\ldots, a_n$ ($a_1 \\neq 0$, $0 \\leq a_i \\leq 9$): digits of $x$.", "output_specification": "Output\n\nIn the first line print one integer $m$: the number of digits in $y$.\n\nIn the next line print $m$ digits $b_1, b_2, \\ldots, b_m$ ($b_1 \\neq 0$, $0 \\leq b_i \\leq 9$): digits of $y$.", "sample_tests": "Examples\n\nInput\n3 2\n353\n\nOutput\n3\n353\n\nInput\n4 2\n1234\n\nOutput\n4\n1313", "difficulty": 1700, "url": "https://codeforces.com/problemset/problem/1268/A"}
{"header": "B. Domino for Young\n\ntime limit per test\n 3 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given a Young diagram.\nGiven diagram is a histogram with $n$ columns of lengths $a_1, a_2, \\ldots, a_n$ ($a_1 \\geq a_2 \\geq \\ldots \\geq a_n \\geq 1$).\nYoung diagram for $a=[3,2,2,2,1]$.\nYour goal is to find the largest number of non-overlapping dominos that you can draw inside of this histogram, a domino is a $1 \\times 2$ or $2 \\times 1$ rectangle.\nNote\nSome of the possible solutions for the example:", "input_specification": "Input\n\nThe first line of input contain one integer $n$ ($1 \\leq n \\leq 300\\,000$): the number of columns in the given histogram.\n\nThe next line of input contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 300\\,000, a_i \\geq a_{i+1}$): the lengths of columns.", "output_specification": "Output\n\nOutput one integer: the largest number of non-overlapping dominos that you can draw inside of the given Young diagram.", "sample_tests": "Example\n\nInput\n5\n3 2 2 2 1\n\nOutput\n4", "difficulty": 2000, "url": "https://codeforces.com/problemset/problem/1268/B"}
{"header": "A. Homework\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Once when Gerald studied in the first year at school, his teacher gave the class the following homework. She offered the students a string consisting of\nn\nsmall Latin letters; the task was to learn the way the letters that the string contains are written. However, as Gerald is too lazy, he has no desire whatsoever to learn those letters. That's why he decided to lose some part of the string (not necessarily a connected part). The lost part can consist of any number of segments of any length, at any distance from each other. However, Gerald knows that if he loses more than\nk\ncharacters, it will be very suspicious.\nFind the least number of distinct characters that can remain in the string after no more than\nk\ncharacters are deleted. You also have to find any possible way to delete the characters.\nNote\nIn the first sample the string consists of five identical letters but you are only allowed to delete 4 of them so that there was at least one letter left. Thus, the right answer is 1 and any string consisting of characters \"\na\n\" from 1 to 5 in length.\nIn the second sample you are allowed to delete 4 characters. You cannot delete all the characters, because the string has length equal to 7. However, you can delete all characters apart from \"\na\n\" (as they are no more than four), which will result in the \"\naaaa\n\" string.\nIn the third sample you are given a line whose length is equal to 8, and\nk\n=\u200910\n, so that the whole line can be deleted. The correct answer is 0 and an empty string.", "input_specification": "Input\n\nThe first input data line contains a string whose length is equal to *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ). The string consists of lowercase Latin letters. The second line contains the number *k* ( 0\u2009\u2264\u2009 *k* \u2009\u2264\u200910 5 ).", "output_specification": "Output\n\nPrint on the first line the only number *m* \u2014 the least possible number of different characters that could remain in the given string after it loses no more than *k* characters.\n\nPrint on the second line the string that Gerald can get after some characters are lost. The string should have exactly *m* distinct characters. The final string should be the subsequence of the initial string. If Gerald can get several different strings with exactly *m* distinct characters, print any of them.", "sample_tests": "Examples\n\nInput\naaaaa4\n\nOutput\n1aaaaa\n\nInput\nabacaba4\n\nOutput\n1aaaa\n\nInput\nabcdefgh10\n\nOutput\n0", "difficulty": 1200, "url": "https://codeforces.com/problemset/problem/101/A"}
{"header": "B. Buses\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 265 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Little boy Gerald studies at school which is quite far from his house. That's why he has to go there by bus every day. The way from home to school is represented by a segment of a straight line; the segment contains exactly\nn\n+\u20091\nbus stops. All of them are numbered with integers from\n0\nto\nn\nin the order in which they follow from Gerald's home. The bus stop by Gerald's home has number\n0\nand the bus stop by the school has number\nn\n.\nThere are\nm\nbuses running between the house and the school: the\ni\n-th bus goes from stop\ns\ni\nto\nt\ni\n(\ns\ni\n<\nt\ni\n), visiting all the intermediate stops in the order in which they follow on the segment. Besides, Gerald's no idiot and he wouldn't get off the bus until it is still possible to ride on it closer to the school (obviously, getting off would be completely pointless). In other words, Gerald can get on the\ni\n-th bus on any stop numbered from\ns\ni\nto\nt\ni\n-\u20091\ninclusive, but he can get off the\ni\n-th bus only on the bus stop\nt\ni\n.\nGerald can't walk between the bus stops and he also can't move in the direction from the school to the house.\nGerald wants to know how many ways he has to get from home to school. Tell him this number. Two ways are considered different if Gerald crosses some segment between the stops on different buses. As the number of ways can be too much, find the remainder of a division of this number by\n1000000007\n(\n10\n9\n+\u20097\n).\nNote\nThe first test has the only variant to get to school: first on bus number one to the bus stop number one; then on bus number two to the bus stop number two.\nIn the second test no bus goes to the third bus stop, where the school is positioned. Thus, the correct answer is\n0\n.\nIn the third test Gerald can either get or not on any of the first four buses to get closer to the school. Thus, the correct answer is\n2\n4\n=\u200916\n.", "input_specification": "Input\n\nThe first line contains two space-separated integers: *n* and *m* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 9 ,\u20090\u2009\u2264\u2009 *m* \u2009\u2264\u200910 5 ). Then follow *m* lines each containing two integers *s* *i* ,\u2009 *t* *i* . They are the numbers of starting stops and end stops of the buses ( 0\u2009\u2264\u2009 *s* *i* \u2009<\u2009 *t* *i* \u2009\u2264\u2009 *n* ).", "output_specification": "Output\n\nPrint the only number \u2014 the number of ways to get to the school modulo 1000000007 ( 10 9 \u2009+\u20097 ).", "sample_tests": "Examples\n\nInput\n2 20 11 2\n\nOutput\n1\n\nInput\n3 20 11 2\n\nOutput\n0\n\nInput\n5 50 10 20 30 40 5\n\nOutput\n16", "difficulty": 1700, "url": "https://codeforces.com/problemset/problem/101/B"}
{"header": "C. Vectors\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "At a geometry lesson Gerald was given a task: to get vector\nB\nout of vector\nA\n. Besides, the teacher permitted him to perform the following operations with vector\n\u0410\n:\nTurn the vector by\n90\ndegrees clockwise.\nAdd to the vector a certain vector\nC\n.\nOperations could be performed in any order any number of times.\nCan Gerald cope with the task?", "input_specification": "Input\n\nThe first line contains integers *x* 1 \u0438 *y* 1 \u2014 the coordinates of the vector *A* ( \u2009-\u200910 8 \u2009\u2264\u2009 *x* 1 ,\u2009 *y* 1 \u2009\u2264\u200910 8 ). The second and the third line contain in the similar manner vectors *B* and *C* (their coordinates are integers; their absolute value does not exceed 10 8 ).", "output_specification": "Output\n\nPrint \" YES \" (without the quotes) if it is possible to get vector *B* using the given operations. Otherwise print \" NO \" (without the quotes).", "sample_tests": "Examples\n\nInput\n0 01 10 1\n\nOutput\nYES\n\nInput\n0 01 11 1\n\nOutput\nYES\n\nInput\n0 01 12 2\n\nOutput\nNO", "difficulty": 2000, "url": "https://codeforces.com/problemset/problem/101/C"}
{"header": "A. Noldbach problem\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 64 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Nick is interested in prime numbers. Once he read about\nGoldbach problem\n. It states that every even integer greater than\n2\ncan be expressed as the sum of two primes. That got Nick's attention and he decided to invent a problem of his own and call it\nNoldbach problem\n. Since Nick is interested only in prime numbers, Noldbach problem states that at least\nk\nprime numbers from\n2\nto\nn\ninclusively can be expressed as the sum of three integer numbers: two neighboring prime numbers and\n1\n. For example,\n19\n=\n7\n+\n11\n+\n1\n, or\n13\n=\n5\n+\n7\n+\n1\n.\nTwo prime numbers are called neighboring if there are no other prime numbers between them.\nYou are to help Nick, and find out if he is right or wrong.\nNote\nIn the first sample the answer is\nYES\nsince at least two numbers can be expressed as it was described (for example, 13 and 19). In the second sample the answer is\nNO\nsince it is impossible to express 7 prime numbers from 2 to 45 in the desired form.", "input_specification": "Input\n\nThe first line of the input contains two integers *n* ( 2\u2009\u2264\u2009 *n* \u2009\u2264\u20091000 ) and *k* ( 0\u2009\u2264\u2009 *k* \u2009\u2264\u20091000 ).", "output_specification": "Output\n\nOutput YES if at least *k* prime numbers from 2 to *n* inclusively can be expressed as it was described above. Otherwise output NO .", "sample_tests": "Examples\n\nInput\n27 2\n\nOutput\nYES\n\nInput\n45 7\n\nOutput\nNO", "difficulty": 1000, "url": "https://codeforces.com/problemset/problem/17/A"}
{"header": "B. Hierarchy\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 64 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Nick's company employed\nn\npeople. Now Nick needs to build a tree hierarchy of \u00absupervisor-surbodinate\u00bb relations in the company (this is to say that each employee, except one, has exactly one supervisor). There are\nm\napplications written in the following form:\n\u00abemployee\na\ni\nis ready to become a supervisor of employee\nb\ni\nat extra cost\nc\ni\n\u00bb\n. The qualification\nq\nj\nof each employee is known, and for each application the following is true:\nq\na\ni\n>\nq\nb\ni\n.\nWould you help Nick calculate the minimum cost of such a hierarchy, or find out that it is impossible to build it.\nNote\nIn the first sample one of the possible ways for building a hierarchy is to take applications with indexes 1, 2 and 4, which give 11 as the minimum total cost. In the second sample it is impossible to build the required hierarchy, so the answer is\n-1\n.", "input_specification": "Input\n\nThe first input line contains integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u20091000 ) \u2014 amount of employees in the company. The following line contains *n* space-separated numbers *q* *j* ( 0\u2009\u2264\u2009 *q* *j* \u2009\u2264\u200910 6 )\u2014 the employees' qualifications. The following line contains number *m* ( 0\u2009\u2264\u2009 *m* \u2009\u2264\u200910000 ) \u2014 amount of received applications. The following *m* lines contain the applications themselves, each of them in the form of three space-separated numbers: *a* *i* , *b* *i* and *c* *i* ( 1\u2009\u2264\u2009 *a* *i* ,\u2009 *b* *i* \u2009\u2264\u2009 *n* , 0\u2009\u2264\u2009 *c* *i* \u2009\u2264\u200910 6 ). Different applications can be similar, i.e. they can come from one and the same employee who offered to become a supervisor of the same person but at a different cost. For each application *q* *a* *i* \u2009>\u2009 *q* *b* *i* .", "output_specification": "Output\n\nOutput the only line \u2014 the minimum cost of building such a hierarchy, or -1 if it is impossible to build it.", "sample_tests": "Examples\n\nInput\n47 2 3 141 2 52 4 13 4 11 3 5\n\nOutput\n11\n\nInput\n31 2 323 1 23 1 3\n\nOutput\n-1", "difficulty": 1500, "url": "https://codeforces.com/problemset/problem/17/B"}
{"header": "A. A Twisty Movement\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "A dragon symbolizes wisdom, power and wealth. On Lunar New Year's Day, people model a dragon with bamboo strips and clothes, raise them with rods, and hold the rods high and low to resemble a flying dragon.\nA performer holding the rod low is represented by a\n1\n, while one holding it high is represented by a\n2\n. Thus, the line of performers can be represented by a sequence\na\n1\n,\na\n2\n,\u2009...,\na\nn\n.\nLittle Tommy is among them. He would like to choose an interval\n[\nl\n,\nr\n]\n(\n1\u2009\u2264\nl\n\u2264\nr\n\u2264\nn\n), then reverse\na\nl\n,\na\nl\n+\u20091\n,\u2009...,\na\nr\nso that the length of the longest non-decreasing subsequence of the new sequence is maximum.\nA non-decreasing subsequence is a sequence of indices\np\n1\n,\np\n2\n,\u2009...,\np\nk\n, such that\np\n1\n<\np\n2\n<\u2009...\u2009<\np\nk\nand\na\np\n1\n\u2264\na\np\n2\n\u2264\u2009...\u2009\u2264\na\np\nk\n. The length of the subsequence is\nk\n.\nNote\nIn the first example, after reversing\n[2,\u20093]\n, the array will become\n[1,\u20091,\u20092,\u20092]\n, where the length of the longest non-decreasing subsequence is\n4\n.\nIn the second example, after reversing\n[3,\u20097]\n, the array will become\n[1,\u20091,\u20091,\u20091,\u20092,\u20092,\u20092,\u20092,\u20092,\u20091]\n, where the length of the longest non-decreasing subsequence is\n9\n.", "input_specification": "Input\n\nThe first line contains an integer *n* (1\u2009\u2264\u2009 *n* \u2009\u2264\u20092000) , denoting the length of the original sequence.\n\nThe second line contains *n* space-separated integers, describing the original sequence *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* (1\u2009\u2264\u2009 *a* *i* \u2009\u2264\u20092,\u2009 *i* \u2009=\u20091,\u20092,\u2009...,\u2009 *n* ) .", "output_specification": "Output\n\nPrint a single integer, which means the maximum possible length of the longest non-decreasing subsequence of the new sequence.", "sample_tests": "Examples\n\nInput\n41 2 1 2\n\nOutput\n4\n\nInput\n101 1 2 2 2 1 1 2 2 1\n\nOutput\n9", "difficulty": 1800, "url": "https://codeforces.com/problemset/problem/933/A"}
{"header": "B. A Determined Cleanup\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "In order to put away old things and welcome a fresh new year, a thorough cleaning of the house is a must.\nLittle Tommy finds an old polynomial and cleaned it up by taking it modulo another. But now he regrets doing this...\nGiven two integers\np\nand\nk\n, find a polynomial\nf\n(\nx\n)\nwith non-negative integer coefficients strictly less than\nk\n, whose remainder is\np\nwhen divided by\n(\nx\n+\nk\n)\n. That is,\nf\n(\nx\n)\u2009=\nq\n(\nx\n)\u00b7(\nx\n+\nk\n)\u2009+\np\n, where\nq\n(\nx\n)\nis a polynomial (not necessarily with integer coefficients).\nNote\nIn the first example,\nf\n(\nx\n)\u2009=\nx\n6\n+\nx\n5\n+\nx\n4\n+\nx\n=\u2009(\nx\n5\n-\nx\n4\n+\u20093\nx\n3\n-\u20096\nx\n2\n+\u200912\nx\n-\u200923)\u00b7(\nx\n+\u20092)\u2009+\u200946\n.\nIn the second example,\nf\n(\nx\n)\u2009=\nx\n2\n+\u2009205\nx\n+\u200992\u2009=\u2009(\nx\n-\u20099)\u00b7(\nx\n+\u2009214)\u2009+\u20092018\n.", "input_specification": "Input\n\nThe only line of input contains two space-separated integers *p* and *k* ( 1\u2009\u2264\u2009 *p* \u2009\u2264\u200910 18 , 2\u2009\u2264\u2009 *k* \u2009\u2264\u20092\u2009000 ).", "output_specification": "Output\n\nIf the polynomial does not exist, print a single integer -1 , or output two lines otherwise.\n\nIn the first line print a non-negative integer *d* \u2014 the number of coefficients in the polynomial.\n\nIn the second line print *d* space-separated integers *a* 0 ,\u2009 *a* 1 ,\u2009...,\u2009 *a* *d* \u2009-\u20091 , describing a polynomial fulfilling the given requirements. Your output should satisfy 0\u2009\u2264\u2009 *a* *i* \u2009<\u2009 *k* for all 0\u2009\u2264\u2009 *i* \u2009\u2264\u2009 *d* \u2009-\u20091 , and *a* *d* \u2009-\u20091 \u2009\u2260\u20090 .\n\nIf there are many possible solutions, print any of them.", "sample_tests": "Examples\n\nInput\n46 2\n\nOutput\n70 1 0 0 1 1 1\n\nInput\n2018 214\n\nOutput\n392 205 1", "difficulty": 2000, "url": "https://codeforces.com/problemset/problem/933/B"}
{"header": "A. Two Permutations\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given three integers $n$, $a$, and $b$. Determine if there exist two permutations $p$ and $q$ of length $n$, for which the following conditions hold:\nThe length of the longest common prefix of $p$ and $q$ is $a$.\nThe length of the longest common suffix of $p$ and $q$ is $b$.\nA permutation of length $n$ is an array containing each integer from $1$ to $n$ exactly once. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\nNote\nIn the first test case, $[1]$ and $[1]$ form a valid pair.\nIn the second test case and the third case, we can show that such a pair of permutations doesn't exist.\nIn the fourth test case, $[1,2,3,4]$ and $[1,3,2,4]$ form a valid pair.", "input_specification": "Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1\\leq t\\leq 10^4$)\u00a0\u2014 the number of test cases. The description of test cases follows.\n\nThe only line of each test case contains three integers $n$, $a$, and $b$ ($1\\leq a,b\\leq n\\leq 100$).", "output_specification": "Output\n\nFor each test case, if such a pair of permutations exists, output \" Yes \"; otherwise, output \" No \". You can output each letter in any case (upper or lower).", "sample_tests": "Example\n\nInput\n\n4\n\n1 1 1\n\n2 1 2\n\n3 1 1\n\n4 1 1\n\nOutput\nYes\nNo\nNo\nYes", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1761/A"}
{"header": "B. Elimination of a Ring\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Define a cyclic sequence of size $n$ as an array $s$ of length $n$, in which $s_n$ is adjacent to $s_1$.\nMuxii has a ring represented by a cyclic sequence $a$ of size $n$.\nHowever, the ring itself hates equal adjacent elements. So if two adjacent elements in the sequence are equal at any time,\none of them\nwill be erased\nimmediately\n. The sequence doesn't contain equal adjacent elements initially.\nMuxii can perform the following operation until the sequence becomes empty:\nChoose an element in $a$ and erase it.\nFor example, if ring is $[1, 2, 4, 2, 3, 2]$, and Muxii erases element $4$, then ring would erase one of the elements equal to $2$, and the ring will become $[1, 2, 3, 2]$.\nMuxii wants to find the\nmaximum\nnumber of operations he could perform.\nNote that in a ring of size $1$, its only element isn't considered adjacent to itself (so it's not immediately erased).\nNote\nIn the first test case, you can erase the second element first, then erase the remaining elements one by one in any order. In total, you can perform the operation $4$ times. Note that if you erase the first element first, then the sequence will be turned into $[2,3,2]$ and then immediately become $[2,3]$.\nIn the second test case, you can erase the first element first, then the sequence becomes $[2,1]$. Then you can erase all remaining elements one by one in any order.", "input_specification": "Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1\\leq t\\leq 100$)\u00a0\u2014 the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\leq n\\leq 100$)\u00a0\u2014 the size of the cyclic sequence.\n\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1\\leq a_i\\leq n$)\u00a0\u2014 the sequence itself.\n\nIt's guaranteed that $a_i\\ne a_{i+1}$ for $1\\leq i<n$.\n\nIt's guaranteed that $a_n\\ne a_1$ when $n>1$.", "output_specification": "Output\n\nFor each test case, output a single integer\u00a0\u2014 the maximum number of operations Muxii can perform.", "sample_tests": "Example\n\nInput\n\n3\n\n4\n\n1 2 3 2\n\n4\n\n1 2 1 2\n\n1\n\n1\n\nOutput\n4\n3\n1", "difficulty": 1000, "url": "https://codeforces.com/problemset/problem/1761/B"}
{"header": "C. Set Construction\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given a binary matrix $b$ (all elements of the matrix are $0$ or $1$) of $n$ rows and $n$ columns.\nYou need to construct a $n$ sets $A_1, A_2, \\ldots, A_n$, for which the following conditions are satisfied:\nEach set is nonempty and consists of distinct integers between $1$ and $n$ inclusive.\nAll sets are distinct.\nFor all pairs $(i,j)$ satisfying $1\\leq i, j\\leq n$, $b_{i,j}=1$ if and only if $A_i\\subsetneq A_j$. In other words, $b_{i, j}$ is $1$ if $A_i$ is a proper subset of $A_j$ and $0$ otherwise.\nSet $X$ is a proper subset of set $Y$, if $X$ is a nonempty subset of $Y$, and $X \\neq Y$.\nIt's guaranteed that for all test cases in this problem, such $n$ sets exist.\nNote that it doesn't mean that such $n$ sets exist for all possible inputs.\nIf there are multiple solutions, you can output any of them.\nNote\nIn the first test case, we have $A_1 = \\{1, 2, 3\\}, A_2 = \\{1, 3\\}, A_3 = \\{2, 4\\}, A_4 = \\{1, 2, 3, 4\\}$. Sets $A_1, A_2, A_3$ are proper subsets of $A_4$, and also set $A_2$ is a proper subset of $A_1$. No other set is a proper subset of any other set.\nIn the second test case, we have $A_1 = \\{1\\}, A_2 = \\{1, 2\\}, A_3 = \\{1, 2, 3\\}$. $A_1$ is a proper subset of $A_2$ and $A_3$, and $A_2$ is a proper subset of $A_3$.", "input_specification": "Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1\\le t\\le 1000$) \u2014 the number of test cases. The description of test cases follows.\n\nThe first line contains a single integer $n$ ($1\\le n\\le 100$).\n\nThe following $n$ lines contain a binary matrix $b$, the $j$-th character of $i$-th line denotes $b_{i,j}$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $1000$.\n\nIt's guaranteed that for all test cases in this problem, such $n$ sets exist.", "output_specification": "Output\n\nFor each test case, output $n$ lines.\n\nFor the $i$-th line, first output $s_i$ $(1 \\le s_i \\le n)$ \u00a0\u2014 the size of the set $A_i$. Then, output $s_i$ distinct integers from $1$ to $n$ \u00a0\u2014 the elements of the set $A_i$.\n\nIf there are multiple solutions, you can output any of them.\n\nIt's guaranteed that for all test cases in this problem, such $n$ sets exist.", "sample_tests": "Example\n\nInput\n2\n4\n0001\n1001\n0001\n0000\n3\n011\n001\n000\n\nOutput\n3 1 2 3\n2 1 3\n2 2 4\n4 1 2 3 4\n1 1\n2 1 2\n3 1 2 3", "difficulty": 1400, "url": "https://codeforces.com/problemset/problem/1761/C"}
{"header": "D. Carry Bit\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Let $f(x,y)$ be the number of\ncarries\nof $x+y$ in binary (i.\u00a0e. $f(x,y)=g(x)+g(y)-g(x+y)$, where $g(x)$ is the number of ones in the binary representation of $x$).\nGiven two integers $n$ and $k$, find the number of ordered pairs $(a,b)$ such that $0 \\leq a,b < 2^n$, and $f(a,b)$ equals $k$. Note that for $a\\ne b$, $(a,b)$ and $(b,a)$ are considered as two different pairs.\nAs this number may be large, output it modulo $10^9+7$.\nNote\nHere are some examples for understanding\ncarries\n:\n$$ \\begin{aligned} &\\begin{array}{r} 1_{\\ \\ }1_{\\ \\ }1\\\\ +\\ _{1}1_{\\ \\ }0_{\\ \\ }0\\\\ \\hline \\ 1_{\\ \\ }0_{\\ \\ }1_{\\ \\ }1 \\end{array} &\\begin{array}{r} \\ 1_{\\ \\ }0_{\\ \\ }1\\\\ +\\ _{\\ \\ }0_{\\ \\ }0_{1}1\\\\ \\hline \\ 0_{\\ \\ }1_{\\ \\ }1_{\\ \\ }0 \\end{array} & &\\begin{array}{r} \\ 1_{\\ \\ }0_{\\ \\ }1\\\\ +\\ _{1}0_{1}1_{1}1\\\\ \\hline \\ 1_{\\ \\ }0_{\\ \\ }0_{\\ \\ }0 \\end{array} \\end{aligned} $$\nSo $f(7,4)=1$, $f(5,1)=1$ and $f(5,3)=3$.\nIn the first test case, all the pairs meeting the constraints are $(1,1),(1,5),(2,2),(2,3),(3,2),(4,4),(4,5),(4,6),(4,7),(5,1),(5,4),(5,6),(6,4),(6,5),(7,4)$.", "input_specification": "Input\n\nThe only line of each test contains two integers $n$ and $k$ ($0\\leq k<n\\leq 10^6$).", "output_specification": "Output\n\nOutput a single integer \u00a0\u2014 the answer modulo $10^9+7$.", "sample_tests": "Examples\n\nInput\n3 1\n\nOutput\n15\n\nInput\n3 0\n\nOutput\n27\n\nInput\n998 244\n\nOutput\n573035660", "difficulty": 2100, "url": "https://codeforces.com/problemset/problem/1761/D"}
{"header": "A. Magic Numbers\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "A magic number is a number formed by concatenation of numbers\n1\n,\n14\nand\n144\n. We can use each of these numbers any number of times. Therefore\n14144\n,\n141414\nand\n1411\nare magic numbers but\n1444\n,\n514\nand\n414\nare not.\nYou're given a number. Determine if it is a magic number or not.", "input_specification": "Input\n\nThe first line of input contains an integer *n* , (1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 9 ) . This number doesn't contain leading zeros.", "output_specification": "Output\n\nPrint \" YES \" if *n* is a magic number or print \" NO \" if it's not.", "sample_tests": "Examples\n\nInput\n114114\n\nOutput\nYES\n\nInput\n1111\n\nOutput\nYES\n\nInput\n441231\n\nOutput\nNO", "difficulty": 900, "url": "https://codeforces.com/problemset/problem/320/A"}
{"header": "B. Ping-Pong (Easy Version)\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "In this problem at each moment you have a set of intervals. You can move from interval\n(\na\n,\nb\n)\nfrom our set to interval\n(\nc\n,\nd\n)\nfrom our set if and only if\nc\n<\na\n<\nd\nor\nc\n<\nb\n<\nd\n. Also there is a path from interval\nI\n1\nfrom our set to interval\nI\n2\nfrom our set if there is a sequence of successive moves starting from\nI\n1\nso that we can reach\nI\n2\n.\nYour program should handle the queries of the following two types:\n\"\n1 x y\n\"\n(\nx\n<\ny\n)\n\u2014 add the new interval\n(\nx\n,\ny\n)\nto the set of intervals. The length of the new interval is guaranteed to be strictly greater than all the previous intervals.\n\"\n2 a b\n\"\n(\na\n\u2260\nb\n)\n\u2014 answer the question: is there a path from\na\n-th (one-based) added interval to\nb\n-th (one-based) added interval?\nAnswer all the queries. Note, that initially you have an empty set of intervals.", "input_specification": "Input\n\nThe first line of the input contains integer *n* denoting the number of queries, (1\u2009\u2264\u2009 *n* \u2009\u2264\u2009100) . Each of the following lines contains a query as described above. All numbers in the input are integers and don't exceed 10 9 by their absolute value.\n\nIt's guaranteed that all queries are correct.", "output_specification": "Output\n\nFor each query of the second type print \" YES \" or \" NO \" on a separate line depending on the answer.", "sample_tests": "Examples\n\nInput\n51 1 51 5 112 1 21 2 92 1 2\n\nOutput\nNOYES", "difficulty": 1500, "url": "https://codeforces.com/problemset/problem/320/B"}
{"header": "C. Malek Dance Club\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "As a tradition, every year before IOI all the members of Natalia Fan Club are invited to Malek Dance Club to have a fun night together. Malek Dance Club has\n2\nn\nmembers and coincidentally Natalia Fan Club also has\n2\nn\nmembers. Each member of MDC is assigned a unique id\ni\nfrom\n0\nto\n2\nn\n-\u20091\n. The same holds for each member of NFC.\nOne of the parts of this tradition is one by one dance, where each member of MDC dances with a member of NFC. A dance pair is a pair of numbers\n(\na\n,\nb\n)\nsuch that member\na\nfrom MDC dances with member\nb\nfrom NFC.\nThe complexity of a pairs' assignment is the number of pairs of dancing pairs\n(\na\n,\nb\n)\nand\n(\nc\n,\nd\n)\nsuch that\na\n<\nc\nand\nb\n>\nd\n.\nYou are given a binary number of length\nn\nnamed\nx\n. We know that member\ni\nfrom MDC dances with member\nfrom NFC. Your task is to calculate the complexity of this assignment modulo\n1000000007\n(10\n9\n+\u20097)\n.\nExpression\ndenotes applying \u00abXOR\u00bb to numbers\nx\nand\ny\n. This operation exists in all modern programming languages, for example, in\nC++\nand\nJava\nit denotes as \u00ab\n^\n\u00bb, in\nPascal\n\u2014 \u00ab\nxor\n\u00bb.", "input_specification": "Input\n\nThe first line of input contains a binary number *x* of lenght *n* , (1\u2009\u2264\u2009 *n* \u2009\u2264\u2009100) .\n\nThis number may contain leading zeros.", "output_specification": "Output\n\nPrint the complexity of the given dance assignent modulo 1000000007 (10 9 \u2009+\u20097) .", "sample_tests": "Examples\n\nInput\n11\n\nOutput\n6\n\nInput\n01\n\nOutput\n2\n\nInput\n1\n\nOutput\n1", "difficulty": 1600, "url": "https://codeforces.com/problemset/problem/320/C"}
{"header": "D. Psychos in a Line\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "There are\nn\npsychos standing in a line. Each psycho is assigned a unique integer from\n1\nto\nn\n. At each step every psycho who has an id greater than the psycho to his right (if exists) kills his right neighbor in the line. Note that a psycho might kill and get killed at the same step.\nYou're given the initial arrangement of the psychos in the line. Calculate how many steps are needed to the moment of time such, that nobody kills his neighbor after that moment. Look notes to understand the statement more precise.\nNote\nIn the first sample line of the psychos transforms as follows: [10 9 7 8 6 5 3 4 2 1]\n\u2192\n[10 8 4]\n\u2192\n[10]. So, there are two steps.", "input_specification": "Input\n\nThe first line of input contains integer *n* denoting the number of psychos, (1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ) . In the second line there will be a list of *n* space separated distinct integers each in range 1 to *n* , inclusive \u2014 ids of the psychos in the line from left to right.", "output_specification": "Output\n\nPrint the number of steps, so that the line remains the same afterward.", "sample_tests": "Examples\n\nInput\n1010 9 7 8 6 5 3 4 2 1\n\nOutput\n2\n\nInput\n61 2 3 4 5 6\n\nOutput\n0", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/320/D"}
{"header": "E. Kalila and Dimna in the Logging Industry\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Kalila and Dimna are two jackals living in a huge jungle. One day they decided to join a logging factory in order to make money.\nThe manager of logging factory wants them to go to the jungle and cut\nn\ntrees with heights\na\n1\n,\na\n2\n,\u2009...,\na\nn\n. They bought a chain saw from a shop. Each time they use the chain saw on the tree number\ni\n, they can decrease the height of this tree by one unit. Each time that Kalila and Dimna use the chain saw, they need to recharge it. Cost of charging depends on the id of the trees which have been cut completely (a tree is cut completely if its height equal to 0). If the maximum id of a tree which has been cut completely is\ni\n(the tree that have height\na\ni\nin the beginning), then the cost of charging the chain saw would be\nb\ni\n. If no tree is cut completely, Kalila and Dimna cannot charge the chain saw. The chainsaw is charged in the beginning. We know that for each\ni\n<\nj\n,\na\ni\n<\na\nj\nand\nb\ni\n>\nb\nj\nand also\nb\nn\n=\u20090\nand\na\n1\n=\u20091\n. Kalila and Dimna want to cut all the trees completely, with minimum cost.\nThey want you to help them! Will you?", "input_specification": "Input\n\nThe first line of input contains an integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ). The second line of input contains *n* integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* ( 1\u2009\u2264\u2009 *a* *i* \u2009\u2264\u200910 9 ). The third line of input contains *n* integers *b* 1 ,\u2009 *b* 2 ,\u2009...,\u2009 *b* *n* ( 0\u2009\u2264\u2009 *b* *i* \u2009\u2264\u200910 9 ).\n\nIt's guaranteed that *a* 1 \u2009=\u20091 , *b* *n* \u2009=\u20090 , *a* 1 \u2009<\u2009 *a* 2 \u2009<\u2009...\u2009<\u2009 *a* *n* and *b* 1 \u2009>\u2009 *b* 2 \u2009>\u2009...\u2009>\u2009 *b* *n* .", "output_specification": "Output\n\nThe only line of output must contain the minimum cost of cutting all the trees completely.\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin , cout streams or the %I64d specifier.", "sample_tests": "Examples\n\nInput\n51 2 3 4 55 4 3 2 0\n\nOutput\n25\n\nInput\n61 2 3 10 20 306 5 4 3 2 0\n\nOutput\n138", "difficulty": 2100, "url": "https://codeforces.com/problemset/problem/320/E"}
{"header": "E. Kalila and Dimna in the Logging Industry\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Kalila and Dimna are two jackals living in a huge jungle. One day they decided to join a logging factory in order to make money.\nThe manager of logging factory wants them to go to the jungle and cut\nn\ntrees with heights\na\n1\n,\na\n2\n,\u2009...,\na\nn\n. They bought a chain saw from a shop. Each time they use the chain saw on the tree number\ni\n, they can decrease the height of this tree by one unit. Each time that Kalila and Dimna use the chain saw, they need to recharge it. Cost of charging depends on the id of the trees which have been cut completely (a tree is cut completely if its height equal to 0). If the maximum id of a tree which has been cut completely is\ni\n(the tree that have height\na\ni\nin the beginning), then the cost of charging the chain saw would be\nb\ni\n. If no tree is cut completely, Kalila and Dimna cannot charge the chain saw. The chainsaw is charged in the beginning. We know that for each\ni\n<\nj\n,\na\ni\n<\na\nj\nand\nb\ni\n>\nb\nj\nand also\nb\nn\n=\u20090\nand\na\n1\n=\u20091\n. Kalila and Dimna want to cut all the trees completely, with minimum cost.\nThey want you to help them! Will you?", "input_specification": "Input\n\nThe first line of input contains an integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ). The second line of input contains *n* integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* ( 1\u2009\u2264\u2009 *a* *i* \u2009\u2264\u200910 9 ). The third line of input contains *n* integers *b* 1 ,\u2009 *b* 2 ,\u2009...,\u2009 *b* *n* ( 0\u2009\u2264\u2009 *b* *i* \u2009\u2264\u200910 9 ).\n\nIt's guaranteed that *a* 1 \u2009=\u20091 , *b* *n* \u2009=\u20090 , *a* 1 \u2009<\u2009 *a* 2 \u2009<\u2009...\u2009<\u2009 *a* *n* and *b* 1 \u2009>\u2009 *b* 2 \u2009>\u2009...\u2009>\u2009 *b* *n* .", "output_specification": "Output\n\nThe only line of output must contain the minimum cost of cutting all the trees completely.\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin , cout streams or the %I64d specifier.", "sample_tests": "Examples\n\nInput\n51 2 3 4 55 4 3 2 0\n\nOutput\n25\n\nInput\n61 2 3 10 20 306 5 4 3 2 0\n\nOutput\n138", "difficulty": 2100, "url": "https://codeforces.com/problemset/problem/320/F"}
{"header": "E. Kalila and Dimna in the Logging Industry\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Kalila and Dimna are two jackals living in a huge jungle. One day they decided to join a logging factory in order to make money.\nThe manager of logging factory wants them to go to the jungle and cut\nn\ntrees with heights\na\n1\n,\na\n2\n,\u2009...,\na\nn\n. They bought a chain saw from a shop. Each time they use the chain saw on the tree number\ni\n, they can decrease the height of this tree by one unit. Each time that Kalila and Dimna use the chain saw, they need to recharge it. Cost of charging depends on the id of the trees which have been cut completely (a tree is cut completely if its height equal to 0). If the maximum id of a tree which has been cut completely is\ni\n(the tree that have height\na\ni\nin the beginning), then the cost of charging the chain saw would be\nb\ni\n. If no tree is cut completely, Kalila and Dimna cannot charge the chain saw. The chainsaw is charged in the beginning. We know that for each\ni\n<\nj\n,\na\ni\n<\na\nj\nand\nb\ni\n>\nb\nj\nand also\nb\nn\n=\u20090\nand\na\n1\n=\u20091\n. Kalila and Dimna want to cut all the trees completely, with minimum cost.\nThey want you to help them! Will you?", "input_specification": "Input\n\nThe first line of input contains an integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ). The second line of input contains *n* integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* ( 1\u2009\u2264\u2009 *a* *i* \u2009\u2264\u200910 9 ). The third line of input contains *n* integers *b* 1 ,\u2009 *b* 2 ,\u2009...,\u2009 *b* *n* ( 0\u2009\u2264\u2009 *b* *i* \u2009\u2264\u200910 9 ).\n\nIt's guaranteed that *a* 1 \u2009=\u20091 , *b* *n* \u2009=\u20090 , *a* 1 \u2009<\u2009 *a* 2 \u2009<\u2009...\u2009<\u2009 *a* *n* and *b* 1 \u2009>\u2009 *b* 2 \u2009>\u2009...\u2009>\u2009 *b* *n* .", "output_specification": "Output\n\nThe only line of output must contain the minimum cost of cutting all the trees completely.\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin , cout streams or the %I64d specifier.", "sample_tests": "Examples\n\nInput\n51 2 3 4 55 4 3 2 0\n\nOutput\n25\n\nInput\n61 2 3 10 20 306 5 4 3 2 0\n\nOutput\n138", "difficulty": 2100, "url": "https://codeforces.com/problemset/problem/320/G"}
{"header": "E. Kalila and Dimna in the Logging Industry\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Kalila and Dimna are two jackals living in a huge jungle. One day they decided to join a logging factory in order to make money.\nThe manager of logging factory wants them to go to the jungle and cut\nn\ntrees with heights\na\n1\n,\na\n2\n,\u2009...,\na\nn\n. They bought a chain saw from a shop. Each time they use the chain saw on the tree number\ni\n, they can decrease the height of this tree by one unit. Each time that Kalila and Dimna use the chain saw, they need to recharge it. Cost of charging depends on the id of the trees which have been cut completely (a tree is cut completely if its height equal to 0). If the maximum id of a tree which has been cut completely is\ni\n(the tree that have height\na\ni\nin the beginning), then the cost of charging the chain saw would be\nb\ni\n. If no tree is cut completely, Kalila and Dimna cannot charge the chain saw. The chainsaw is charged in the beginning. We know that for each\ni\n<\nj\n,\na\ni\n<\na\nj\nand\nb\ni\n>\nb\nj\nand also\nb\nn\n=\u20090\nand\na\n1\n=\u20091\n. Kalila and Dimna want to cut all the trees completely, with minimum cost.\nThey want you to help them! Will you?", "input_specification": "Input\n\nThe first line of input contains an integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ). The second line of input contains *n* integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* ( 1\u2009\u2264\u2009 *a* *i* \u2009\u2264\u200910 9 ). The third line of input contains *n* integers *b* 1 ,\u2009 *b* 2 ,\u2009...,\u2009 *b* *n* ( 0\u2009\u2264\u2009 *b* *i* \u2009\u2264\u200910 9 ).\n\nIt's guaranteed that *a* 1 \u2009=\u20091 , *b* *n* \u2009=\u20090 , *a* 1 \u2009<\u2009 *a* 2 \u2009<\u2009...\u2009<\u2009 *a* *n* and *b* 1 \u2009>\u2009 *b* 2 \u2009>\u2009...\u2009>\u2009 *b* *n* .", "output_specification": "Output\n\nThe only line of output must contain the minimum cost of cutting all the trees completely.\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin , cout streams or the %I64d specifier.", "sample_tests": "Examples\n\nInput\n51 2 3 4 55 4 3 2 0\n\nOutput\n25\n\nInput\n61 2 3 10 20 306 5 4 3 2 0\n\nOutput\n138", "difficulty": 2100, "url": "https://codeforces.com/problemset/problem/320/H"}
{"header": "A. Stable Arrangement of Rooks\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You have an $n \\times n$ chessboard and $k$ rooks. Rows of this chessboard are numbered by integers from $1$ to $n$ from top to bottom and columns of this chessboard are numbered by integers from $1$ to $n$ from left to right. The cell $(x, y)$ is the cell on the intersection of row $x$ and collumn $y$ for $1 \\leq x \\leq n$ and $1 \\leq y \\leq n$.\nThe arrangement of rooks on this board is called\ngood\n, if no rook is beaten by another rook.\nA rook beats all the rooks that shares the same row or collumn with it.\nThe\ngood\narrangement of rooks on this board is called\nnot stable\n, if it is possible to move one rook to the adjacent cell so arrangement becomes not good. Otherwise, the\ngood\narrangement is\nstable\n. Here, adjacent cells are the cells\nthat share a side\n.\nSuch arrangement of $3$ rooks on the $4 \\times 4$ chessboard is good, but it is not stable: the rook from $(1, 1)$ can be moved to the adjacent cell $(2, 1)$ and rooks on cells $(2, 1)$ and $(2, 4)$ will beat each other.\nPlease, find any stable arrangement of $k$ rooks on the $n \\times n$ chessboard or report that there is no such arrangement.\nNote\nIn the first test case, you should find stable arrangement of $2$ rooks on the $3 \\times 3$ chessboard. Placing them in cells $(3, 1)$ and $(1, 3)$ gives stable arrangement.\nIn the second test case it can be shown that it is impossbile to place $3$ rooks on the $3 \\times 3$ chessboard to get stable arrangement.", "input_specification": "Input\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 100$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains two integers $n$, $k$ ($1 \\leq k \\leq n \\leq 40$)\u00a0\u2014 the size of the chessboard and the number of rooks.", "output_specification": "Output\n\nIf there is a stable arrangement of $k$ rooks on the $n \\times n$ chessboard, output $n$ lines of symbols . and R . The $j$-th symbol of the $i$-th line should be equals R if and only if there is a rook on the cell $(i, j)$ in your arrangement.\n\nIf there are multiple solutions, you may output any of them.\n\nIf there is no stable arrangement, output $-1$.", "sample_tests": "Example\n\nInput\n\n5\n\n3 2\n\n3 3\n\n1 1\n\n5 2\n\n40 33\n\nOutput\n..R\n...\nR..\n-1\nR\n.....\nR....\n.....\n....R\n.....\n-1", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1621/A"}
{"header": "B. Integers Shop\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "The integers shop sells $n$ segments. The $i$-th of them contains all integers from $l_i$ to $r_i$ and costs $c_i$ coins.\nTomorrow Vasya will go to this shop and will buy some segments there. He will get all integers that appear in at least one of bought segments. The total cost of the purchase is the sum of costs of all segments in it.\nAfter shopping, Vasya will get some more integers as a gift. He will get integer $x$ as a gift if and only if all of the following conditions are satisfied:\nVasya hasn't bought $x$.\nVasya has bought integer $l$ that is less than $x$.\nVasya has bought integer $r$ that is greater than $x$.\nVasya can get integer $x$ as a gift only once so he won't have the same integers after receiving a gift.\nFor example, if Vasya buys segment $[2, 4]$ for $20$ coins and segment $[7, 8]$ for $22$ coins, he spends $42$ coins and receives integers $2, 3, 4, 7, 8$ from these segments. He also gets integers $5$ and $6$ as a gift.\nDue to the technical issues only the first $s$ segments (that is, segments $[l_1, r_1], [l_2, r_2], \\ldots, [l_s, r_s]$) will be available tomorrow in the shop.\nVasya wants to get (to buy or to get as a gift) as many integers as possible. If he can do this in differents ways, he selects the cheapest of them.\nFor each $s$ from $1$ to $n$, find how many coins will Vasya spend if only the first $s$ segments will be available.\nNote\nIn the first test case if $s = 1$ then Vasya can buy only the segment $[2, 4]$ for $20$ coins and get $3$ integers.\nThe way to get $7$ integers for $42$ coins in case $s = 2$ is described in the statement.\nIn the second test case note, that there can be the same segments in the shop.", "input_specification": "Input\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 1000$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains the single integer $n$ ($1 \\leq n \\leq 10^5$)\u00a0\u2014 the number of segments in the shop.\n\nEach of next $n$ lines contains three integers $l_i$, $r_i$, $c_i$ ($1 \\leq l_i \\leq r_i \\leq 10^9, 1 \\leq c_i \\leq 10^9$)\u00a0\u2014 the ends of the $i$-th segments and its cost.\n\nIt is guaranteed that the total sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$.", "output_specification": "Output\n\nFor each test case output $n$ integers: the $s$-th ($1 \\leq s \\leq n$) of them should be the number of coins Vasia will spend in the shop if only the first $s$ segments will be available.", "sample_tests": "Example\n\nInput\n\n3\n\n2\n\n2 4 20\n\n7 8 22\n\n2\n\n5 11 42\n\n5 11 42\n\n6\n\n1 4 4\n\n5 8 9\n\n7 8 7\n\n2 10 252\n\n1 11 271\n\n1 10 1\n\nOutput\n20\n42\n42\n42\n4\n13\n11\n256\n271\n271", "difficulty": 1500, "url": "https://codeforces.com/problemset/problem/1621/B"}
{"header": "C. Hidden Permutations\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "This is an interactive problem.\nThe jury has a permutation $p$ of length $n$ and wants you to guess it. For this, the jury created another permutation $q$ of length $n$. Initially, $q$ is an identity permutation ($q_i = i$ for all $i$).\nYou can ask queries to get $q_i$ for any $i$ you want. After each query, the jury will change $q$ in the following way:\nAt first, the jury will create a new permutation $q'$ of length $n$ such that $q'_i = q_{p_i}$ for all $i$.\nThen the jury will replace permutation $q$ with pemutation $q'$.\nYou can make no more than $2n$ queries in order to quess $p$.\nInteraction\nInteraction in each test case starts after reading the single integer $n$ ($1 \\leq n \\leq 10^4$)\u00a0\u2014 the length of permutations $p$ and $q$.\nTo get the value of $q_i$, output the query in the format $?$ $i$ ($1 \\leq i \\leq n$). After that you will receive the value of $q_i$.\nYou can make at most $2n$ queries. After the incorrect query you will receive $0$ and you should exit immediately to get\nWrong answer\nverdict.\nWhen you will be ready to determine $p$, output $p$ in format $!$ $p_1$ $p_2$ $\\ldots$ $p_n$. After this you should go to the next test case or exit if it was the last test case. Printing the permutation is not counted as one of $2n$ queries.\nAfter printing a query do not forget to output end of line and flush the output. Otherwise, you will get\nIdleness limit exceeded\n. To do this, use:\nfflush(stdout)\nor\ncout.flush()\nin C++;\nSystem.out.flush()\nin Java;\nflush(output)\nin Pascal;\nstdout.flush()\nin Python;\nsee documentation for other languages.\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed $10^4$. The interactor is not adaptive in this problem.\nHacks:\nTo hack, use the following format:\nThe first line contains the single integer $t$\u00a0\u2014 the number of test cases.\nThe first line of each test case contains the single integer $n$\u00a0\u2014 the length of the permutations $p$ and $q$. The second line of each test case contains $n$ integers $p_1, p_2, \\ldots, p_n$\u00a0\u2014 the hidden permutation for this test case.\nNote\nIn the first test case the hidden permutation $p = [4, 2, 1, 3]$.\nBefore the first query $q = [1, 2, 3, 4]$ so answer for the query will be $q_3 = 3$.\nBefore the second query $q = [4, 2, 1, 3]$ so answer for the query will be $q_2 = 2$.\nBefore the third query $q = [3, 2, 4, 1]$ so answer for the query will be $q_4 = 1$.\nIn the second test case the hidden permutation $p = [1, 3, 4, 2]$.\nEmpty strings are given only for better readability. There will be no empty lines in the testing system.", "input_specification": "Input\n\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 1000$)\u00a0\u2014 the number of test cases.", "output_specification": "", "sample_tests": "Example\n\nInput\n2\n4\n\n3\n\n2\n\n1\n\n4\n\n2\n\n4\n\n4\n\nOutput\n? 3\n\n? 2\n\n? 4\n\n! 4 2 1 3\n\n? 2\n\n? 3\n\n? 2\n\n! 1 3 4 2", "difficulty": 1700, "url": "https://codeforces.com/problemset/problem/1621/C"}
{"header": "D. The Winter Hike\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Circular land is an $2n \\times 2n$ grid. Rows of this grid are numbered by integers from $1$ to $2n$ from top to bottom and columns of this grid are numbered by integers from $1$ to $2n$ from left to right. The cell $(x, y)$ is the cell on the intersection of row $x$ and column $y$ for $1 \\leq x \\leq 2n$ and $1 \\leq y \\leq 2n$.\nThere are $n^2$ of your friends in the top left corner of the grid. That is, in each cell $(x, y)$ with $1 \\leq x, y \\leq n$ there is exactly one friend. Some of the other cells are covered with snow.\nYour friends want to get to the bottom right corner of the grid. For this in each cell $(x, y)$ with $n+1 \\leq x, y \\leq 2n$ there should be exactly one friend. It doesn't matter in what cell each of friends will be.\nYou have decided to help your friends to get to the bottom right corner of the grid.\nFor this, you can give instructions of the following types:\nYou select a row $x$. All friends in this row should move to the next cell in this row. That is, friend from the cell $(x, y)$ with $1 \\leq y < 2n$ will move to the cell $(x, y + 1)$ and friend from the cell $(x, 2n)$ will move to the cell $(x, 1)$.\nYou select a row $x$. All friends in this row should move to the previous cell in this row. That is, friend from the cell $(x, y)$ with $1 < y \\leq 2n$ will move to the cell $(x, y - 1)$ and friend from the cell $(x, 1)$ will move to the cell $(x, 2n)$.\nYou select a column $y$. All friends in this column should move to the next cell in this column. That is, friend from the cell $(x, y)$ with $1 \\leq x < 2n$ will move to the cell $(x + 1, y)$ and friend from the cell $(2n, y)$ will move to the cell $(1, y)$.\nYou select a column $y$. All friends in this column should move to the previous cell in this column. That is, friend from the cell $(x, y)$ with $1 < x \\leq 2n$ will move to the cell $(x - 1, y)$ and friend from the cell $(1, y)$ will move to the cell $(2n, y)$.\nNote how friends on the grid border behave in these instructions.\nExample of applying the third operation to the second column. Here, colorful circles denote your friends and blue cells are covered with snow.\nYou can give such instructions any number of times. You can give instructions of different types. If after any instruction one of your friends is in the cell covered with snow he becomes ill.\nIn order to save your friends you can remove snow from some cells before giving the first instruction:\nYou can select the cell $(x, y)$ that is covered with snow now and remove snow from this cell for $c_{x, y}$ coins.\nYou can do this operation any number of times.\nYou want to spend the minimal number of coins and give some instructions to your friends. After this, all your friends should be in the bottom right corner of the grid and none of them should be ill.\nPlease, find how many coins you will spend.\nNote\nIn the first test case you can remove snow from the cells $(2, 1)$ and $(2, 2)$ for $100$ coins. Then you can give instructions\nAll friends in the first collum should move to the previous cell. After this, your friend will be in the cell $(2, 1)$.\nAll friends in the second row should move to the next cell. After this, your friend will be in the cell $(2, 2)$.\nIn the second test case you can remove all snow from the columns $3$ and $4$ for $22$ coins. Then you can give instructions\nAll friends in the first row should move to the next cell.\nAll friends in the first row should move to the next cell.\nAll friends in the second row should move to the next cell.\nAll friends in the second row should move to the next cell.\nAll friends in the third column should move to the next cell.\nAll friends in the third column should move to the next cell.\nAll friends in the fourth column should move to the next cell.\nAll friends in the fourth column should move to the next cell.\nIt can be shown that none of the friends will become ill and that it is impossible to spend less coins.", "input_specification": "Input\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 100$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains the single integer $n$ ($1 \\leq n \\leq 250$).\n\nEach of the next $2n$ lines contains $2n$ integers $c_{i, 1}, c_{i, 2}, \\ldots, c_{i, 2n}$ ($0 \\leq c_{i, j} \\leq 10^9$)\u00a0\u2014 costs of removing snow from cells. If $c_{i, j} = 0$ for some $i, j$ than there is no snow in cell $(i, j)$. Otherwise, cell $(i, j)$ is covered with snow.\n\nIt is guaranteed that $c_{i, j} = 0$ for $1 \\leq i, j \\leq n$.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed $250$.", "output_specification": "Output\n\nFor each test case output one integer\u00a0\u2014 the minimal number of coins you should spend.", "sample_tests": "Example\n\nInput\n\n4\n\n1\n\n0 8\n\n1 99\n\n2\n\n0 0 0 0\n\n0 0 0 0\n\n9 9 2 2\n\n9 9 9 9\n\n2\n\n0 0 4 2\n\n0 0 2 4\n\n4 2 4 2\n\n2 4 2 4\n\n4\n\n0 0 0 0 0 0 0 2\n\n0 0 0 0 0 0 2 0\n\n0 0 0 0 0 2 0 0\n\n0 0 0 0 2 0 0 0\n\n0 0 0 2 2 0 2 2\n\n0 0 2 0 1 6 2 1\n\n0 2 0 0 2 4 7 4\n\n2 0 0 0 2 0 1 6\n\nOutput\n100\n22\n14\n42", "difficulty": 2100, "url": "https://codeforces.com/problemset/problem/1621/D"}
{"header": "A. Cipher Shifer\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "There is a string $a$ (unknown to you), consisting of lowercase Latin letters, encrypted according to the following rule into string $s$:\nafter each character of string $a$, an arbitrary (possibly zero) number of any lowercase Latin letters, different from the character itself, is added;\nafter each such addition, the character that we supplemented is added.\nYou are given string $s$, and you need to output the initial string $a$. In other words, you need to decrypt string $s$.\nNote that each string encrypted in this way is decrypted\nuniquely\n.\nNote\nIn the first encrypted message, the letter $a$ is encrypted as $aba$, and the letter $c$ is encrypted as $cabac$.\nIn the second encrypted message, only one letter $q$ is encrypted as $qzxcq$.\nIn the third encrypted message, zero characters are added to each letter.", "input_specification": "Input\n\nThe first line of the input contains a single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\n\nThe descriptions of the test cases follow.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 100$)\u00a0\u2014 the length of the encrypted message.\n\nThe second line of each test case contains a string $s$ of length $n$\u00a0\u2014 the encrypted message obtained from some string $a$.", "output_specification": "Output\n\nFor each test case, output the decrypted message $a$ on a separate line.", "sample_tests": "Example\n\nInput\n\n3\n\n8\n\nabacabac\n\n5\n\nqzxcq\n\n20\n\nccooddeeffoorrcceess\n\nOutput\nac\nq\ncodeforces", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1840/A"}
{"header": "B. Binary Cafe\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Once upon a time, Toma found himself in a binary cafe. It is a very popular and unusual place.\nThe cafe offers visitors $k$ different delicious desserts. The desserts are numbered from $0$ to $k-1$. The cost of the $i$-th dessert is $2^i$ coins, because it is a binary cafe! Toma is willing to spend no more than $n$ coins on tasting desserts. At the same time, he is not interested in buying any dessert more than once, because one is enough to evaluate the taste.\nIn how many different ways can he buy several desserts\n(possibly zero)\nfor tasting?\nNote\nVariants for 1st sample: {}, {1}\nVariants for 2nd sample: {}, {1}\nVariants for 3rd sample: {}, {1}, {2}\nVariants for 4th sample: {}, {1}, {2}, {1, 2}", "input_specification": "Input\n\nThe first line of the input contains a single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\n\nThen follows $t$ lines, each of which describes one test case.\n\nEach test case is given on a single line and consists of two integers $n$ and $k$ ($1 \\le n, k \\le 10^9$)\u00a0\u2014 the number of coins Toma is willing to spend and the number of desserts in the binary cafe.", "output_specification": "Output\n\nOutput $t$ integers, the $i$-th of which should be equal to the answer for the $i$-th test case\u00a0\u2014 the number of ways to buy desserts for tasting.", "sample_tests": "Example\n\nInput\n\n5\n\n1 2\n\n2 1\n\n2 2\n\n10 2\n\n179 100\n\nOutput\n2\n2\n3\n4\n180", "difficulty": 1100, "url": "https://codeforces.com/problemset/problem/1840/B"}
{"header": "C. Ski Resort\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Dima Vatrushin is a math teacher at school. He was sent on vacation for $n$ days for his good work. Dima has long dreamed of going to a ski resort, so he wants to allocate several\nconsecutive days\nand go skiing. Since the vacation requires careful preparation, he will only go for\nat least $k$ days\n.\nYou are given an array $a$ containing the weather forecast at the resort. That is, on the $i$-th day, the temperature will be $a_i$ degrees.\nDima was born in Siberia, so he can go on vacation only if the temperature does not rise above $q$ degrees throughout the vacation.\nUnfortunately, Dima was so absorbed in abstract algebra that he forgot how to count. He asks you to help him and count the number of ways to choose vacation dates at the resort.\nNote\nIn the first test case of the example, Dima can go on any day, so the suitable dates for him are [1], [2], [3], [1, 2], [2, 3], [1, 2, 3].\nIn the second and fourth test cases of the example, Dima cannot go on any day due to the high temperature, so there are no suitable dates.\nIn the third test case of the example, Dima can only go on the dates [1, 2, 3].", "input_specification": "Input\n\nThe first line of the input contains an integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of test cases.\n\nThen follow the descriptions of the test cases.\n\nThe first line of each test case contains three integers $n$, $k$, $q$ ($1 \\le n \\le 2 \\cdot 10^5$, $1 \\le k \\le n$, $-10^9 \\le q \\le 10^9$)\u00a0\u2014 the length of the array $a$, the minimum number of days at the resort, and the maximum comfortable temperature for Dima.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, a_3, \\dots, a_n$ ($-10^9 \\le a_i \\le 10^9$)\u00a0\u2014 the temperature at the ski resort.\n\nThe sum of all $n$ values over all test cases does not exceed $2 \\cdot 10^5$.", "output_specification": "Output\n\nOutput $t$ integers, each of which is the answer to the corresponding test case\u00a0\u2014 the number of ways for Dima to choose vacation dates at the resort.", "sample_tests": "Example\n\nInput\n\n7\n\n3 1 15\n\n-5 0 -10\n\n5 3 -33\n\n8 12 9 0 5\n\n4 3 12\n\n12 12 10 15\n\n4 1 -5\n\n0 -1 2 5\n\n5 5 0\n\n3 -1 4 -5 -3\n\n1 1 5\n\n5\n\n6 1 3\n\n0 3 -2 5 -4 -4\n\nOutput\n6\n0\n1\n0\n0\n1\n9", "difficulty": 1000, "url": "https://codeforces.com/problemset/problem/1840/C"}
{"header": "D. Wooden Toy Festival\n\ntime limit per test\n 3 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "In a small town, there is a workshop specializing in woodwork. Since the town is small, only\nthree\ncarvers work there.\nSoon, a wooden toy festival is planned in the town. The workshop employees want to prepare for it.\nThey know that $n$ people will come to the workshop with a request to make a wooden toy. People are different and may want different toys. For simplicity, let's denote the pattern of the toy that the $i$-th person wants as $a_i$ ($1 \\le a_i \\le 10^9$).\nEach of the carvers can choose an integer pattern $x$ ($1 \\le x \\le 10^9$) in advance,\ndifferent carvers can choose different patterns\n. $x$ is the integer. During the preparation for the festival, the carvers will perfectly work out the technique of making the toy of the chosen pattern, which will allow them to cut it out of wood instantly. To make a toy of pattern $y$ for a carver who has chosen pattern $x$, it will take $|x - y|$ time, because the more the toy resembles the one he can make instantly, the faster the carver will cope with the work.\nOn the day of the festival, when the next person comes to the workshop with a request to make a wooden toy, the carvers can choose who will take on the job. At the same time, the carvers are very skilled people and can work on orders for different people\nsimultaneously\n.\nSince people don't like to wait, the carvers want to choose patterns for preparation in such a way that the\nmaximum\nwaiting time over all people is as\nsmall\nas possible.\nOutput the\nbest\nmaximum waiting time that the carvers can achieve.\nNote\nIn the first example, the carvers can choose patterns $1$, $7$, $9$ for preparation.\nIn the second example, the carvers can choose patterns $3$, $30$, $60$ for preparation.\nIn the third example, the carvers can choose patterns $14$, $50$, $85$ for preparation.", "input_specification": "Input\n\nThe first line of the input contains an integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of test cases.\n\nThen follow the descriptions of the test cases.\n\nThe first line of a test case contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$)\u00a0\u2014 the number of people who will come to the workshop.\n\nThe second line of a test case contains $n$ integers $a_1, a_2, a_3, \\dots, a_n$ ($1 \\le a_i \\le 10^9$)\u00a0\u2014 the patterns of toys.\n\nThe sum of all $n$ values over all test cases does not exceed $2 \\cdot 10^5$.", "output_specification": "Output\n\nOutput $t$ numbers, each of which is the answer to the corresponding test case\u00a0\u2014 the best maximum waiting time that the carvers can achieve.", "sample_tests": "Example\n\nInput\n\n5\n\n6\n\n1 7 7 9 9 9\n\n6\n\n5 4 2 1 30 60\n\n9\n\n14 19 37 59 1 4 4 98 73\n\n1\n\n2\n\n6\n\n3 10 1 17 15 11\n\nOutput\n0\n2\n13\n0\n1", "difficulty": 1400, "url": "https://codeforces.com/problemset/problem/1840/D"}
{"header": "E. Character Blocking\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given two strings of equal length $s_1$ and $s_2$, consisting of lowercase Latin letters, and an integer $t$.\nYou need to answer $q$ queries, numbered from $1$ to $q$. The $i$-th query comes in the $i$-th second of time. Each query is one of three types:\nblock the characters at position $pos$ (indexed from $1$) in both strings for $t$ seconds;\nswap two unblocked characters;\ndetermine if the two strings are equal at the time of the query, ignoring blocked characters.\nNote that in queries of the second type, the characters being swapped can be from the same string or from $s_1$ and $s_2$.\nNote\nLet's look at the strings $s_1$ and $s_2$ after each of the $q$ queries. Blocked characters will be denoted in red.\nFirst example input:\n($codeforces$, $codeblocks$) $\\rightarrow$ ($codeforces$, $codeblocks$) $\\rightarrow$ ($code\\color{red}{f}orces$, $code\\color{red}{b}locks$) $\\rightarrow$ ($code\\color{red}{fo}rces$, $code\\color{red}{bl}ocks$) $\\rightarrow$ ($code\\color{red}{for}ces$, $code\\color{red}{blo}cks$) $\\rightarrow$ ($code\\color{red}{for}c\\color{red}{e}s$, $code\\color{red}{blo}c\\color{red}{k}s$) $\\rightarrow$ ($code\\color{red}{for}c\\color{red}{e}s$, $code\\color{red}{blo}c\\color{red}{k}s$) $\\rightarrow$ ($codef\\color{red}{or}c\\color{red}{e}s$, $codeb\\color{red}{lo}c\\color{red}{k}s$)\nSecond example input:\n($cool$, $club$) $\\rightarrow$ ($cuol$, $clob$) $\\rightarrow$ ($cuol$, $cbol$) $\\rightarrow$ ($c\\color{red}{u}ol$, $c\\color{red}{b}ol$) $\\rightarrow$ ($c\\color{red}{u}ol$, $c\\color{red}{b}ol$) $\\rightarrow$ ($cuol$, $cbol$)", "input_specification": "Input\n\nThe first line of the input contains a single integer $T$ ($1 \\le T \\le 10^4$)\u00a0\u2014 the number of test cases.\n\nThen follow the descriptions of the test cases.\n\nThe first line of each test case contains a string $s_1$ consisting of lowercase Latin letters (length no more than $2 \\cdot 10^5$).\n\nThe second line of each test case contains a string $s_2$ consisting of lowercase Latin letters (length no more than $2 \\cdot 10^5$).\n\nThe strings have equal length.\n\nThe third line of each test case contains two integers $t$ and $q$ ($1 \\le t, q \\le 2 \\cdot 10^5$). The number $t$ indicates the number of seconds for which a character is blocked. The number $q$ corresponds to the number of queries.\n\nEach of the next $q$ lines of each test case contains a single query. Each query is one of three types: \n\n \"$1\\ \\ \\ pos$\"\u00a0\u2014 block the characters at position $pos$ in both strings for $t$ seconds; \"$2\\ \\ \\ 1/\\;\\!2\\ \\ \\ pos_1\\ \\ \\ 1/\\;\\!2\\ \\ \\ pos_2$\"\u00a0\u2014 swap two unblocked characters. The second number in the query indicates the number of the string from which the first character for the swap is taken. The third number in the query indicates the position in that string of that character. The fourth number in the query indicates the number of the string from which the second character for the swap is taken. The fifth number in the query indicates the position in that string of that character; \"$3$\"\u00a0\u2014 determine if the two strings are equal at the time of the query, ignoring blocked characters. \n\nFor queries of the first type, it is guaranteed that at the time of the query, the characters at position $pos$ are not blocked.\n\nFor queries of the second type, it is guaranteed that the characters being swapped are not blocked.\n\nAll values of $pos, pos_1, pos_2$ are in the range from $1$ to the length of the strings.\n\nThe sum of the values of $q$ over all test cases, as well as the total length of the strings $s_1$, does not exceed $2 \\cdot 10^5$.", "output_specification": "Output\n\nFor each query of the third type, output \" YES \" if the two strings $s_1$ and $s_2$ are equal at the time of the query, ignoring blocked characters, and \" NO \" otherwise.\n\nYou can output each letter in any case (lowercase or uppercase). For example, the strings \" yEs \", \" yes \", \" Yes \" and \" YES \" will be accepted as a positive answer.", "sample_tests": "Example\n\nInput\n\n2\n\ncodeforces\n\ncodeblocks\n\n5 7\n\n3\n\n1 5\n\n1 6\n\n1 7\n\n1 9\n\n3\n\n3\n\ncool\n\nclub\n\n2 5\n\n2 1 2 2 3\n\n2 2 2 2 4\n\n1 2\n\n3\n\n3\n\nOutput\nNO\nYES\nNO\nYES\nNO", "difficulty": 1600, "url": "https://codeforces.com/problemset/problem/1840/E"}
{"header": "F. Railguns\n\ntime limit per test\n 3 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Tema is playing a very interesting computer game.\nDuring the next mission, Tema's character found himself on an unfamiliar planet. Unlike Earth, this planet is flat and can be represented as an $n \\times m$ rectangle.\nTema's character is located at the point with coordinates $(0, 0)$. In order to successfully complete the mission, he needs to reach the point with coordinates $(n, m)$ alive.\nLet the character of the computer game be located at the coordinate $(i, j)$. Every second,\nstarting from the first\n, Tema can:\neither use vertical hyperjump technology, after which his character will end up at coordinate $(i + 1, j)$ at the end of the second;\nor use horizontal hyperjump technology, after which his character will end up at coordinate $(i, j + 1)$ at the end of the second;\nor Tema can choose not to make a hyperjump, in which case his character will not move during this second;\nThe aliens that inhabit this planet are very dangerous and hostile. Therefore, they will shoot from their railguns $r$ times.\nEach shot completely penetrates one coordinate vertically or horizontally. If the character is in the line of its impact at the time of the shot\n(at the end of the second)\n, he dies.\nSince Tema looked at the game's source code, he knows complete information about each shot\u00a0\u2014 the time, the penetrated coordinate, and the direction of the shot.\nWhat is the\nminimum\ntime for the character to reach the desired point? If he is doomed to die and cannot reach the point with coordinates $(n, m)$, output $-1$.\nNote\nIn the first test case, the character can move as follows: $(0, 0) \\rightarrow (0, 1) \\rightarrow (0, 2) \\rightarrow (0, 3) \\rightarrow (0, 3) \\rightarrow (1, 3)$.\nIn the second test case, the character will not be able to leave the\nrectangle\nthat will be completely penetrated by shots at the second $2$.", "input_specification": "Input\n\nThe first line of the input contains a single integer $T$ ($1 \\le T \\le 10^4$)\u00a0\u2014 the number of test cases.\n\nThen follow the descriptions of the test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n \\cdot m \\le 10^4$)\u00a0\u2014 the size of the planet, its height and width.\n\nThe second line of each test case contains a single integer $r$ ($1 \\le r \\le 100$)\u00a0\u2014 the number of shots.\n\nThen follow $r$ lines, each describing one shot.\n\nA shot is described by three integers $t$, $d$, $coord$. Where $t$ is the second at which the shot will be fired ($1 \\le t \\le 10^9$). $d$ is the direction of the shot ($d = 1$ denotes a horizontal shot, $d = 2$ denotes a vertical shot). $coord$ is the size of the penetrated coordinate ($0 \\le coord \\le n$ for $d = 1$, $0 \\le coord \\le m$ for $d = 2$).\n\nThe sum of the products $n \\cdot m$ over all test cases does not exceed $10^4$.", "output_specification": "Output\n\nFor each test case, output a single number\u00a0\u2014 the minimum time for the character to reach the coordinate $(n, m)$, or $-1$ if he is doomed to die.", "sample_tests": "Example\n\nInput\n\n5\n\n1 3\n\n4\n\n1 2 0\n\n2 2 1\n\n3 2 2\n\n4 1 1\n\n3 3\n\n6\n\n2 1 0\n\n2 1 1\n\n2 1 2\n\n2 2 0\n\n2 2 1\n\n2 2 2\n\n2 1\n\n3\n\n7 1 2\n\n2 1 1\n\n7 2 1\n\n2 2\n\n5\n\n9 1 2\n\n3 2 0\n\n5 1 2\n\n4 2 2\n\n7 1 0\n\n4 6\n\n7\n\n6 1 2\n\n12 1 3\n\n4 1 0\n\n17 2 3\n\n1 2 6\n\n16 2 6\n\n3 2 4\n\nOutput\n5\n-1\n3\n6\n10", "difficulty": 2200, "url": "https://codeforces.com/problemset/problem/1840/F"}
{"header": "F. Railguns\n\ntime limit per test\n 3 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Tema is playing a very interesting computer game.\nDuring the next mission, Tema's character found himself on an unfamiliar planet. Unlike Earth, this planet is flat and can be represented as an $n \\times m$ rectangle.\nTema's character is located at the point with coordinates $(0, 0)$. In order to successfully complete the mission, he needs to reach the point with coordinates $(n, m)$ alive.\nLet the character of the computer game be located at the coordinate $(i, j)$. Every second,\nstarting from the first\n, Tema can:\neither use vertical hyperjump technology, after which his character will end up at coordinate $(i + 1, j)$ at the end of the second;\nor use horizontal hyperjump technology, after which his character will end up at coordinate $(i, j + 1)$ at the end of the second;\nor Tema can choose not to make a hyperjump, in which case his character will not move during this second;\nThe aliens that inhabit this planet are very dangerous and hostile. Therefore, they will shoot from their railguns $r$ times.\nEach shot completely penetrates one coordinate vertically or horizontally. If the character is in the line of its impact at the time of the shot\n(at the end of the second)\n, he dies.\nSince Tema looked at the game's source code, he knows complete information about each shot\u00a0\u2014 the time, the penetrated coordinate, and the direction of the shot.\nWhat is the\nminimum\ntime for the character to reach the desired point? If he is doomed to die and cannot reach the point with coordinates $(n, m)$, output $-1$.\nNote\nIn the first test case, the character can move as follows: $(0, 0) \\rightarrow (0, 1) \\rightarrow (0, 2) \\rightarrow (0, 3) \\rightarrow (0, 3) \\rightarrow (1, 3)$.\nIn the second test case, the character will not be able to leave the\nrectangle\nthat will be completely penetrated by shots at the second $2$.", "input_specification": "Input\n\nThe first line of the input contains a single integer $T$ ($1 \\le T \\le 10^4$)\u00a0\u2014 the number of test cases.\n\nThen follow the descriptions of the test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n \\cdot m \\le 10^4$)\u00a0\u2014 the size of the planet, its height and width.\n\nThe second line of each test case contains a single integer $r$ ($1 \\le r \\le 100$)\u00a0\u2014 the number of shots.\n\nThen follow $r$ lines, each describing one shot.\n\nA shot is described by three integers $t$, $d$, $coord$. Where $t$ is the second at which the shot will be fired ($1 \\le t \\le 10^9$). $d$ is the direction of the shot ($d = 1$ denotes a horizontal shot, $d = 2$ denotes a vertical shot). $coord$ is the size of the penetrated coordinate ($0 \\le coord \\le n$ for $d = 1$, $0 \\le coord \\le m$ for $d = 2$).\n\nThe sum of the products $n \\cdot m$ over all test cases does not exceed $10^4$.", "output_specification": "Output\n\nFor each test case, output a single number\u00a0\u2014 the minimum time for the character to reach the coordinate $(n, m)$, or $-1$ if he is doomed to die.", "sample_tests": "Example\n\nInput\n\n5\n\n1 3\n\n4\n\n1 2 0\n\n2 2 1\n\n3 2 2\n\n4 1 1\n\n3 3\n\n6\n\n2 1 0\n\n2 1 1\n\n2 1 2\n\n2 2 0\n\n2 2 1\n\n2 2 2\n\n2 1\n\n3\n\n7 1 2\n\n2 1 1\n\n7 2 1\n\n2 2\n\n5\n\n9 1 2\n\n3 2 0\n\n5 1 2\n\n4 2 2\n\n7 1 0\n\n4 6\n\n7\n\n6 1 2\n\n12 1 3\n\n4 1 0\n\n17 2 3\n\n1 2 6\n\n16 2 6\n\n3 2 4\n\nOutput\n5\n-1\n3\n6\n10", "difficulty": 2200, "url": "https://codeforces.com/problemset/problem/1840/G"}
{"header": "F. Railguns\n\ntime limit per test\n 3 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Tema is playing a very interesting computer game.\nDuring the next mission, Tema's character found himself on an unfamiliar planet. Unlike Earth, this planet is flat and can be represented as an $n \\times m$ rectangle.\nTema's character is located at the point with coordinates $(0, 0)$. In order to successfully complete the mission, he needs to reach the point with coordinates $(n, m)$ alive.\nLet the character of the computer game be located at the coordinate $(i, j)$. Every second,\nstarting from the first\n, Tema can:\neither use vertical hyperjump technology, after which his character will end up at coordinate $(i + 1, j)$ at the end of the second;\nor use horizontal hyperjump technology, after which his character will end up at coordinate $(i, j + 1)$ at the end of the second;\nor Tema can choose not to make a hyperjump, in which case his character will not move during this second;\nThe aliens that inhabit this planet are very dangerous and hostile. Therefore, they will shoot from their railguns $r$ times.\nEach shot completely penetrates one coordinate vertically or horizontally. If the character is in the line of its impact at the time of the shot\n(at the end of the second)\n, he dies.\nSince Tema looked at the game's source code, he knows complete information about each shot\u00a0\u2014 the time, the penetrated coordinate, and the direction of the shot.\nWhat is the\nminimum\ntime for the character to reach the desired point? If he is doomed to die and cannot reach the point with coordinates $(n, m)$, output $-1$.\nNote\nIn the first test case, the character can move as follows: $(0, 0) \\rightarrow (0, 1) \\rightarrow (0, 2) \\rightarrow (0, 3) \\rightarrow (0, 3) \\rightarrow (1, 3)$.\nIn the second test case, the character will not be able to leave the\nrectangle\nthat will be completely penetrated by shots at the second $2$.", "input_specification": "Input\n\nThe first line of the input contains a single integer $T$ ($1 \\le T \\le 10^4$)\u00a0\u2014 the number of test cases.\n\nThen follow the descriptions of the test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n \\cdot m \\le 10^4$)\u00a0\u2014 the size of the planet, its height and width.\n\nThe second line of each test case contains a single integer $r$ ($1 \\le r \\le 100$)\u00a0\u2014 the number of shots.\n\nThen follow $r$ lines, each describing one shot.\n\nA shot is described by three integers $t$, $d$, $coord$. Where $t$ is the second at which the shot will be fired ($1 \\le t \\le 10^9$). $d$ is the direction of the shot ($d = 1$ denotes a horizontal shot, $d = 2$ denotes a vertical shot). $coord$ is the size of the penetrated coordinate ($0 \\le coord \\le n$ for $d = 1$, $0 \\le coord \\le m$ for $d = 2$).\n\nThe sum of the products $n \\cdot m$ over all test cases does not exceed $10^4$.", "output_specification": "Output\n\nFor each test case, output a single number\u00a0\u2014 the minimum time for the character to reach the coordinate $(n, m)$, or $-1$ if he is doomed to die.", "sample_tests": "Example\n\nInput\n\n5\n\n1 3\n\n4\n\n1 2 0\n\n2 2 1\n\n3 2 2\n\n4 1 1\n\n3 3\n\n6\n\n2 1 0\n\n2 1 1\n\n2 1 2\n\n2 2 0\n\n2 2 1\n\n2 2 2\n\n2 1\n\n3\n\n7 1 2\n\n2 1 1\n\n7 2 1\n\n2 2\n\n5\n\n9 1 2\n\n3 2 0\n\n5 1 2\n\n4 2 2\n\n7 1 0\n\n4 6\n\n7\n\n6 1 2\n\n12 1 3\n\n4 1 0\n\n17 2 3\n\n1 2 6\n\n16 2 6\n\n3 2 4\n\nOutput\n5\n-1\n3\n6\n10", "difficulty": 2200, "url": "https://codeforces.com/problemset/problem/1840/H"}
{"header": "A. Divisibility Problem\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given two positive integers $a$ and $b$. In one move you can increase $a$ by $1$ (replace $a$ with $a+1$). Your task is to find the minimum number of moves you need to do in order to make $a$ divisible by $b$. It is possible, that you have to make $0$ moves, as $a$ is already divisible by $b$. You have to answer $t$ independent test cases.", "input_specification": "Input\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe only line of the test case contains two integers $a$ and $b$ ($1 \\le a, b \\le 10^9$).", "output_specification": "Output\n\nFor each test case print the answer \u2014 the minimum number of moves you need to do in order to make $a$ divisible by $b$.", "sample_tests": "Example\n\nInput\n5\n10 4\n13 9\n100 13\n123 456\n92 46\n\nOutput\n2\n5\n4\n333\n0", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1328/A"}
{"header": "B. K-th Beautiful String\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "For the given integer $n$ ($n > 2$) let's write down all the strings of length $n$ which contain $n-2$ letters '\na\n' and two letters '\nb\n' in\nlexicographical\n(alphabetical) order.\nRecall that the string $s$ of length $n$ is lexicographically less than string $t$ of length $n$, if there exists such $i$ ($1 \\le i \\le n$), that $s_i < t_i$, and for any $j$ ($1 \\le j < i$) $s_j = t_j$. The lexicographic comparison of strings is implemented by the operator\n<\nin modern programming languages.\nFor example, if $n=5$ the strings are (the order does matter):\naaabb\naabab\naabba\nabaab\nababa\nabbaa\nbaaab\nbaaba\nbabaa\nbbaaa\nIt is easy to show that such a list of strings will contain exactly $\\frac{n \\cdot (n-1)}{2}$ strings.\nYou are given $n$ ($n > 2$) and $k$ ($1 \\le k \\le \\frac{n \\cdot (n-1)}{2}$). Print the $k$-th string from the list.", "input_specification": "Input\n\nThe input contains one or more test cases.\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the test. Then $t$ test cases follow.\n\nEach test case is written on the the separate line containing two integers $n$ and $k$ ($3 \\le n \\le 10^5, 1 \\le k \\le \\min(2\\cdot10^9, \\frac{n \\cdot (n-1)}{2})$.\n\nThe sum of values $n$ over all test cases in the test doesn't exceed $10^5$.", "output_specification": "Output\n\nFor each test case print the $k$-th string from the list of all described above strings of length $n$. Strings in the list are sorted lexicographically (alphabetically).", "sample_tests": "Example\n\nInput\n7\n5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n\nOutput\naaabb\naabab\nbaaba\nbbaaa\nabb\nbab\naaaaabaaaaabaaaaaaaa", "difficulty": 1300, "url": "https://codeforces.com/problemset/problem/1328/B"}
{"header": "C. Ternary XOR\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "A number is\nternary\nif it contains only digits $0$, $1$ and $2$. For example, the following numbers are ternary: $1022$, $11$, $21$, $2002$.\nYou are given a long ternary number $x$. The first (leftmost) digit of $x$ is guaranteed to be $2$, the other digits of $x$ can be $0$, $1$ or $2$.\nLet's define the ternary XOR operation $\\odot$ of two ternary numbers $a$ and $b$ (both of length $n$) as a number $c = a \\odot b$ of length $n$, where $c_i = (a_i + b_i) \\% 3$ (where $\\%$ is modulo operation). In other words, add the corresponding digits and take the remainders of the sums when divided by $3$. For example, $10222 \\odot 11021 = 21210$.\nYour task is to find such ternary numbers $a$ and $b$ both of length $n$ and both without leading zeros that $a \\odot b = x$ and $max(a, b)$ is the minimum possible.\nYou have to answer $t$ independent test cases.", "input_specification": "Input\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. Then $t$ test cases follow. The first line of the test case contains one integer $n$ ($1 \\le n \\le 5 \\cdot 10^4$) \u2014 the length of $x$. The second line of the test case contains ternary number $x$ consisting of $n$ digits $0, 1$ or $2$. It is guaranteed that the first digit of $x$ is $2$. It is guaranteed that the sum of $n$ over all test cases does not exceed $5 \\cdot 10^4$ ($\\sum n \\le 5 \\cdot 10^4$).", "output_specification": "Output\n\nFor each test case, print the answer \u2014 two ternary integers $a$ and $b$ both of length $n$ and both without leading zeros such that $a \\odot b = x$ and $max(a, b)$ is the minimum possible. If there are several answers, you can print any.", "sample_tests": "Example\n\nInput\n4\n5\n22222\n5\n21211\n1\n2\n9\n220222021\n\nOutput\n11111\n11111\n11000\n10211\n1\n1\n110111011\n110111010", "difficulty": 1200, "url": "https://codeforces.com/problemset/problem/1328/C"}
{"header": "D. Carousel\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "The round carousel consists of $n$ figures of animals. Figures are numbered from $1$ to $n$ in order of the carousel moving. Thus, after the $n$-th figure the figure with the number $1$ follows. Each figure has its own type \u2014 the type of the animal corresponding to this figure (the horse, the tiger and so on). The type of animal of the $i$-th figure equals $t_i$.\nThe example of the carousel for $n=9$ and $t=[5, 5, 1, 15, 1, 5, 5, 1, 1]$\n.\nYou want to color each figure in one of the colors. You think that it's boring if the carousel contains two different figures (with the distinct types of animals) going one right after another and colored in the same color.\nYour task is to color the figures in such a way that the number of distinct colors used is the minimum possible and there are no figures of the different types going one right after another and colored in the same color. If you use exactly $k$ distinct colors, then the colors of figures should be denoted with integers from $1$ to $k$.", "input_specification": "Input\n\nThe input contains one or more test cases.\n\nThe first line contains one integer $q$ ($1 \\le q \\le 10^4$) \u2014 the number of test cases in the test. Then $q$ test cases follow. One test case is given on two lines.\n\nThe first line of the test case contains one integer $n$ ($3 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of figures in the carousel. Figures are numbered from $1$ to $n$ in order of carousel moving. Assume that after the $n$-th figure the figure $1$ goes.\n\nThe second line of the test case contains $n$ integers $t_1, t_2, \\dots, t_n$ ($1 \\le t_i \\le 2 \\cdot 10^5$), where $t_i$ is the type of the animal of the $i$-th figure.\n\nThe sum of $n$ over all test cases does not exceed $2\\cdot10^5$.", "output_specification": "Output\n\nPrint $q$ answers, for each test case print two lines.\n\nIn the first line print one integer $k$ \u2014 the minimum possible number of distinct colors of figures.\n\nIn the second line print $n$ integers $c_1, c_2, \\dots, c_n$ ($1 \\le c_i \\le k$), where $c_i$ is the color of the $i$-th figure. If there are several answers, you can print any.", "sample_tests": "Example\n\nInput\n4\n5\n1 2 1 2 2\n6\n1 2 2 1 2 2\n5\n1 2 1 2 3\n3\n10 10 10\n\nOutput\n2\n1 2 1 2 2\n2\n2 1 2 1 2 1\n3\n2 3 2 3 1\n1\n1 1 1", "difficulty": 1800, "url": "https://codeforces.com/problemset/problem/1328/D"}
{"header": "E. Tree Queries\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given a rooted tree consisting of $n$ vertices numbered from $1$ to $n$. The root of the tree is a vertex number $1$.\nA tree is a connected undirected graph with $n-1$ edges.\nYou are given $m$ queries. The $i$-th query consists of the set of $k_i$ distinct vertices $v_i[1], v_i[2], \\dots, v_i[k_i]$. Your task is to say if there is a path from the root to some vertex $u$ such that each of the given $k$ vertices is either belongs to this path or has the distance $1$ to some vertex of this path.\nNote\nThe picture corresponding to the example:\nConsider the queries.\nThe first query is $[3, 8, 9, 10]$. The answer is \"\nYES\n\" as you can choose the path from the root $1$ to the vertex $u=10$. Then vertices $[3, 9, 10]$ belong to the path from $1$ to $10$ and the vertex $8$ has distance $1$ to the vertex $7$ which also belongs to this path.\nThe second query is $[2, 4, 6]$. The answer is \"\nYES\n\" as you can choose the path to the vertex $u=2$. Then the vertex $4$ has distance $1$ to the vertex $1$ which belongs to this path and the vertex $6$ has distance $1$ to the vertex $2$ which belongs to this path.\nThe third query is $[2, 1, 5]$. The answer is \"\nYES\n\" as you can choose the path to the vertex $u=5$ and all vertices of the query belong to this path.\nThe fourth query is $[4, 8, 2]$. The answer is \"\nYES\n\" as you can choose the path to the vertex $u=9$ so vertices $2$ and $4$ both have distance $1$ to the vertex $1$ which belongs to this path and the vertex $8$ has distance $1$ to the vertex $7$ which belongs to this path.\nThe fifth and the sixth queries both have answer \"\nNO\n\" because you cannot choose suitable vertex $u$.", "input_specification": "Input\n\nThe first line of the input contains two integers $n$ and $m$ ($2 \\le n \\le 2 \\cdot 10^5$, $1 \\le m \\le 2 \\cdot 10^5$) \u2014 the number of vertices in the tree and the number of queries.\n\nEach of the next $n-1$ lines describes an edge of the tree. Edge $i$ is denoted by two integers $u_i$ and $v_i$, the labels of vertices it connects $(1 \\le u_i, v_i \\le n, u_i \\ne v_i$).\n\nIt is guaranteed that the given edges form a tree.\n\nThe next $m$ lines describe queries. The $i$-th line describes the $i$-th query and starts with the integer $k_i$ ($1 \\le k_i \\le n$) \u2014 the number of vertices in the current query. Then $k_i$ integers follow: $v_i[1], v_i[2], \\dots, v_i[k_i]$ ($1 \\le v_i[j] \\le n$), where $v_i[j]$ is the $j$-th vertex of the $i$-th query.\n\nIt is guaranteed that all vertices in a single query are distinct.\n\nIt is guaranteed that the sum of $k_i$ does not exceed $2 \\cdot 10^5$ ($\\sum\\limits_{i=1}^{m} k_i \\le 2 \\cdot 10^5$).", "output_specification": "Output\n\nFor each query, print the answer \u2014 \" YES \", if there is a path from the root to some vertex $u$ such that each of the given $k$ vertices is either belongs to this path or has the distance $1$ to some vertex of this path and \" NO \" otherwise.", "sample_tests": "Example\n\nInput\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n\nOutput\nYES\nYES\nYES\nYES\nNO\nNO", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/1328/E"}
{"header": "F. Make k Equal\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given the array $a$ consisting of $n$ elements and the integer $k \\le n$.\nYou want to obtain\nat least\n$k$ equal elements in the array $a$. In one move, you can make one of the following two operations:\nTake\none\nof the minimum elements of the array and increase its value by one (more formally, if the minimum value of $a$ is $mn$ then you choose such index $i$ that $a_i = mn$ and set $a_i := a_i + 1$);\ntake\none\nof the maximum elements of the array and decrease its value by one (more formally, if the maximum value of $a$ is $mx$ then you choose such index $i$ that $a_i = mx$ and set $a_i := a_i - 1$).\nYour task is to calculate the minimum number of moves required to obtain\nat least\n$k$ equal elements in the array.", "input_specification": "Input\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in $a$ and the required number of equal elements.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the $i$-th element of $a$.", "output_specification": "Output\n\nPrint one integer \u2014 the minimum number of moves required to obtain at least $k$ equal elements in the array.", "sample_tests": "Examples\n\nInput\n6 5\n1 2 2 4 2 3\n\nOutput\n3\n\nInput\n7 5\n3 3 2 1 1 1 3\n\nOutput\n4", "difficulty": 2200, "url": "https://codeforces.com/problemset/problem/1328/F"}
{"header": "F. Make k Equal\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given the array $a$ consisting of $n$ elements and the integer $k \\le n$.\nYou want to obtain\nat least\n$k$ equal elements in the array $a$. In one move, you can make one of the following two operations:\nTake\none\nof the minimum elements of the array and increase its value by one (more formally, if the minimum value of $a$ is $mn$ then you choose such index $i$ that $a_i = mn$ and set $a_i := a_i + 1$);\ntake\none\nof the maximum elements of the array and decrease its value by one (more formally, if the maximum value of $a$ is $mx$ then you choose such index $i$ that $a_i = mx$ and set $a_i := a_i - 1$).\nYour task is to calculate the minimum number of moves required to obtain\nat least\n$k$ equal elements in the array.", "input_specification": "Input\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in $a$ and the required number of equal elements.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the $i$-th element of $a$.", "output_specification": "Output\n\nPrint one integer \u2014 the minimum number of moves required to obtain at least $k$ equal elements in the array.", "sample_tests": "Examples\n\nInput\n6 5\n1 2 2 4 2 3\n\nOutput\n3\n\nInput\n7 5\n3 3 2 1 1 1 3\n\nOutput\n4", "difficulty": 2200, "url": "https://codeforces.com/problemset/problem/1328/G"}
{"header": "F. Make k Equal\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given the array $a$ consisting of $n$ elements and the integer $k \\le n$.\nYou want to obtain\nat least\n$k$ equal elements in the array $a$. In one move, you can make one of the following two operations:\nTake\none\nof the minimum elements of the array and increase its value by one (more formally, if the minimum value of $a$ is $mn$ then you choose such index $i$ that $a_i = mn$ and set $a_i := a_i + 1$);\ntake\none\nof the maximum elements of the array and decrease its value by one (more formally, if the maximum value of $a$ is $mx$ then you choose such index $i$ that $a_i = mx$ and set $a_i := a_i - 1$).\nYour task is to calculate the minimum number of moves required to obtain\nat least\n$k$ equal elements in the array.", "input_specification": "Input\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in $a$ and the required number of equal elements.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the $i$-th element of $a$.", "output_specification": "Output\n\nPrint one integer \u2014 the minimum number of moves required to obtain at least $k$ equal elements in the array.", "sample_tests": "Examples\n\nInput\n6 5\n1 2 2 4 2 3\n\nOutput\n3\n\nInput\n7 5\n3 3 2 1 1 1 3\n\nOutput\n4", "difficulty": 2200, "url": "https://codeforces.com/problemset/problem/1328/H"}
{"header": "A. Hongcow Learns the Cyclic Shift\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Hongcow is learning to spell! One day, his teacher gives him a word that he needs to learn to spell. Being a dutiful student, he immediately learns how to spell the word.\nHongcow has decided to try to make new words from this one. He starts by taking the word he just learned how to spell, and moves the last character of the word to the beginning of the word. He calls this a\ncyclic shift\n. He can apply cyclic shift many times. For example, consecutively applying cyclic shift operation to the word \"abracadabra\" Hongcow will get words \"aabracadabr\", \"raabracadab\" and so on.\nHongcow is now wondering how many distinct words he can generate by doing the cyclic shift arbitrarily many times. The initial string is also counted.\nNote\nFor the first sample, the strings Hongcow can generate are \"\nabcd\n\", \"\ndabc\n\", \"\ncdab\n\", and \"\nbcda\n\".\nFor the second sample, no matter how many times Hongcow does the cyclic shift, Hongcow can only generate \"\nbbb\n\".\nFor the third sample, the two strings Hongcow can generate are \"\nyzyz\n\" and \"\nzyzy\n\".", "input_specification": "Input\n\nThe first line of input will be a single string *s* ( 1\u2009\u2264\u2009| *s* |\u2009\u2264\u200950 ), the word Hongcow initially learns how to spell. The string *s* consists only of lowercase English letters (' a '\u2013' z ').", "output_specification": "Output\n\nOutput a single integer equal to the number of distinct strings that Hongcow can obtain by applying the cyclic shift arbitrarily many times to the given string.", "sample_tests": "Examples\n\nInput\nabcd\n\nOutput\n4\n\nInput\nbbb\n\nOutput\n1\n\nInput\nyzyz\n\nOutput\n2", "difficulty": 900, "url": "https://codeforces.com/problemset/problem/745/A"}
{"header": "B. Hongcow Solves A Puzzle\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Hongcow likes solving puzzles.\nOne day, Hongcow finds two identical puzzle pieces, with the instructions \"make a rectangle\" next to them. The pieces can be described by an\nn\nby\nm\ngrid of characters, where the character '\nX\n' denotes a part of the puzzle and '\n.\n' denotes an empty part of the grid. It is guaranteed that the puzzle pieces are one 4-connected piece. See the input format and samples for the exact details on how a jigsaw piece will be specified.\nThe puzzle pieces are very heavy, so Hongcow\ncannot rotate or flip\nthe puzzle pieces. However, he is allowed to move them in any directions. The puzzle pieces also\ncannot overlap\n.\nYou are given as input the description of one of the pieces. Determine if it is possible to make a rectangle from two identical copies of the given input. The rectangle should be solid, i.e. there should be no empty holes inside it or on its border. Keep in mind that Hongcow is not allowed to flip or rotate pieces and they cannot overlap, i.e. no two '\nX\n' from different pieces can share the same position.\nNote\nFor the first sample, one example of a rectangle we can form is as follows\n111222\n111222\nFor the second sample, it is impossible to put two of those pieces without rotating or flipping to form a rectangle.\nIn the third sample, we can shift the first tile by one to the right, and then compose the following rectangle:\n.....\n..XX.\n.....\n.....\n.....", "input_specification": "Input\n\nThe first line of input will contain two integers *n* and *m* ( 1\u2009\u2264\u2009 *n* ,\u2009 *m* \u2009\u2264\u2009500 ), the dimensions of the puzzle piece.\n\nThe next *n* lines will describe the jigsaw piece. Each line will have length *m* and will consist of characters ' . ' and ' X ' only. ' X ' corresponds to a part of the puzzle piece, ' . ' is an empty space.\n\nIt is guaranteed there is at least one ' X ' character in the input and that the ' X ' characters form a 4-connected region.", "output_specification": "Output\n\nOutput \" YES \" if it is possible for Hongcow to make a rectangle. Output \" NO \" otherwise.", "sample_tests": "Examples\n\nInput\n2 3XXXXXX\n\nOutput\nYES\n\nInput\n2 2.XXX\n\nOutput\nNO\n\nInput\n5 5.......X.................\n\nOutput\nYES", "difficulty": 1400, "url": "https://codeforces.com/problemset/problem/745/B"}
{"header": "C. Hongcow Builds A Nation\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Hongcow is ruler of the world. As ruler of the world, he wants to make it easier for people to travel by road within their own countries.\nThe world can be modeled as an undirected graph with\nn\nnodes and\nm\nedges.\nk\nof the nodes are home to the governments of the\nk\ncountries that make up the world.\nThere is at most one edge connecting any two nodes and no edge connects a node to itself. Furthermore, for any two nodes corresponding to governments,\nthere is no path between those two nodes\n. Any graph that satisfies all of these conditions is\nstable\n.\nHongcow wants to add as many edges as possible to the graph while keeping it stable. Determine the maximum number of edges Hongcow can add.\nNote\nFor the first sample test, the graph looks like this:\nVertices\n1\nand\n3\nare special. The optimal solution is to connect vertex\n4\nto vertices\n1\nand\n2\n. This adds a total of\n2\nedges. We cannot add any more edges, since vertices\n1\nand\n3\ncannot have any path between them.\nFor the second sample test, the graph looks like this:\nWe cannot add any more edges to this graph. Note that we are not allowed to add self-loops, and the graph must be simple.", "input_specification": "Input\n\nThe first line of input will contain three integers *n* , *m* and *k* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u20091\u2009000 , 0\u2009\u2264\u2009 *m* \u2009\u2264\u2009100\u2009000 , 1\u2009\u2264\u2009 *k* \u2009\u2264\u2009 *n* )\u00a0\u2014 the number of vertices and edges in the graph, and the number of vertices that are homes of the government. \n\nThe next line of input will contain *k* integers *c* 1 ,\u2009 *c* 2 ,\u2009...,\u2009 *c* *k* ( 1\u2009\u2264\u2009 *c* *i* \u2009\u2264\u2009 *n* ). These integers will be pairwise distinct and denote the nodes that are home to the governments in this world.\n\nThe following *m* lines of input will contain two integers *u* *i* and *v* *i* ( 1\u2009\u2264\u2009 *u* *i* ,\u2009 *v* *i* \u2009\u2264\u2009 *n* ). This denotes an undirected edge between nodes *u* *i* and *v* *i* .\n\nIt is guaranteed that the graph described by the input is stable.", "output_specification": "Output\n\nOutput a single integer, the maximum number of edges Hongcow can add to the graph while keeping it stable.", "sample_tests": "Examples\n\nInput\n4 1 21 31 2\n\nOutput\n2\n\nInput\n3 3 121 21 32 3\n\nOutput\n0", "difficulty": 1500, "url": "https://codeforces.com/problemset/problem/745/C"}
{"header": "D. Hongcow's Game\n\ntime limit per test\n 3 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "This is an interactive problem. In the interaction section below you will see the information about flushing the output.\nIn this problem, you will be playing a game with Hongcow. How lucky of you!\nHongcow has a hidden\nn\nby\nn\nmatrix\nM\n. Let\nM\ni\n,\nj\ndenote the entry\ni\n-th row and\nj\n-th column of the matrix. The rows and columns are labeled from\n1\nto\nn\n.\nThe matrix entries are between\n0\nand\n10\n9\n. In addition,\nM\ni\n,\ni\n=\u20090\nfor all valid\ni\n. Your task is to find the minimum value along each row, excluding diagonal elements. Formally, for each\ni\n, you must find\n.\nTo do this, you can ask Hongcow some questions.\nA question consists of giving Hongcow a subset of distinct indices\n{\nw\n1\n,\nw\n2\n,\u2009...,\nw\nk\n}\n, with\n1\u2009\u2264\nk\n\u2264\nn\n. Hongcow will respond with\nn\nintegers. The\ni\n-th integer will contain the minimum value of\nmin\n1\u2009\u2264\nj\n\u2264\nk\nM\ni\n,\nw\nj\n.\nYou may only ask Hongcow at most\n20\nquestions\u00a0\u2014 he thinks you only need that many questions answered.\nWhen you are ready to answer, print out a single integer\n-\u20091\non its own line, then\nn\nintegers on the next line. The\ni\n-th integer should be the minimum value in the\ni\n-th row of the matrix, excluding the\ni\n-th element. Do not forget to flush the final answer as well. Printing the answer does not count as asking a question.\nYou will get\nWrong Answer\nverdict if\nYour question or answers are not in the format described in this statement.\nYou ask strictly more than\n20\nquestions.\nYour question contains duplicate indices.\nThe value of\nk\nin your question does not lie in the range from\n1\nto\nn\n, inclusive.\nYour final answer is not correct.\nYou will get\nIdleness Limit Exceeded\nif you don't print anything or if you forget to flush the output, including for the final answer (more info about flushing output below).\nInteraction\nTo ask a question, print out a single integer\nk\non its own line, denoting the size of your subset. Then, the next line should contain\nk\nintegers\nw\n1\n,\nw\n2\n,\u2009...\nw\nk\n. Note, you must flush your output to get a response.\nHongcow will respond by printing out a line with\nn\nintegers. The\ni\n-th integer in this line represents the minimum value of\nM\ni\n,\nw\nj\nwhere\nj\nis between\n1\nand\nk\n.\nYou may only ask a question at most\n20\ntimes, otherwise, you will get\nWrong Answer\n.\nTo flush you can use (just after printing an integer and end-of-line):\nfflush(stdout)\nin C++;\nSystem.out.flush()\nin Java;\nstdout.flush()\nin Python;\nflush(output)\nin Pascal;\nSee the documentation for other languages.\nHacking\nTo hack someone, use the following format\nn\nM_{1,1} M_{1,2} ... M_{1,n}\nM_{2,1} M_{2,2} ... M_{2,n}\n...\nM_{n,1} M_{n,2} ... M_{n,n}\nOf course, contestant programs will not be able to see this input.\nNote\nIn the first sample, Hongcow has the hidden matrix\n[\n[0, 3, 2],\n[5, 0, 7],\n[4, 8 ,0],\n]\nHere is a more readable version demonstrating the interaction. The column on the left represents Hongcow, while the column on the right represents the contestant.\n3\n3\n1 2 3\n0 0 0\n1\n3\n2 7 0\n2\n1 2\n0 0 4\n1\n2\n3 0 8\n1\n1\n0 5 4\n-1\n2 5 4\nFor the second sample, it is possible for off-diagonal elements of the matrix to be zero.", "input_specification": "Input\n\nThe first line of input will contain a single integer *n* ( 2\u2009\u2264\u2009 *n* \u2009\u2264\u20091,\u2009000 ).", "output_specification": "Output\n\nTo print the final answer, print out the string -1 on its own line. Then, the next line should contain *n* integers. The *i* -th integer should be the minimum value of the *i* -th row of the matrix, excluding elements on the diagonal. Do not forget to flush your answer!", "sample_tests": "Examples\n\nInput\n30 0 02 7 00 0 43 0 80 5 4\n\nOutput\n31 2 31321 21211-12 5 4\n\nInput\n20 00 0\n\nOutput\n1211-10 0", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/745/D"}
{"header": "A. 2Char\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Andrew often reads articles in his favorite magazine 2Char. The main feature of these articles is that each of them uses at most two distinct letters. Andrew decided to send an article to the magazine, but as he hasn't written any article, he just decided to take a random one from magazine 26Char. However, before sending it to the magazine 2Char, he needs to adapt the text to the format of the journal. To do so, he removes some words from the chosen article, in such a way that the remaining text can be written using no more than two distinct letters.\nSince the payment depends from the number of non-space characters in the article, Andrew wants to keep the words with the maximum total length.\nNote\nIn the first sample the optimal way to choose words is {'\nabb\n', '\naaa\n', '\nbbb\n'}.\nIn the second sample the word '\ncdecdecdecdecdecde\n' consists of three distinct letters, and thus cannot be used in the article. The optimal answer is {'\na\n', '\na\n', '\naaaa\n'}.", "input_specification": "Input\n\nThe first line of the input contains number *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u2009100 )\u00a0\u2014 the number of words in the article chosen by Andrew. Following are *n* lines, each of them contains one word. All the words consist only of small English letters and their total length doesn't exceed 1000 . The words are not guaranteed to be distinct, in this case you are allowed to use a word in the article as many times as it appears in the input.", "output_specification": "Output\n\nPrint a single integer\u00a0\u2014 the maximum possible total length of words in Andrew's article.", "sample_tests": "Examples\n\nInput\n4abbcaccaaabbb\n\nOutput\n9\n\nInput\n5aabcbcbcdecdecdecdecdecdeaaaa\n\nOutput\n6", "difficulty": 1200, "url": "https://codeforces.com/problemset/problem/593/A"}
{"header": "B. Anton and Lines\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "The teacher gave Anton a large geometry homework, but he didn't do it (as usual) as he participated in a regular round on Codeforces. In the task he was given a set of\nn\nlines defined by the equations\ny\n=\nk\ni\n\u00b7\nx\n+\nb\ni\n. It was necessary to determine whether there is at least one point of intersection of two of these lines, that lays strictly inside the strip between\nx\n1\n<\nx\n2\n. In other words, is it true that there are\n1\u2009\u2264\ni\n<\nj\n\u2264\nn\nand\nx\n',\ny\n'\n, such that:\ny\n'\u2009=\nk\ni\n*\nx\n'\u2009+\nb\ni\n, that is, point\n(\nx\n',\ny\n')\nbelongs to the line number\ni\n;\ny\n'\u2009=\nk\nj\n*\nx\n'\u2009+\nb\nj\n, that is, point\n(\nx\n',\ny\n')\nbelongs to the line number\nj\n;\nx\n1\n<\nx\n'\u2009<\nx\n2\n, that is, point\n(\nx\n',\ny\n')\nlies inside the strip bounded by\nx\n1\n<\nx\n2\n.\nYou can't leave Anton in trouble, can you? Write a program that solves the given task.\nNote\nIn the first sample there are intersections located on the border of the strip, but there are no intersections located strictly inside it.", "input_specification": "Input\n\nThe first line of the input contains an integer *n* ( 2\u2009\u2264\u2009 *n* \u2009\u2264\u2009100\u2009000 )\u00a0\u2014 the number of lines in the task given to Anton. The second line contains integers *x* 1 and *x* 2 ( \u2009-\u20091\u2009000\u2009000\u2009\u2264\u2009 *x* 1 \u2009<\u2009 *x* 2 \u2009\u2264\u20091\u2009000\u2009000 ) defining the strip inside which you need to find a point of intersection of at least two lines.\n\nThe following *n* lines contain integers *k* *i* , *b* *i* ( \u2009-\u20091\u2009000\u2009000\u2009\u2264\u2009 *k* *i* ,\u2009 *b* *i* \u2009\u2264\u20091\u2009000\u2009000 )\u00a0\u2014 the descriptions of the lines. It is guaranteed that all lines are pairwise distinct, that is, for any two *i* \u2009\u2260\u2009 *j* it is true that either *k* *i* \u2009\u2260\u2009 *k* *j* , or *b* *i* \u2009\u2260\u2009 *b* *j* .", "output_specification": "Output\n\nPrint \" Yes \" (without quotes), if there is at least one intersection of two distinct lines, located strictly inside the strip. Otherwise print \" No \" (without quotes).", "sample_tests": "Examples\n\nInput\n41 21 21 00 10 2\n\nOutput\nNO\n\nInput\n21 31 0-1 3\n\nOutput\nYES\n\nInput\n21 31 00 2\n\nOutput\nYES\n\nInput\n21 31 00 3\n\nOutput\nNO", "difficulty": 1600, "url": "https://codeforces.com/problemset/problem/593/B"}
{"header": "C. Beautiful Function\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Every day Ruslan tried to count sheep to fall asleep, but this didn't help. Now he has found a more interesting thing to do. First, he thinks of some set of circles on a plane, and then tries to choose a beautiful set of points, such that there is at least one point from the set inside or on the border of each of the imagined circles.\nYesterday Ruslan tried to solve this problem for the case when the set of points is considered beautiful if it is given as\n(\nx\nt\n=\nf\n(\nt\n),\ny\nt\n=\ng\n(\nt\n))\n, where argument\nt\ntakes all integer values from\n0\nto\n50\n. Moreover,\nf\n(\nt\n)\nand\ng\n(\nt\n)\nshould be\ncorrect\nfunctions.\nAssume that\nw\n(\nt\n)\nand\nh\n(\nt\n)\nare some correct functions, and\nc\nis an integer ranging from\n0\nto\n50\n. The function\ns\n(\nt\n)\nis correct if it's obtained by one of the following rules:\ns\n(\nt\n)\u2009=\nabs\n(\nw\n(\nt\n))\n, where\nabs\n(\nx\n)\nmeans taking the absolute value of a number\nx\n, i.e.\n|\nx\n|\n;\ns\n(\nt\n)\u2009=\u2009(\nw\n(\nt\n)\u2009+\nh\n(\nt\n))\n;\ns\n(\nt\n)\u2009=\u2009(\nw\n(\nt\n)\u2009-\nh\n(\nt\n))\n;\ns\n(\nt\n)\u2009=\u2009(\nw\n(\nt\n)\u2009*\nh\n(\nt\n))\n, where\n*\nmeans multiplication, i.e.\n(\nw\n(\nt\n)\u00b7\nh\n(\nt\n))\n;\ns\n(\nt\n)\u2009=\nc\n;\ns\n(\nt\n)\u2009=\nt\n;\nYesterday Ruslan thought on and on, but he could not cope with the task. Now he asks you to write a program that computes the appropriate\nf\n(\nt\n)\nand\ng\n(\nt\n)\nfor any set of at most\n50\ncircles.\nIn each of the functions\nf\n(\nt\n)\nand\ng\n(\nt\n)\nyou are allowed to use no more than\n50\nmultiplications. The length of any function should not exceed\n100\u00b7\nn\ncharacters. The function\nshould not contain spaces.\nRuslan can't keep big numbers in his memory, so you should choose\nf\n(\nt\n)\nand\ng\n(\nt\n)\n, such that for all integer\nt\nfrom\n0\nto\n50\nvalue of\nf\n(\nt\n)\nand\ng\n(\nt\n)\nand all the intermediate calculations won't exceed\n10\n9\nby their absolute value.\nNote\nCorrect functions:\n10\n(\n1\n+\n2\n)\n((\nt\n-\n3\n)+(\nt\n*\n4\n))\nabs\n((\nt\n-\n10))\n(\nabs\n((((23\n-\nt\n)*(\nt\n*\nt\n))+((\n45\n+\n12\n)*(\nt\n*\nt\n))))\n*\n((5\n*\nt\n)+((\n12\n*\nt\n)-\n13)))\nabs\n((\nt\n-(\nabs\n((\nt\n*\n31\n))+\n14))))\nIncorrect functions:\n3\n+\n5\n+\n7\n(not enough brackets, it should be ((\n3\n+\n5\n)+\n7\n) or (\n3\n+(\n5\n+\n7\n)))\nabs\n(\nt\n-\n3)\n(not enough brackets, it should be\nabs\n((\nt\n-\n3))\n2\n+\n(2\n-\n3\n(one bracket too many)\n1\n(\nt\n+\n5\n) (no arithmetic operation between 1 and the bracket)\n5000\n*\n5000\n(the number exceeds the maximum)\nThe picture shows one of the possible solutions", "input_specification": "Input\n\nThe first line of the input contains number *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200950 )\u00a0\u2014 the number of circles Ruslan thinks of. Next follow *n* lines, each of them containing three integers *x* *i* , *y* *i* and *r* *i* ( 0\u2009\u2264\u2009 *x* *i* ,\u2009 *y* *i* \u2009\u2264\u200950 , 2\u2009\u2264\u2009 *r* *i* \u2009\u2264\u200950 )\u00a0\u2014 the coordinates of the center and the raduis of the *i* -th circle.", "output_specification": "Output\n\nIn the first line print a correct function *f* ( *t* ) . In the second line print a correct function *g* ( *t* ) . The set of the points ( *x* *t* \u2009=\u2009 *f* ( *t* ),\u2009 *y* *t* \u2009=\u2009 *g* ( *t* )) ( 0\u2009\u2264\u2009 *t* \u2009\u2264\u200950 ) must satisfy the condition, that there is at least one point inside or on the border of each of the circles, Ruslan thinks of at the beginning.", "sample_tests": "Examples\n\nInput\n30 10 410 0 420 10 4\n\nOutput\nt abs((t-10))", "difficulty": 2200, "url": "https://codeforces.com/problemset/problem/593/C"}
{"header": "A. Gennady and a Card Game\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Gennady owns a small hotel in the countryside where he lives a peaceful life. He loves to take long walks, watch sunsets and play cards with tourists staying in his hotel. His favorite game is called \"Mau-Mau\".\nTo play Mau-Mau, you need a pack of $52$ cards. Each card has a suit (Diamonds \u2014\nD\n, Clubs \u2014\nC\n, Spades \u2014\nS\n, or Hearts \u2014\nH\n), and a rank (\n2\n,\n3\n,\n4\n,\n5\n,\n6\n,\n7\n,\n8\n,\n9\n,\nT\n,\nJ\n,\nQ\n,\nK\n, or\nA\n).\nAt the start of the game, there is one card on the table and you have five cards in your hand. You can play a card from your hand if and only if it has the same rank or the same suit as the card on the table.\nIn order to check if you'd be a good playing partner, Gennady has prepared a task for you. Given the card on the table and five cards in your hand, check if you can play at least one card.\nNote\nIn the first example, there is an Ace of Spades (\nAS\n) on the table. You can play an Ace of Diamonds (\nAD\n) because both of them are Aces.\nIn the second example, you cannot play any card.\nIn the third example, you can play an Ace of Diamonds (\nAD\n) because it has the same suit as a Four of Diamonds (\n4D\n), which lies on the table.", "input_specification": "Input\n\nThe first line of the input contains one string which describes the card on the table. The second line contains five strings which describe the cards in your hand.\n\nEach string is two characters long. The first character denotes the rank and belongs to the set $\\{{\\tt 2}, {\\tt 3}, {\\tt 4}, {\\tt 5}, {\\tt 6}, {\\tt 7}, {\\tt 8}, {\\tt 9}, {\\tt T}, {\\tt J}, {\\tt Q}, {\\tt K}, {\\tt A}\\}$. The second character denotes the suit and belongs to the set $\\{{\\tt D}, {\\tt C}, {\\tt S}, {\\tt H}\\}$.\n\nAll the cards in the input are different.", "output_specification": "Output\n\nIf it is possible to play a card from your hand, print one word \" YES \". Otherwise, print \" NO \".\n\nYou can print each letter in any case (upper or lower).", "sample_tests": "Examples\n\nInput\nAS\n2H 4C TH JH AD\n\nOutput\nYES\n\nInput\n2H\n3D 4C AC KD AS\n\nOutput\nNO\n\nInput\n4D\nAS AC AD AH 5H\n\nOutput\nYES", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1097/A"}
{"header": "B. Petr and a Combination Lock\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Petr has just bought a new car. He's just arrived at the most known Petersburg's petrol station to refuel it when he suddenly discovered that the petrol tank is secured with a combination lock! The lock has a scale of $360$ degrees and a pointer which initially points at zero:\nPetr called his car dealer, who instructed him to rotate the lock's wheel exactly $n$ times. The $i$-th rotation should be $a_i$ degrees, either clockwise or counterclockwise, and after all $n$ rotations the pointer should again point at zero.\nThis confused Petr a little bit as he isn't sure which rotations should be done clockwise and which should be done counterclockwise. As there are many possible ways of rotating the lock, help him and find out whether there exists at least one, such that after all $n$ rotations the pointer will point at zero again.\nNote\nIn the first example, we can achieve our goal by applying the first and the second rotation clockwise, and performing the third rotation counterclockwise.\nIn the second example, it's impossible to perform the rotations in order to make the pointer point at zero in the end.\nIn the third example, Petr can do all three rotations clockwise. In this case, the whole wheel will be rotated by $360$ degrees clockwise and the pointer will point at zero again.", "input_specification": "Input\n\nThe first line contains one integer $n$ ($1 \\leq n \\leq 15$) \u2014 the number of rotations.\n\nEach of the following $n$ lines contains one integer $a_i$ ($1 \\leq a_i \\leq 180$) \u2014 the angle of the $i$-th rotation in degrees.", "output_specification": "Output\n\nIf it is possible to do all the rotations so that the pointer will point at zero after all of them are performed, print a single word \" YES \". Otherwise, print \" NO \". Petr will probably buy a new car in this case.\n\nYou can print each letter in any case (upper or lower).", "sample_tests": "Examples\n\nInput\n3\n10\n20\n30\n\nOutput\nYES\n\nInput\n3\n10\n10\n10\n\nOutput\nNO\n\nInput\n3\n120\n120\n120\n\nOutput\nYES", "difficulty": 1200, "url": "https://codeforces.com/problemset/problem/1097/B"}
{"header": "C. Yuhao and a Parenthesis\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "One day, Yuhao came across a problem about checking if some bracket sequences are correct bracket sequences.\nA bracket sequence is any non-empty sequence of opening and closing parentheses. A bracket sequence is called a\ncorrect bracket sequence\nif it's possible to obtain a correct arithmetic expression by inserting characters \"\n+\n\" and \"\n1\n\" into this sequence. For example, the sequences \"\n(())()\n\", \"\n()\n\" and \"\n(()(()))\n\" are correct, while the bracket sequences \"\n)(\n\", \"\n(()\n\" and \"\n(()))(\n\" are not correct.\nYuhao found this problem too simple for him so he decided to make the problem harder. You are given many (not necessarily correct) bracket sequences. The task is to connect some of them into ordered pairs so that each bracket sequence occurs in at most one pair and the concatenation of the bracket sequences in each pair is a correct bracket sequence. The goal is to create as many pairs as possible.\nThis problem unfortunately turned out to be too difficult for Yuhao. Can you help him and solve it?\nNote\nIn the first example, it's optimal to construct two pairs: \"\n(( \u00a0\u00a0\u00a0 )())\n\" and \"\n( \u00a0\u00a0\u00a0 )\n\".", "input_specification": "Input\n\nThe first line contains one integer $n$ ($1 \\leq n \\leq 10^5$) \u2014 the number of bracket sequences.\n\nEach of the following $n$ lines contains one bracket sequence \u2014 a non-empty string which consists only of characters \" ( \" and \" ) \".\n\nThe sum of lengths of all bracket sequences in the input is at most $5 \\cdot 10^5$.\n\nNote that a bracket sequence may appear in the input multiple times. In this case, you can use each copy of the sequence separately. Also note that the order in which strings appear in the input doesn't matter.", "output_specification": "Output\n\nPrint a single integer \u2014 the maximum number of pairs which can be made, adhering to the conditions in the statement.", "sample_tests": "Examples\n\nInput\n7\n)())\n)\n((\n((\n(\n)\n)\n\nOutput\n2\n\nInput\n4\n(\n((\n(((\n(())\n\nOutput\n0\n\nInput\n2\n(())\n()\n\nOutput\n1", "difficulty": 1400, "url": "https://codeforces.com/problemset/problem/1097/C"}
{"header": "D. Makoto and a Blackboard\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Makoto has a big blackboard with a positive integer $n$ written on it. He will perform the following action exactly $k$ times:\nSuppose the number currently written on the blackboard is $v$. He will randomly pick one of the divisors of $v$ (possibly $1$ and $v$) and replace $v$ with this divisor. As Makoto uses his famous random number generator (RNG) and as he always uses $58$ as his generator seed, each divisor is guaranteed to be chosen with equal probability.\nHe now wonders what is the expected value of the number written on the blackboard after $k$ steps.\nIt can be shown that this value can be represented as $\\frac{P}{Q}$ where $P$ and $Q$ are coprime integers and $Q \\not\\equiv 0 \\pmod{10^9+7}$. Print the value of $P \\cdot Q^{-1}$ modulo $10^9+7$.\nNote\nIn the first example, after one step, the number written on the blackboard is $1$, $2$, $3$ or $6$ \u2014 each occurring with equal probability. Hence, the answer is $\\frac{1+2+3+6}{4}=3$.\nIn the second example, the answer is equal to $1 \\cdot \\frac{9}{16}+2 \\cdot \\frac{3}{16}+3 \\cdot \\frac{3}{16}+6 \\cdot \\frac{1}{16}=\\frac{15}{8}$.", "input_specification": "Input\n\nThe only line of the input contains two integers $n$ and $k$ ($1 \\leq n \\leq 10^{15}$, $1 \\leq k \\leq 10^4$).", "output_specification": "Output\n\nPrint a single integer \u2014 the expected value of the number on the blackboard after $k$ steps as $P \\cdot Q^{-1} \\pmod{10^9+7}$ for $P$, $Q$ defined above.", "sample_tests": "Examples\n\nInput\n6 1\n\nOutput\n3\n\nInput\n6 2\n\nOutput\n875000008\n\nInput\n60 5\n\nOutput\n237178099", "difficulty": 2200, "url": "https://codeforces.com/problemset/problem/1097/D"}
{"header": "A. ACM ICPC\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "In a small but very proud high school it was decided to win ACM ICPC. This goal requires to compose as many teams of three as possible, but since there were only\n6\nstudents who wished to participate, the decision was to build exactly two teams.\nAfter practice competition, participant number\ni\ngot a\nscore\nof\na\ni\n.\nTeam score\nis defined as sum of scores of its participants. High school management is interested if it's possible to build two teams with equal scores. Your task is to answer that question.\nNote\nIn the first sample, first team can be composed of\n1\nst,\n2\nnd and\n6\nth participant, second \u2014 of\n3\nrd,\n4\nth and\n5\nth: team scores are\n1\u2009+\u20093\u2009+\u20091\u2009=\u20092\u2009+\u20091\u2009+\u20092\u2009=\u20095\n.\nIn the second sample, score of participant number\n6\nis too high: his team score will be definitely greater.", "input_specification": "Input\n\nThe single line contains six integers *a* 1 ,\u2009...,\u2009 *a* 6 ( 0\u2009\u2264\u2009 *a* *i* \u2009\u2264\u20091000 ) \u2014 scores of the participants", "output_specification": "Output\n\nPrint \" YES \" (quotes for clarity), if it is possible to build teams with equal score, and \" NO \" otherwise.\n\nYou can print each character either upper- or lowercase (\" YeS \" and \" yes \" are valid when the answer is \" YES \").", "sample_tests": "Examples\n\nInput\n1 3 2 1 2 1\n\nOutput\nYES\n\nInput\n1 1 1 1 1 99\n\nOutput\nNO", "difficulty": 1000, "url": "https://codeforces.com/problemset/problem/890/A"}
{"header": "B. Vlad and Cafes\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Vlad likes to eat in cafes very much. During his life, he has visited cafes\nn\ntimes. Unfortunately, Vlad started to feel that his last visits are not any different from each other. To fix that Vlad had a small research.\nFirst of all, Vlad assigned individual indices to all cafes. Then, he wrote down indices of cafes he visited in a row, in order of visiting them. Now, Vlad wants to find such a cafe that his last visit to that cafe was before his last visits to every other cafe. In other words, he wants to find such a cafe that he hasn't been there for as long as possible. Help Vlad to find that cafe.\nNote\nIn first test, there are three cafes, and the last visits to cafes with indices\n1\nand\n2\nwere after the last visit to cafe with index\n3\n; so this cafe is the answer.\nIn second test case, there are also three cafes, but with indices\n1\n,\n2\nand\n4\n. Cafes with indices\n1\nand\n4\nwere visited after the last visit of cafe with index\n2\n, so the answer is\n2\n. Note that Vlad could omit some numbers while numerating the cafes.", "input_specification": "Input\n\nIn first line there is one integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u20092\u00b710 5 )\u00a0\u2014 number of cafes indices written by Vlad.\n\nIn second line, *n* numbers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* ( 0\u2009\u2264\u2009 *a* *i* \u2009\u2264\u20092\u00b710 5 ) are written\u00a0\u2014 indices of cafes in order of being visited by Vlad. Vlad could visit some cafes more than once. Note that in numeration, some indices could be omitted.", "output_specification": "Output\n\nPrint one integer\u00a0\u2014 index of the cafe that Vlad hasn't visited for as long as possible.", "sample_tests": "Examples\n\nInput\n51 3 2 1 2\n\nOutput\n3\n\nInput\n62 1 2 2 4 1\n\nOutput\n2", "difficulty": 1000, "url": "https://codeforces.com/problemset/problem/890/B"}
{"header": "C. Petya and Catacombs\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "A very brave explorer Petya once decided to explore Paris catacombs. Since Petya is not really experienced, his exploration is just walking through the catacombs.\nCatacombs consist of several rooms and bidirectional passages between some pairs of them. Some passages can connect a room to itself and since the passages are built on different depths they do not intersect each other. Every minute Petya arbitrary chooses a passage from the room he is currently in and then reaches the room on the other end of the passage in exactly one minute. When he enters a room at minute\ni\n, he makes a note in his logbook with number\nt\ni\n:\nIf Petya has visited this room before, he writes down the minute he was in this room last time;\nOtherwise, Petya writes down an arbitrary non-negative integer strictly less than current minute\ni\n.\nInitially, Petya was in one of the rooms at minute\n0\n, he didn't write down number\nt\n0\n.\nAt some point during his wandering Petya got tired, threw out his logbook and went home. Vasya found his logbook and now he is curious: what is the minimum possible number of rooms in Paris catacombs according to Petya's logbook?\nNote\nIn the first sample, sequence of rooms Petya visited could be, for example\n1\u2009\u2192\u20091\u2009\u2192\u20092\n,\n1\u2009\u2192\u20092\u2009\u2192\u20091\nor\n1\u2009\u2192\u20092\u2009\u2192\u20093\n. The minimum possible number of rooms is\n2\n.\nIn the second sample, the sequence could be\n1\u2009\u2192\u20092\u2009\u2192\u20093\u2009\u2192\u20091\u2009\u2192\u20092\u2009\u2192\u20091\n.", "input_specification": "Input\n\nThe first line contains a single integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u20092\u00b710 5 ) \u2014 then number of notes in Petya's logbook.\n\nThe second line contains *n* non-negative integers *t* 1 ,\u2009 *t* 2 ,\u2009...,\u2009 *t* *n* ( 0\u2009\u2264\u2009 *t* *i* \u2009<\u2009 *i* ) \u2014 notes in the logbook.", "output_specification": "Output\n\nIn the only line print a single integer \u2014 the minimum possible number of rooms in Paris catacombs.", "sample_tests": "Examples\n\nInput\n20 0\n\nOutput\n2\n\nInput\n50 1 0 1 3\n\nOutput\n3", "difficulty": 1300, "url": "https://codeforces.com/problemset/problem/890/C"}
{"header": "D. Restoration of string\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "A substring of some string is called the most frequent, if the number of its occurrences is not less than number of occurrences of any other substring.\nYou are given a set of strings. A string (not necessarily from this set) is called good if all elements of the set are the most frequent substrings of this string. Restore the non-empty good string with minimum length. If several such strings exist, restore lexicographically minimum string. If there are no good strings, print \"\nNO\n\" (without quotes).\nA substring of a string is a contiguous subsequence of letters in the string. For example, \"\nab\n\", \"\nc\n\", \"\nabc\n\" are substrings of string \"\nabc\n\", while \"\nac\n\" is not a substring of that string.\nThe number of occurrences of a substring in a string is the number of starting positions in the string where the substring occurs. These occurrences could overlap.\nString\na\nis lexicographically smaller than string\nb\n, if\na\nis a prefix of\nb\n, or\na\nhas a smaller letter at the first position where\na\nand\nb\ndiffer.\nNote\nOne can show that in the first sample only two good strings with minimum length exist: \"\ncfmailru\n\" and \"\nmailrucf\n\". The first string is lexicographically minimum.", "input_specification": "Input\n\nThe first line contains integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 )\u00a0\u2014 the number of strings in the set.\n\nEach of the next *n* lines contains a non-empty string consisting of lowercase English letters. It is guaranteed that the strings are distinct.\n\nThe total length of the strings doesn't exceed 10 5 .", "output_specification": "Output\n\nPrint the non-empty good string with minimum length. If several good strings exist, print lexicographically minimum among them. Print \" NO \" (without quotes) if there are no good strings.", "sample_tests": "Examples\n\nInput\n4mailailrucf\n\nOutput\ncfmailru\n\nInput\n3kekpreceqcheburek\n\nOutput\nNO", "difficulty": 2000, "url": "https://codeforces.com/problemset/problem/890/D"}
{"header": "A. Dragons\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Kirito is stuck on a level of the MMORPG he is playing now. To move on in the game, he's got to defeat all\nn\ndragons that live on this level. Kirito and the dragons have\nstrength\n, which is represented by an integer. In the duel between two opponents the duel's outcome is determined by their strength. Initially, Kirito's strength equals\ns\n.\nIf Kirito starts duelling with the\ni\n-th (\n1\u2009\u2264\ni\n\u2264\nn\n) dragon and Kirito's strength is not greater than the dragon's strength\nx\ni\n, then Kirito loses the duel and dies. But if Kirito's strength is greater than the dragon's strength, then he defeats the dragon and gets a bonus strength increase by\ny\ni\n.\nKirito can fight the dragons in any order. Determine whether he can move on to the next level of the game, that is, defeat all dragons without a single loss.\nNote\nIn the first sample Kirito's strength initially equals 2. As the first dragon's strength is less than 2, Kirito can fight it and defeat it. After that he gets the bonus and his strength increases to\n2\u2009+\u200999\u2009=\u2009101\n. Now he can defeat the second dragon and move on to the next level.\nIn the second sample Kirito's strength is too small to defeat the only dragon and win.", "input_specification": "Input\n\nThe first line contains two space-separated integers *s* and *n* ( 1\u2009\u2264\u2009 *s* \u2009\u2264\u200910 4 , 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 3 ). Then *n* lines follow: the *i* -th line contains space-separated integers *x* *i* and *y* *i* ( 1\u2009\u2264\u2009 *x* *i* \u2009\u2264\u200910 4 , 0\u2009\u2264\u2009 *y* *i* \u2009\u2264\u200910 4 ) \u2014 the *i* -th dragon's strength and the bonus for defeating it.", "output_specification": "Output\n\nOn a single line print \" YES \" (without the quotes), if Kirito can move on to the next level and print \" NO \" (without the quotes), if he can't.", "sample_tests": "Examples\n\nInput\n2 21 99100 0\n\nOutput\nYES\n\nInput\n10 1100 100\n\nOutput\nNO", "difficulty": 1000, "url": "https://codeforces.com/problemset/problem/230/A"}
{"header": "B. T-primes\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "We know that prime numbers are positive integers that have exactly two distinct positive divisors. Similarly, we'll call a positive integer\nt\n\u0422-prime\n, if\nt\nhas exactly three distinct positive divisors.\nYou are given an array of\nn\npositive integers. For each of them determine whether it is \u0422-prime or not.\nNote\nThe given test has three numbers. The first number 4 has exactly three divisors \u2014 1, 2 and 4, thus the answer for this number is \"\nYES\n\". The second number 5 has two divisors (1 and 5), and the third number 6 has four divisors (1, 2, 3, 6), hence the answer for them is \"\nNO\n\".", "input_specification": "Input\n\nThe first line contains a single positive integer, *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ), showing how many numbers are in the array. The next line contains *n* space-separated integers *x* *i* ( 1\u2009\u2264\u2009 *x* *i* \u2009\u2264\u200910 12 ).\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is advised to use the cin , cout streams or the %I64d specifier.", "output_specification": "Output\n\nPrint *n* lines: the *i* -th line should contain \" YES \" (without the quotes), if number *x* *i* is \u0422-prime, and \" NO \" (without the quotes), if it isn't.", "sample_tests": "Examples\n\nInput\n34 5 6\n\nOutput\nYESNONO", "difficulty": 1300, "url": "https://codeforces.com/problemset/problem/230/B"}
{"header": "C. Shifts\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "You are given a table consisting of\nn\nrows and\nm\ncolumns. Each cell of the table contains a number, 0 or 1. In one move we can choose some row of the table and cyclically shift its values either one cell to the left, or one cell to the right.\nTo\ncyclically shift\na table row one cell to the right means to move the value of each cell, except for the last one, to the right neighboring cell, and to move the value of the last cell to the first cell. A cyclical shift of a row to the left is performed similarly, but in the other direction. For example, if we cyclically shift a row \"\n00110\n\" one cell to the right, we get a row \"\n00011\n\", but if we shift a row \"\n00110\n\" one cell to the left, we get a row \"\n01100\n\".\nDetermine the minimum number of moves needed to make some table column consist only of numbers 1.\nNote\nIn the first sample one way to achieve the goal with the least number of moves is as follows: cyclically shift the second row to the right once, then shift the third row to the left twice. Then the table column before the last one will contain only 1s.\nIn the second sample one can't shift the rows to get a column containing only 1s.", "input_specification": "Input\n\nThe first line contains two space-separated integers: *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u2009100 )\u00a0\u2014 the number of rows in the table and *m* ( 1\u2009\u2264\u2009 *m* \u2009\u2264\u200910 4 )\u00a0\u2014 the number of columns in the table. Then *n* lines follow, each of them contains *m* characters \" 0 \" or \" 1 \": the *j* -th character of the *i* -th line describes the contents of the cell in the *i* -th row and in the *j* -th column of the table.\n\nIt is guaranteed that the description of the table contains no other characters besides \" 0 \" and \" 1 \".", "output_specification": "Output\n\nPrint a single number: the minimum number of moves needed to get only numbers 1 in some column of the table. If this is impossible, print -1.", "sample_tests": "Examples\n\nInput\n3 6101010000100100000\n\nOutput\n3\n\nInput\n2 3111000\n\nOutput\n-1", "difficulty": 1500, "url": "https://codeforces.com/problemset/problem/230/C"}
{"header": "D. Planets\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Goa'uld Apophis captured Jack O'Neill's team again! Jack himself was able to escape, but by that time Apophis's ship had already jumped to hyperspace. But Jack knows on what planet will Apophis land. In order to save his friends, Jack must repeatedly go through stargates to get to this planet.\nOverall the galaxy has\nn\nplanets, indexed with numbers from 1 to\nn\n. Jack is on the planet with index 1, and Apophis will land on the planet with index\nn\n. Jack can move between some pairs of planets through stargates (he can move in both directions); the transfer takes a positive, and, perhaps, for different pairs of planets unequal number of seconds. Jack begins his journey at time 0.\nIt can be that other travellers are arriving to the planet where Jack is currently located. In this case, Jack has to wait for exactly 1 second before he can use the stargate. That is, if at time\nt\nanother traveller arrives to the planet, Jack can only pass through the stargate at time\nt\n+\u20091\n, unless there are more travellers arriving at time\nt\n+\u20091\nto the same planet.\nKnowing the information about travel times between the planets, and the times when Jack would not be able to use the stargate on particular planets, determine the minimum time in which he can get to the planet with index\nn\n.\nNote\nIn the first sample Jack has three ways to go from planet 1. If he moves to planet 4 at once, he spends 8 seconds. If he transfers to planet 3, he spends 3 seconds, but as other travellers arrive to planet 3 at time 3 and 4, he can travel to planet 4 only at time 5, thus spending 8 seconds in total. But if Jack moves to planet 2, and then \u2014 to planet 4, then he spends a total of only\n2\u2009+\u20095\u2009=\u20097\nseconds.\nIn the second sample one can't get from planet 1 to planet 3 by moving through stargates.", "input_specification": "Input\n\nThe first line contains two space-separated integers: *n* ( 2\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ), the number of planets in the galaxy, and *m* ( 0\u2009\u2264\u2009 *m* \u2009\u2264\u200910 5 ) \u2014 the number of pairs of planets between which Jack can travel using stargates. Then *m* lines follow, containing three integers each: the *i* -th line contains numbers of planets *a* *i* and *b* *i* ( 1\u2009\u2264\u2009 *a* *i* ,\u2009 *b* *i* \u2009\u2264\u2009 *n* , *a* *i* \u2009\u2260\u2009 *b* *i* ), which are connected through stargates, and the integer transfer time (in seconds) *c* *i* ( 1\u2009\u2264\u2009 *c* *i* \u2009\u2264\u200910 4 ) between these planets. It is guaranteed that between any pair of planets there is at most one stargate connection.\n\nThen *n* lines follow: the *i* -th line contains an integer *k* *i* ( 0\u2009\u2264\u2009 *k* *i* \u2009\u2264\u200910 5 ) that denotes the number of moments of time when other travellers arrive to the planet with index *i* . Then *k* *i* distinct space-separated integers *t* *ij* ( 0\u2009\u2264\u2009 *t* *ij* \u2009<\u200910 9 ) follow, sorted in ascending order. An integer *t* *ij* means that at time *t* *ij* (in seconds) another traveller arrives to the planet *i* . It is guaranteed that the sum of all *k* *i* does not exceed 10 5 .", "output_specification": "Output\n\nPrint a single number \u2014 the least amount of time Jack needs to get from planet 1 to planet *n* . If Jack can't get to planet *n* in any amount of time, print number -1.", "sample_tests": "Examples\n\nInput\n4 61 2 21 3 31 4 82 3 42 4 53 4 301 32 3 40\n\nOutput\n7\n\nInput\n3 11 2 301 30\n\nOutput\n-1", "difficulty": 1700, "url": "https://codeforces.com/problemset/problem/230/D"}
{"header": "E. Triangles\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Alice and Bob don't play games anymore. Now they study properties of all sorts of graphs together. Alice invented the following task: she takes a complete undirected graph with\nn\nvertices, chooses some\nm\nedges and keeps them. Bob gets the\nremaining edges.\nAlice and Bob are fond of \"triangles\" in graphs, that is, cycles of length 3. That's why they wonder: what total number of triangles is there in the two graphs formed by Alice and Bob's edges, correspondingly?\nNote\nIn the first sample Alice has 2 triangles: (1, 2, 3) and (2, 3, 4). Bob's graph has only 1 triangle : (1, 4, 5). That's why the two graphs in total contain 3 triangles.\nIn the second sample Alice's graph has only one triangle: (1, 2, 3). Bob's graph has three triangles: (1, 4, 5), (2, 4, 5) and (3, 4, 5). In this case the answer to the problem is 4.", "input_specification": "Input\n\nThe first line contains two space-separated integers *n* and *m* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 6 ,\u20090\u2009\u2264\u2009 *m* \u2009\u2264\u200910 6 ) \u2014 the number of vertices in the initial complete graph and the number of edges in Alice's graph, correspondingly. Then *m* lines follow: the *i* -th line contains two space-separated integers *a* *i* , *b* *i* ( 1\u2009\u2264\u2009 *a* *i* ,\u2009 *b* *i* \u2009\u2264\u2009 *n* , *a* *i* \u2009\u2260\u2009 *b* *i* ), \u2014 the numbers of the two vertices connected by the *i* -th edge in Alice's graph. It is guaranteed that Alice's graph contains no multiple edges and self-loops. It is guaranteed that the initial complete graph also contains no multiple edges and self-loops.\n\nConsider the graph vertices to be indexed in some way from 1 to *n* .", "output_specification": "Output\n\nPrint a single number \u2014 the total number of cycles of length 3 in Alice and Bob's graphs together.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is advised to use the cin , cout streams or the %I64d specifier.", "sample_tests": "Examples\n\nInput\n5 51 21 32 32 43 4\n\nOutput\n3\n\nInput\n5 31 22 31 3\n\nOutput\n4", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/230/E"}
{"header": "E. Triangles\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Alice and Bob don't play games anymore. Now they study properties of all sorts of graphs together. Alice invented the following task: she takes a complete undirected graph with\nn\nvertices, chooses some\nm\nedges and keeps them. Bob gets the\nremaining edges.\nAlice and Bob are fond of \"triangles\" in graphs, that is, cycles of length 3. That's why they wonder: what total number of triangles is there in the two graphs formed by Alice and Bob's edges, correspondingly?\nNote\nIn the first sample Alice has 2 triangles: (1, 2, 3) and (2, 3, 4). Bob's graph has only 1 triangle : (1, 4, 5). That's why the two graphs in total contain 3 triangles.\nIn the second sample Alice's graph has only one triangle: (1, 2, 3). Bob's graph has three triangles: (1, 4, 5), (2, 4, 5) and (3, 4, 5). In this case the answer to the problem is 4.", "input_specification": "Input\n\nThe first line contains two space-separated integers *n* and *m* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 6 ,\u20090\u2009\u2264\u2009 *m* \u2009\u2264\u200910 6 ) \u2014 the number of vertices in the initial complete graph and the number of edges in Alice's graph, correspondingly. Then *m* lines follow: the *i* -th line contains two space-separated integers *a* *i* , *b* *i* ( 1\u2009\u2264\u2009 *a* *i* ,\u2009 *b* *i* \u2009\u2264\u2009 *n* , *a* *i* \u2009\u2260\u2009 *b* *i* ), \u2014 the numbers of the two vertices connected by the *i* -th edge in Alice's graph. It is guaranteed that Alice's graph contains no multiple edges and self-loops. It is guaranteed that the initial complete graph also contains no multiple edges and self-loops.\n\nConsider the graph vertices to be indexed in some way from 1 to *n* .", "output_specification": "Output\n\nPrint a single number \u2014 the total number of cycles of length 3 in Alice and Bob's graphs together.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is advised to use the cin , cout streams or the %I64d specifier.", "sample_tests": "Examples\n\nInput\n5 51 21 32 32 43 4\n\nOutput\n3\n\nInput\n5 31 22 31 3\n\nOutput\n4", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/230/F"}
{"header": "E. Triangles\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Alice and Bob don't play games anymore. Now they study properties of all sorts of graphs together. Alice invented the following task: she takes a complete undirected graph with\nn\nvertices, chooses some\nm\nedges and keeps them. Bob gets the\nremaining edges.\nAlice and Bob are fond of \"triangles\" in graphs, that is, cycles of length 3. That's why they wonder: what total number of triangles is there in the two graphs formed by Alice and Bob's edges, correspondingly?\nNote\nIn the first sample Alice has 2 triangles: (1, 2, 3) and (2, 3, 4). Bob's graph has only 1 triangle : (1, 4, 5). That's why the two graphs in total contain 3 triangles.\nIn the second sample Alice's graph has only one triangle: (1, 2, 3). Bob's graph has three triangles: (1, 4, 5), (2, 4, 5) and (3, 4, 5). In this case the answer to the problem is 4.", "input_specification": "Input\n\nThe first line contains two space-separated integers *n* and *m* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 6 ,\u20090\u2009\u2264\u2009 *m* \u2009\u2264\u200910 6 ) \u2014 the number of vertices in the initial complete graph and the number of edges in Alice's graph, correspondingly. Then *m* lines follow: the *i* -th line contains two space-separated integers *a* *i* , *b* *i* ( 1\u2009\u2264\u2009 *a* *i* ,\u2009 *b* *i* \u2009\u2264\u2009 *n* , *a* *i* \u2009\u2260\u2009 *b* *i* ), \u2014 the numbers of the two vertices connected by the *i* -th edge in Alice's graph. It is guaranteed that Alice's graph contains no multiple edges and self-loops. It is guaranteed that the initial complete graph also contains no multiple edges and self-loops.\n\nConsider the graph vertices to be indexed in some way from 1 to *n* .", "output_specification": "Output\n\nPrint a single number \u2014 the total number of cycles of length 3 in Alice and Bob's graphs together.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is advised to use the cin , cout streams or the %I64d specifier.", "sample_tests": "Examples\n\nInput\n5 51 21 32 32 43 4\n\nOutput\n3\n\nInput\n5 31 22 31 3\n\nOutput\n4", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/230/G"}
{"header": "E. Triangles\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Alice and Bob don't play games anymore. Now they study properties of all sorts of graphs together. Alice invented the following task: she takes a complete undirected graph with\nn\nvertices, chooses some\nm\nedges and keeps them. Bob gets the\nremaining edges.\nAlice and Bob are fond of \"triangles\" in graphs, that is, cycles of length 3. That's why they wonder: what total number of triangles is there in the two graphs formed by Alice and Bob's edges, correspondingly?\nNote\nIn the first sample Alice has 2 triangles: (1, 2, 3) and (2, 3, 4). Bob's graph has only 1 triangle : (1, 4, 5). That's why the two graphs in total contain 3 triangles.\nIn the second sample Alice's graph has only one triangle: (1, 2, 3). Bob's graph has three triangles: (1, 4, 5), (2, 4, 5) and (3, 4, 5). In this case the answer to the problem is 4.", "input_specification": "Input\n\nThe first line contains two space-separated integers *n* and *m* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 6 ,\u20090\u2009\u2264\u2009 *m* \u2009\u2264\u200910 6 ) \u2014 the number of vertices in the initial complete graph and the number of edges in Alice's graph, correspondingly. Then *m* lines follow: the *i* -th line contains two space-separated integers *a* *i* , *b* *i* ( 1\u2009\u2264\u2009 *a* *i* ,\u2009 *b* *i* \u2009\u2264\u2009 *n* , *a* *i* \u2009\u2260\u2009 *b* *i* ), \u2014 the numbers of the two vertices connected by the *i* -th edge in Alice's graph. It is guaranteed that Alice's graph contains no multiple edges and self-loops. It is guaranteed that the initial complete graph also contains no multiple edges and self-loops.\n\nConsider the graph vertices to be indexed in some way from 1 to *n* .", "output_specification": "Output\n\nPrint a single number \u2014 the total number of cycles of length 3 in Alice and Bob's graphs together.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is advised to use the cin , cout streams or the %I64d specifier.", "sample_tests": "Examples\n\nInput\n5 51 21 32 32 43 4\n\nOutput\n3\n\nInput\n5 31 22 31 3\n\nOutput\n4", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/230/H"}
{"header": "A. Heads or Tails\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Petya and Vasya are tossing a coin. Their friend Valera is appointed as a judge. The game is very simple. First Vasya tosses a coin\nx\ntimes, then Petya tosses a coin\ny\ntimes. If the tossing player gets head, he scores one point. If he gets tail, nobody gets any points. The winner is the player with most points by the end of the game. If boys have the same number of points, the game finishes with a draw.\nAt some point, Valera lost his count, and so he can not say exactly what the score is at the end of the game. But there are things he remembers for sure. He remembers that the entire game Vasya got heads at least\na\ntimes, and Petya got heads at least\nb\ntimes. Moreover, he knows that the winner of the game was Vasya. Valera wants to use this information to know every possible outcome of the game, which do not contradict his memories.", "input_specification": "Input\n\nThe single line contains four integers *x* ,\u2009 *y* ,\u2009 *a* ,\u2009 *b* (1\u2009\u2264\u2009 *a* \u2009\u2264\u2009 *x* \u2009\u2264\u2009100,\u20091\u2009\u2264\u2009 *b* \u2009\u2264\u2009 *y* \u2009\u2264\u2009100) . The numbers on the line are separated by a space.", "output_specification": "Output\n\nIn the first line print integer *n* \u2014 the number of possible outcomes of the game. Then on *n* lines print the outcomes. On the *i* -th line print a space-separated pair of integers *c* *i* , *d* *i* \u2014 the number of heads Vasya and Petya got in the *i* -th outcome of the game, correspondingly. Print pairs of integers ( *c* *i* ,\u2009 *d* *i* ) in the strictly increasing order.\n\nLet us remind you that the pair of numbers ( *p* 1 ,\u2009 *q* 1 ) is less than the pair of numbers ( *p* 2 ,\u2009 *q* 2 ) , if *p* 1 \u2009<\u2009 *p* 2 , or *p* 1 \u2009=\u2009 *p* 2 and also *q* 1 \u2009<\u2009 *q* 2 .", "sample_tests": "Examples\n\nInput\n3 2 1 1\n\nOutput\n32 13 13 2\n\nInput\n2 4 2 2\n\nOutput\n0", "difficulty": 1100, "url": "https://codeforces.com/problemset/problem/242/A"}
{"header": "B. Big Segment\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "A coordinate line has\nn\nsegments, the\ni\n-th segment starts at the position\nl\ni\nand ends at the position\nr\ni\n. We will denote such a segment as\n[\nl\ni\n,\nr\ni\n]\n.\nYou have suggested that one of the defined segments covers all others. In other words, there is such segment in the given set, which contains all other ones. Now you want to test your assumption. Find in the given set the segment which covers all other segments, and print its number. If such a segment doesn't exist, print -1.\nFormally we will assume that segment\n[\na\n,\nb\n]\ncovers segment\n[\nc\n,\nd\n]\n, if they meet this condition\na\n\u2264\nc\n\u2264\nd\n\u2264\nb\n.", "input_specification": "Input\n\nThe first line contains integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ) \u2014 the number of segments. Next *n* lines contain the descriptions of the segments. The *i* -th line contains two space-separated integers *l* *i* ,\u2009 *r* *i* ( 1\u2009\u2264\u2009 *l* *i* \u2009\u2264\u2009 *r* *i* \u2009\u2264\u200910 9 ) \u2014 the borders of the *i* -th segment.\n\nIt is guaranteed that no two segments coincide.", "output_specification": "Output\n\nPrint a single integer \u2014 the number of the segment that covers all other segments in the set. If there's no solution, print -1.\n\nThe segments are numbered starting from 1 in the order in which they appear in the input.", "sample_tests": "Examples\n\nInput\n31 12 23 3\n\nOutput\n-1\n\nInput\n61 52 31 107 107 710 10\n\nOutput\n3", "difficulty": 1100, "url": "https://codeforces.com/problemset/problem/242/B"}
{"header": "C. King's Path\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "The black king is standing on a chess field consisting of\n10\n9\nrows and\n10\n9\ncolumns. We will consider the rows of the field numbered with integers from\n1\nto\n10\n9\nfrom top to bottom. The columns are similarly numbered with integers from\n1\nto\n10\n9\nfrom left to right. We will denote a cell of the field that is located in the\ni\n-th row and\nj\n-th column as\n(\ni\n,\nj\n)\n.\nYou know that some squares of the given chess field are\nallowed\n. All allowed cells of the chess field are given as\nn\nsegments. Each segment is described by three integers\nr\ni\n,\na\ni\n,\nb\ni\n(\na\ni\n\u2264\nb\ni\n)\n, denoting that cells in columns from number\na\ni\nto number\nb\ni\ninclusive in the\nr\ni\n-th row are allowed.\nYour task is to find the minimum number of moves the king needs to get from square\n(\nx\n0\n,\ny\n0\n)\nto square\n(\nx\n1\n,\ny\n1\n)\n, provided that he only moves along the allowed cells. In other words, the king can be located only on allowed cells on his way.\nLet us remind you that a chess king can move to any of the neighboring cells in one move. Two cells of a chess field are considered neighboring if they share at least one point.", "input_specification": "Input\n\nThe first line contains four space-separated integers *x* 0 ,\u2009 *y* 0 ,\u2009 *x* 1 ,\u2009 *y* 1 (1\u2009\u2264\u2009 *x* 0 ,\u2009 *y* 0 ,\u2009 *x* 1 ,\u2009 *y* 1 \u2009\u2264\u200910 9 ) , denoting the initial and the final positions of the king.\n\nThe second line contains a single integer *n* (1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ) , denoting the number of segments of allowed cells. Next *n* lines contain the descriptions of these segments. The *i* -th line contains three space-separated integers *r* *i* ,\u2009 *a* *i* ,\u2009 *b* *i* (1\u2009\u2264\u2009 *r* *i* ,\u2009 *a* *i* ,\u2009 *b* *i* \u2009\u2264\u200910 9 ,\u2009 *a* *i* \u2009\u2264\u2009 *b* *i* ) , denoting that cells in columns from number *a* *i* to number *b* *i* inclusive in the *r* *i* -th row are allowed. Note that the segments of the allowed cells can intersect and embed arbitrarily.\n\nIt is guaranteed that the king's initial and final position are allowed cells. It is guaranteed that the king's initial and the final positions do not coincide. It is guaranteed that the total length of all given segments doesn't exceed 10 5 .", "output_specification": "Output\n\nIf there is no path between the initial and final position along allowed cells, print -1.\n\nOtherwise print a single integer \u2014 the minimum number of moves the king needs to get from the initial position to the final one.", "sample_tests": "Examples\n\nInput\n5 7 6 1135 3 86 7 115 2 5\n\nOutput\n4\n\nInput\n3 4 3 1033 1 44 5 93 10 10\n\nOutput\n6\n\nInput\n1 1 2 1021 1 32 6 10\n\nOutput\n-1", "difficulty": 1800, "url": "https://codeforces.com/problemset/problem/242/C"}
{"header": "D. Dispute\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Valera has\nn\ncounters numbered from\n1\nto\nn\n. Some of them are connected by wires, and each of the counters has a special button.\nInitially, all the counters contain number\n0\n. When you press a button on a certain counter, the value it has increases by one. Also, the values recorded in all the counters, directly connected to it by a wire, increase by one.\nValera and Ignat started having a dispute, the dispute is as follows. Ignat thought of a sequence of\nn\nintegers\na\n1\n,\na\n2\n,\u2009...,\na\nn\n. Valera should choose some set of distinct counters and press buttons on each of them exactly once (on other counters the buttons won't be pressed). If after that there is a counter with the number\ni\n, which has value\na\ni\n, then Valera loses the dispute, otherwise he wins the dispute.\nHelp Valera to determine on which counters he needs to press a button to win the dispute.", "input_specification": "Input\n\nThe first line contains two space-separated integers *n* and *m* (1\u2009\u2264\u2009 *n* ,\u2009 *m* \u2009\u2264\u200910 5 ) , that denote the number of counters Valera has and the number of pairs of counters connected by wires.\n\nEach of the following *m* lines contains two space-separated integers *u* *i* and *v* *i* (1\u2009\u2264\u2009 *u* *i* ,\u2009 *v* *i* \u2009\u2264\u2009 *n* ,\u2009 *u* *i* \u2009\u2260\u2009 *v* *i* ) , that mean that counters with numbers *u* *i* and *v* *i* are connected by a wire. It is guaranteed that each pair of connected counters occurs exactly once in the input.\n\nThe last line contains *n* space-separated integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* (0\u2009\u2264\u2009 *a* *i* \u2009\u2264\u200910 5 ) , where *a* *i* is the value that Ignat choose for the *i* -th counter.", "output_specification": "Output\n\nIf Valera can't win the dispute print in the first line -1.\n\nOtherwise, print in the first line integer *k* (0\u2009\u2264\u2009 *k* \u2009\u2264\u2009 *n* ) . In the second line print *k* distinct space-separated integers \u2014 the numbers of the counters, where Valera should push buttons to win the dispute, in arbitrary order.\n\nIf there exists multiple answers, you are allowed to print any of them.", "sample_tests": "Examples\n\nInput\n5 52 34 11 55 32 11 1 2 0 2\n\nOutput\n21 2\n\nInput\n4 21 23 40 0 0 0\n\nOutput\n31 3 4", "difficulty": 2100, "url": "https://codeforces.com/problemset/problem/242/D"}
{"header": "E. XOR on Segment\n\ntime limit per test\n 4 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "You've got an array\na\n, consisting of\nn\nintegers\na\n1\n,\na\n2\n,\u2009...,\na\nn\n. You are allowed to perform two operations on this array:\nCalculate the sum of current array elements on the segment\n[\nl\n,\nr\n]\n, that is, count value\na\nl\n+\na\nl\n+\u20091\n+\u2009...\u2009+\na\nr\n.\nApply the xor operation with a given number\nx\nto each array element on the segment\n[\nl\n,\nr\n]\n, that is, execute\n. This operation changes exactly\nr\n-\nl\n+\u20091\narray elements.\nExpression\nmeans applying bitwise xor operation to numbers\nx\nand\ny\n. The given operation exists in all modern programming languages, for example in language\nC++\nand\nJava\nit is marked as \"\n^\n\", in\nPascal\n\u2014 as \"\nxor\n\".\nYou've got a list of\nm\noperations of the indicated type. Your task is to perform all given operations, for each sum query you should print the result you get.", "input_specification": "Input\n\nThe first line contains integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ) \u2014 the size of the array. The second line contains space-separated integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* ( 0\u2009\u2264\u2009 *a* *i* \u2009\u2264\u200910 6 ) \u2014 the original array.\n\nThe third line contains integer *m* ( 1\u2009\u2264\u2009 *m* \u2009\u2264\u20095\u00b710 4 ) \u2014 the number of operations with the array. The *i* -th of the following *m* lines first contains an integer *t* *i* ( 1\u2009\u2264\u2009 *t* *i* \u2009\u2264\u20092 ) \u2014 the type of the *i* -th query. If *t* *i* \u2009=\u20091 , then this is the query of the sum, if *t* *i* \u2009=\u20092 , then this is the query to change array elements. If the *i* -th operation is of type 1 , then next follow two integers *l* *i* ,\u2009 *r* *i* ( 1\u2009\u2264\u2009 *l* *i* \u2009\u2264\u2009 *r* *i* \u2009\u2264\u2009 *n* ). If the *i* -th operation is of type 2 , then next follow three integers *l* *i* ,\u2009 *r* *i* ,\u2009 *x* *i* ( 1\u2009\u2264\u2009 *l* *i* \u2009\u2264\u2009 *r* *i* \u2009\u2264\u2009 *n* ,\u20091\u2009\u2264\u2009 *x* *i* \u2009\u2264\u200910 6 ). The numbers on the lines are separated by single spaces.", "output_specification": "Output\n\nFor each query of type 1 print in a single line the sum of numbers on the given segment. Print the answers to the queries in the order in which the queries go in the input.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin , cout streams, or the %I64d specifier.", "sample_tests": "Examples\n\nInput\n54 10 3 13 781 2 42 1 3 31 2 41 3 32 2 5 51 1 52 1 2 101 2 3\n\nOutput\n262203411\n\nInput\n64 7 4 0 7 352 2 3 81 1 52 3 5 12 4 5 61 2 3\n\nOutput\n3828", "difficulty": 2000, "url": "https://codeforces.com/problemset/problem/242/E"}
{"header": "E. XOR on Segment\n\ntime limit per test\n 4 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "You've got an array\na\n, consisting of\nn\nintegers\na\n1\n,\na\n2\n,\u2009...,\na\nn\n. You are allowed to perform two operations on this array:\nCalculate the sum of current array elements on the segment\n[\nl\n,\nr\n]\n, that is, count value\na\nl\n+\na\nl\n+\u20091\n+\u2009...\u2009+\na\nr\n.\nApply the xor operation with a given number\nx\nto each array element on the segment\n[\nl\n,\nr\n]\n, that is, execute\n. This operation changes exactly\nr\n-\nl\n+\u20091\narray elements.\nExpression\nmeans applying bitwise xor operation to numbers\nx\nand\ny\n. The given operation exists in all modern programming languages, for example in language\nC++\nand\nJava\nit is marked as \"\n^\n\", in\nPascal\n\u2014 as \"\nxor\n\".\nYou've got a list of\nm\noperations of the indicated type. Your task is to perform all given operations, for each sum query you should print the result you get.", "input_specification": "Input\n\nThe first line contains integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ) \u2014 the size of the array. The second line contains space-separated integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* ( 0\u2009\u2264\u2009 *a* *i* \u2009\u2264\u200910 6 ) \u2014 the original array.\n\nThe third line contains integer *m* ( 1\u2009\u2264\u2009 *m* \u2009\u2264\u20095\u00b710 4 ) \u2014 the number of operations with the array. The *i* -th of the following *m* lines first contains an integer *t* *i* ( 1\u2009\u2264\u2009 *t* *i* \u2009\u2264\u20092 ) \u2014 the type of the *i* -th query. If *t* *i* \u2009=\u20091 , then this is the query of the sum, if *t* *i* \u2009=\u20092 , then this is the query to change array elements. If the *i* -th operation is of type 1 , then next follow two integers *l* *i* ,\u2009 *r* *i* ( 1\u2009\u2264\u2009 *l* *i* \u2009\u2264\u2009 *r* *i* \u2009\u2264\u2009 *n* ). If the *i* -th operation is of type 2 , then next follow three integers *l* *i* ,\u2009 *r* *i* ,\u2009 *x* *i* ( 1\u2009\u2264\u2009 *l* *i* \u2009\u2264\u2009 *r* *i* \u2009\u2264\u2009 *n* ,\u20091\u2009\u2264\u2009 *x* *i* \u2009\u2264\u200910 6 ). The numbers on the lines are separated by single spaces.", "output_specification": "Output\n\nFor each query of type 1 print in a single line the sum of numbers on the given segment. Print the answers to the queries in the order in which the queries go in the input.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin , cout streams, or the %I64d specifier.", "sample_tests": "Examples\n\nInput\n54 10 3 13 781 2 42 1 3 31 2 41 3 32 2 5 51 1 52 1 2 101 2 3\n\nOutput\n262203411\n\nInput\n64 7 4 0 7 352 2 3 81 1 52 3 5 12 4 5 61 2 3\n\nOutput\n3828", "difficulty": 2000, "url": "https://codeforces.com/problemset/problem/242/F"}
{"header": "E. XOR on Segment\n\ntime limit per test\n 4 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "You've got an array\na\n, consisting of\nn\nintegers\na\n1\n,\na\n2\n,\u2009...,\na\nn\n. You are allowed to perform two operations on this array:\nCalculate the sum of current array elements on the segment\n[\nl\n,\nr\n]\n, that is, count value\na\nl\n+\na\nl\n+\u20091\n+\u2009...\u2009+\na\nr\n.\nApply the xor operation with a given number\nx\nto each array element on the segment\n[\nl\n,\nr\n]\n, that is, execute\n. This operation changes exactly\nr\n-\nl\n+\u20091\narray elements.\nExpression\nmeans applying bitwise xor operation to numbers\nx\nand\ny\n. The given operation exists in all modern programming languages, for example in language\nC++\nand\nJava\nit is marked as \"\n^\n\", in\nPascal\n\u2014 as \"\nxor\n\".\nYou've got a list of\nm\noperations of the indicated type. Your task is to perform all given operations, for each sum query you should print the result you get.", "input_specification": "Input\n\nThe first line contains integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ) \u2014 the size of the array. The second line contains space-separated integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* ( 0\u2009\u2264\u2009 *a* *i* \u2009\u2264\u200910 6 ) \u2014 the original array.\n\nThe third line contains integer *m* ( 1\u2009\u2264\u2009 *m* \u2009\u2264\u20095\u00b710 4 ) \u2014 the number of operations with the array. The *i* -th of the following *m* lines first contains an integer *t* *i* ( 1\u2009\u2264\u2009 *t* *i* \u2009\u2264\u20092 ) \u2014 the type of the *i* -th query. If *t* *i* \u2009=\u20091 , then this is the query of the sum, if *t* *i* \u2009=\u20092 , then this is the query to change array elements. If the *i* -th operation is of type 1 , then next follow two integers *l* *i* ,\u2009 *r* *i* ( 1\u2009\u2264\u2009 *l* *i* \u2009\u2264\u2009 *r* *i* \u2009\u2264\u2009 *n* ). If the *i* -th operation is of type 2 , then next follow three integers *l* *i* ,\u2009 *r* *i* ,\u2009 *x* *i* ( 1\u2009\u2264\u2009 *l* *i* \u2009\u2264\u2009 *r* *i* \u2009\u2264\u2009 *n* ,\u20091\u2009\u2264\u2009 *x* *i* \u2009\u2264\u200910 6 ). The numbers on the lines are separated by single spaces.", "output_specification": "Output\n\nFor each query of type 1 print in a single line the sum of numbers on the given segment. Print the answers to the queries in the order in which the queries go in the input.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin , cout streams, or the %I64d specifier.", "sample_tests": "Examples\n\nInput\n54 10 3 13 781 2 42 1 3 31 2 41 3 32 2 5 51 1 52 1 2 101 2 3\n\nOutput\n262203411\n\nInput\n64 7 4 0 7 352 2 3 81 1 52 3 5 12 4 5 61 2 3\n\nOutput\n3828", "difficulty": 2000, "url": "https://codeforces.com/problemset/problem/242/G"}
{"header": "E. XOR on Segment\n\ntime limit per test\n 4 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "You've got an array\na\n, consisting of\nn\nintegers\na\n1\n,\na\n2\n,\u2009...,\na\nn\n. You are allowed to perform two operations on this array:\nCalculate the sum of current array elements on the segment\n[\nl\n,\nr\n]\n, that is, count value\na\nl\n+\na\nl\n+\u20091\n+\u2009...\u2009+\na\nr\n.\nApply the xor operation with a given number\nx\nto each array element on the segment\n[\nl\n,\nr\n]\n, that is, execute\n. This operation changes exactly\nr\n-\nl\n+\u20091\narray elements.\nExpression\nmeans applying bitwise xor operation to numbers\nx\nand\ny\n. The given operation exists in all modern programming languages, for example in language\nC++\nand\nJava\nit is marked as \"\n^\n\", in\nPascal\n\u2014 as \"\nxor\n\".\nYou've got a list of\nm\noperations of the indicated type. Your task is to perform all given operations, for each sum query you should print the result you get.", "input_specification": "Input\n\nThe first line contains integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ) \u2014 the size of the array. The second line contains space-separated integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* ( 0\u2009\u2264\u2009 *a* *i* \u2009\u2264\u200910 6 ) \u2014 the original array.\n\nThe third line contains integer *m* ( 1\u2009\u2264\u2009 *m* \u2009\u2264\u20095\u00b710 4 ) \u2014 the number of operations with the array. The *i* -th of the following *m* lines first contains an integer *t* *i* ( 1\u2009\u2264\u2009 *t* *i* \u2009\u2264\u20092 ) \u2014 the type of the *i* -th query. If *t* *i* \u2009=\u20091 , then this is the query of the sum, if *t* *i* \u2009=\u20092 , then this is the query to change array elements. If the *i* -th operation is of type 1 , then next follow two integers *l* *i* ,\u2009 *r* *i* ( 1\u2009\u2264\u2009 *l* *i* \u2009\u2264\u2009 *r* *i* \u2009\u2264\u2009 *n* ). If the *i* -th operation is of type 2 , then next follow three integers *l* *i* ,\u2009 *r* *i* ,\u2009 *x* *i* ( 1\u2009\u2264\u2009 *l* *i* \u2009\u2264\u2009 *r* *i* \u2009\u2264\u2009 *n* ,\u20091\u2009\u2264\u2009 *x* *i* \u2009\u2264\u200910 6 ). The numbers on the lines are separated by single spaces.", "output_specification": "Output\n\nFor each query of type 1 print in a single line the sum of numbers on the given segment. Print the answers to the queries in the order in which the queries go in the input.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin , cout streams, or the %I64d specifier.", "sample_tests": "Examples\n\nInput\n54 10 3 13 781 2 42 1 3 31 2 41 3 32 2 5 51 1 52 1 2 101 2 3\n\nOutput\n262203411\n\nInput\n64 7 4 0 7 352 2 3 81 1 52 3 5 12 4 5 61 2 3\n\nOutput\n3828", "difficulty": 2000, "url": "https://codeforces.com/problemset/problem/242/H"}
{"header": "A. Forbidden Subsequence\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given strings $S$ and $T$, consisting of lowercase English letters. It is guaranteed that $T$ is a permutation of the string\nabc\n.\nFind string $S'$, the\nlexicographically smallest\npermutation of $S$ such that $T$ is\nnot\na subsequence of $S'$.\nString $a$ is a\npermutation\nof string $b$ if the number of occurrences of each distinct character is the same in both strings.\nA string $a$ is a\nsubsequence\nof a string $b$ if $a$ can be obtained from $b$ by deletion of several (possibly, zero or all) elements.\nA string $a$ is\nlexicographically smaller\nthan a string $b$ if and only if one of the following holds:\n$a$ is a prefix of $b$, but $a \\ne b$;\nin the first position where $a$ and $b$ differ, the string $a$ has a letter that appears earlier in the alphabet than the corresponding letter in $b$.\nNote\nIn the first test case, both\naaaabbc\nand\naaaabcb\nare lexicographically smaller than\naaaacbb\n, but they contain\nabc\nas a subsequence.\nIn the second test case,\nabccc\nis the smallest permutation of\ncccba\nand does not contain\nacb\nas a subsequence.\nIn the third test case,\nbcdis\nis the smallest permutation of\ndbsic\nand does not contain\nbac\nas a subsequence.", "input_specification": "Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains a string $S$ ($1 \\le |S| \\le 100$), consisting of lowercase English letters.\n\nThe second line of each test case contains a string $T$ that is a permutation of the string abc . (Hence, $|T| = 3$).\n\nNote that there is no limit on the sum of $|S|$ across all test cases.", "output_specification": "Output\n\nFor each test case, output a single string $S'$, the lexicographically smallest permutation of $S$ such that $T$ is not a subsequence of $S'$.", "sample_tests": "Example\n\nInput\n7\nabacaba\nabc\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabc\nac\nabc\n\nOutput\naaaacbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1617/A"}
{"header": "B. GCD Problem\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Given a positive integer $n$. Find three\ndistinct\npositive integers $a$, $b$, $c$ such that $a + b + c = n$ and $\\operatorname{gcd}(a, b) = c$, where $\\operatorname{gcd}(x, y)$ denotes the\ngreatest common divisor (GCD)\nof integers $x$ and $y$.\nNote\nIn the first test case, $6 + 9 + 3 = 18$ and $\\operatorname{gcd}(6, 9) = 3$.\nIn the second test case, $21 + 39 + 3 = 63$ and $\\operatorname{gcd}(21, 39) = 3$.\nIn the third test case, $29 + 43 + 1 = 73$ and $\\operatorname{gcd}(29, 43) = 1$.", "input_specification": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^5$)\u00a0\u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer $n$ ($10 \\le n \\le 10^9$).", "output_specification": "Output\n\nFor each test case, output three distinct positive integers $a$, $b$, $c$ satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.", "sample_tests": "Example\n\nInput\n6\n18\n63\n73\n91\n438\n122690412\n\nOutput\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2", "difficulty": 900, "url": "https://codeforces.com/problemset/problem/1617/B"}
{"header": "C. Paprika and Permutation\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Paprika loves permutations. She has an array $a_1, a_2, \\dots, a_n$. She wants to make the array a\npermutation\nof integers $1$ to $n$.\nIn order to achieve this goal, she can perform operations on the array. In each operation she can choose two integers $i$ ($1 \\le i \\le n$) and $x$ ($x > 0$), then perform $a_i := a_i \\bmod x$ (that is, replace $a_i$ by the remainder of $a_i$ divided by $x$). In different operations, the chosen $i$ and $x$\ncan be different\n.\nDetermine the minimum number of operations needed to make the array a permutation of integers $1$ to $n$. If it is impossible, output $-1$.\nA permutation is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array) and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\nNote\nFor the first test, the only possible sequence of operations which minimizes the number of operations is:\nChoose $i=2$, $x=5$. Perform $a_2 := a_2 \\bmod 5 = 2$.\nFor the second test, it is impossible to obtain a permutation of integers from $1$ to $n$.", "input_specification": "Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1 \\le n \\le 10^5$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$. ($1 \\le a_i \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.", "output_specification": "Output\n\nFor each test case, output the minimum number of operations needed to make the array a permutation of integers $1$ to $n$, or $-1$ if it is impossible.", "sample_tests": "Example\n\nInput\n4\n2\n1 7\n3\n1 5 4\n4\n12345678 87654321 20211218 23571113\n9\n1 2 3 4 18 19 5 6 7\n\nOutput\n1\n-1\n4\n2", "difficulty": 1300, "url": "https://codeforces.com/problemset/problem/1617/C"}
{"header": "C. Paprika and Permutation\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Paprika loves permutations. She has an array $a_1, a_2, \\dots, a_n$. She wants to make the array a\npermutation\nof integers $1$ to $n$.\nIn order to achieve this goal, she can perform operations on the array. In each operation she can choose two integers $i$ ($1 \\le i \\le n$) and $x$ ($x > 0$), then perform $a_i := a_i \\bmod x$ (that is, replace $a_i$ by the remainder of $a_i$ divided by $x$). In different operations, the chosen $i$ and $x$\ncan be different\n.\nDetermine the minimum number of operations needed to make the array a permutation of integers $1$ to $n$. If it is impossible, output $-1$.\nA permutation is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array) and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\nNote\nFor the first test, the only possible sequence of operations which minimizes the number of operations is:\nChoose $i=2$, $x=5$. Perform $a_2 := a_2 \\bmod 5 = 2$.\nFor the second test, it is impossible to obtain a permutation of integers from $1$ to $n$.", "input_specification": "Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1 \\le n \\le 10^5$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$. ($1 \\le a_i \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.", "output_specification": "Output\n\nFor each test case, output the minimum number of operations needed to make the array a permutation of integers $1$ to $n$, or $-1$ if it is impossible.", "sample_tests": "Example\n\nInput\n4\n2\n1 7\n3\n1 5 4\n4\n12345678 87654321 20211218 23571113\n9\n1 2 3 4 18 19 5 6 7\n\nOutput\n1\n-1\n4\n2", "difficulty": 1300, "url": "https://codeforces.com/problemset/problem/1617/D"}
{"header": "A. Stones\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Alice is playing with some stones.\nNow there are three numbered heaps of stones. The first of them contains $a$ stones, the second of them contains $b$ stones and the third of them contains $c$ stones.\nEach time she can do one of two operations:\ntake one stone from the first heap and two stones from the second heap (this operation can be done only if the first heap contains at least one stone and the second heap contains at least two stones);\ntake one stone from the second heap and two stones from the third heap (this operation can be done only if the second heap contains at least one stone and the third heap contains at least two stones).\nShe wants to get the maximum number of stones, but she doesn't know what to do. Initially, she has $0$ stones. Can you help her?\nNote\nFor the first test case in the first test, Alice can take two stones from the second heap and four stones from the third heap, making the second operation two times. Then she can take one stone from the first heap and two stones from the second heap, making the first operation one time. The summary number of stones, that Alice will take is $9$. It is impossible to make some operations to take more than $9$ stones, so the answer is $9$.", "input_specification": "Input\n\nThe first line contains one integer $t$ ($1 \\leq t \\leq 100$) \u00a0\u2014 the number of test cases. Next $t$ lines describe test cases in the following format:\n\nLine contains three non-negative integers $a$, $b$ and $c$, separated by spaces ($0 \\leq a,b,c \\leq 100$)\u00a0\u2014 the number of stones in the first, the second and the third heap, respectively.\n\nIn hacks it is allowed to use only one test case in the input, so $t = 1$ should be satisfied.", "output_specification": "Output\n\nPrint $t$ lines, the answers to the test cases in the same order as in the input. The answer to the test case is the integer \u00a0\u2014 the maximum possible number of stones that Alice can take after making some operations.", "sample_tests": "Example\n\nInput\n3\n3 4 5\n1 0 5\n5 3 2\n\nOutput\n9\n0\n6", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1236/A"}
{"header": "B. Alice and the List of Presents\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Alice got many presents these days. So she decided to pack them into boxes and send them to her friends.\nThere are $n$ kinds of presents. Presents of one kind are identical (i.e. there is no way to distinguish two gifts of the same kind). Presents of different kinds are different (i.e. that is, two gifts of different kinds are distinguishable). The number of presents of each kind, that Alice has is very big, so we can consider Alice has an infinite number of gifts of each kind.\nAlso, there are $m$ boxes. All of them are for different people, so they are pairwise distinct (consider that the names of $m$ friends are written on the boxes). For example, putting the first kind of present into the first box but not into the second box, is different from putting the first kind of present into the second box but not into the first box.\nAlice wants to pack presents with the following rules:\nShe won't pack more than one present of each kind into the same box, so each box should contain presents of different kinds (i.e. each box contains a subset of $n$ kinds, empty boxes are allowed);\nFor each kind at least one present should be packed into some box.\nNow Alice wants to know how many different ways to pack the presents exists. Please, help her and calculate this number. Since the answer can be huge, output it by modulo $10^9+7$.\nSee examples and their notes for clarification.\nNote\nIn the first example, there are seven ways to pack presents:\n$\\{1\\}\\{\\}\\{\\}$\n$\\{\\}\\{1\\}\\{\\}$\n$\\{\\}\\{\\}\\{1\\}$\n$\\{1\\}\\{1\\}\\{\\}$\n$\\{\\}\\{1\\}\\{1\\}$\n$\\{1\\}\\{\\}\\{1\\}$\n$\\{1\\}\\{1\\}\\{1\\}$\nIn the second example there are nine ways to pack presents:\n$\\{\\}\\{1,2\\}$\n$\\{1\\}\\{2\\}$\n$\\{1\\}\\{1,2\\}$\n$\\{2\\}\\{1\\}$\n$\\{2\\}\\{1,2\\}$\n$\\{1,2\\}\\{\\}$\n$\\{1,2\\}\\{1\\}$\n$\\{1,2\\}\\{2\\}$\n$\\{1,2\\}\\{1,2\\}$\nFor example, the way $\\{2\\}\\{2\\}$ is wrong, because presents of the first kind should be used in the least one box.", "input_specification": "Input\n\nThe first line contains two integers $n$ and $m$, separated by spaces ($1 \\leq n,m \\leq 10^9$)\u00a0\u2014 the number of kinds of presents and the number of boxes that Alice has.", "output_specification": "Output\n\nPrint one integer \u00a0\u2014 the number of ways to pack the presents with Alice's rules, calculated by modulo $10^9+7$", "sample_tests": "Examples\n\nInput\n1 3\n\nOutput\n7\n\nInput\n2 2\n\nOutput\n9", "difficulty": 1500, "url": "https://codeforces.com/problemset/problem/1236/B"}
{"header": "C. Labs\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "In order to do some research, $n^2$ labs are built on different heights of a mountain. Let's enumerate them with integers from $1$ to $n^2$, such that the lab with the number $1$ is at the lowest place, the lab with the number $2$ is at the second-lowest place, $\\ldots$, the lab with the number $n^2$ is at the highest place.\nTo transport water between the labs, pipes are built between every pair of labs. A pipe can transport at most one unit of water at a time from the lab with the number $u$ to the lab with the number $v$ if $u > v$.\nNow the labs need to be divided into $n$ groups, each group should contain exactly $n$ labs. The labs from different groups can transport water to each other. The sum of units of water that can be sent from a group $A$ to a group $B$ is equal to the number of pairs of labs ($u, v$) such that the lab with the number $u$ is from the group $A$, the lab with the number $v$ is from the group $B$ and $u > v$. Let's denote this value as $f(A,B)$ (i.e. $f(A,B)$ is the sum of units of water that can be sent from a group $A$ to a group $B$).\nFor example, if $n=3$ and there are $3$ groups $X$, $Y$ and $Z$: $X = \\{1, 5, 6\\}, Y = \\{2, 4, 9\\}$ and $Z = \\{3, 7, 8\\}$. In this case, the values of $f$ are equal to:\n$f(X,Y)=4$ because of $5 \\rightarrow 2$, $5 \\rightarrow 4$, $6 \\rightarrow 2$, $6 \\rightarrow 4$,\n$f(X,Z)=2$ because of $5 \\rightarrow 3$, $6 \\rightarrow 3$,\n$f(Y,X)=5$ because of $2 \\rightarrow 1$, $4 \\rightarrow 1$, $9 \\rightarrow 1$, $9 \\rightarrow 5$, $9 \\rightarrow 6$,\n$f(Y,Z)=4$ because of $4 \\rightarrow 3$, $9 \\rightarrow 3$, $9 \\rightarrow 7$, $9 \\rightarrow 8$,\n$f(Z,X)=7$ because of $3 \\rightarrow 1$, $7 \\rightarrow 1$, $7 \\rightarrow 5$, $7 \\rightarrow 6$, $8 \\rightarrow 1$, $8 \\rightarrow 5$, $8 \\rightarrow 6$,\n$f(Z,Y)=5$ because of $3 \\rightarrow 2$, $7 \\rightarrow 2$, $7 \\rightarrow 4$, $8 \\rightarrow 2$, $8 \\rightarrow 4$.\nPlease, divide labs into $n$ groups with size $n$, such that the value $\\min f(A,B)$ over all possible pairs of groups $A$ and $B$ ($A \\neq B$) is\nmaximal\n.\nIn other words, divide labs into $n$ groups with size $n$, such that minimum number of the sum of units of water that can be transported from a group $A$ to a group $B$ for every pair of different groups $A$ and $B$ ($A \\neq B$) as big as possible.\nNote, that the example above doesn't demonstrate an optimal division, but it demonstrates how to calculate the values $f$ for some division.\nIf there are many optimal divisions, you can find any.\nNote\nIn the first test we can divide $9$ labs into groups $\\{2, 8, 5\\}, \\{9, 3, 4\\}, \\{7, 6, 1\\}$.\nFrom the first group to the second group we can transport $4$ units of water ($8 \\rightarrow 3, 8 \\rightarrow 4, 5 \\rightarrow 3, 5 \\rightarrow 4$).\nFrom the first group to the third group we can transport $5$ units of water ($2 \\rightarrow 1, 8 \\rightarrow 7, 8 \\rightarrow 6, 8 \\rightarrow 1, 5 \\rightarrow 1$).\nFrom the second group to the first group we can transport $5$ units of water ($9 \\rightarrow 2, 9 \\rightarrow 8, 9 \\rightarrow 5, 3 \\rightarrow 2, 4 \\rightarrow 2$).\nFrom the second group to the third group we can transport $5$ units of water ($9 \\rightarrow 7, 9 \\rightarrow 6, 9 \\rightarrow 1, 3 \\rightarrow 1, 4 \\rightarrow 1$).\nFrom the third group to the first group we can transport $4$ units of water ($7 \\rightarrow 2, 7 \\rightarrow 5, 6 \\rightarrow 2, 6 \\rightarrow 5$).\nFrom the third group to the second group we can transport $4$ units of water ($7 \\rightarrow 3, 7 \\rightarrow 4, 6 \\rightarrow 3, 6 \\rightarrow 4$).\nThe minimal number of the sum of units of water, that can be transported from one group to another is equal to $4$. It can be proved, that it is impossible to make a better division.", "input_specification": "Input\n\nThe only line contains one number $n$ ($2 \\leq n \\leq 300$).", "output_specification": "Output\n\nOutput $n$ lines:\n\nIn the $i$-th line print $n$ numbers, the numbers of labs of the $i$-th group, in any order you want.\n\nIf there are multiple answers, that maximize the minimum number of the sum of units of water that can be transported from one group the another, you can print any.", "sample_tests": "Example\n\nInput\n3\n\nOutput\n2 8 5\n9 3 4\n7 6 1", "difficulty": 1300, "url": "https://codeforces.com/problemset/problem/1236/C"}
{"header": "A. Pasha and Pixels\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Pasha loves his phone and also putting his hair up... But the hair is now irrelevant.\nPasha has installed a new game to his phone. The goal of the game is following. There is a rectangular field consisting of\nn\nrow with\nm\npixels in each row. Initially, all the pixels are colored white. In one move, Pasha can choose any pixel and color it black. In particular, he can choose the pixel that is already black, then after the boy's move the pixel does not change, that is, it remains black. Pasha loses the game when a\n2\u2009\u00d7\u20092\nsquare consisting of black pixels is formed.\nPasha has made a plan of\nk\nmoves, according to which he will paint pixels. Each turn in his plan is represented as a pair of numbers\ni\nand\nj\n, denoting respectively the row and the column of the pixel to be colored on the current move.\nDetermine whether Pasha loses if he acts in accordance with his plan, and if he does, on what move the\n2\u2009\u00d7\u20092\nsquare consisting of black pixels is formed.", "input_specification": "Input\n\nThe first line of the input contains three integers *n* ,\u2009 *m* ,\u2009 *k* ( 1\u2009\u2264\u2009 *n* ,\u2009 *m* \u2009\u2264\u20091000 , 1\u2009\u2264\u2009 *k* \u2009\u2264\u200910 5 )\u00a0\u2014 the number of rows, the number of columns and the number of moves that Pasha is going to perform. \n\nThe next *k* lines contain Pasha's moves in the order he makes them. Each line contains two integers *i* and *j* ( 1\u2009\u2264\u2009 *i* \u2009\u2264\u2009 *n* , 1\u2009\u2264\u2009 *j* \u2009\u2264\u2009 *m* ), representing the row number and column number of the pixel that was painted during a move.", "output_specification": "Output\n\nIf Pasha loses, print the number of the move when the 2\u2009\u00d7\u20092 square consisting of black pixels is formed.\n\nIf Pasha doesn't lose, that is, no 2\u2009\u00d7\u20092 square consisting of black pixels is formed during the given *k* moves, print 0 .", "sample_tests": "Examples\n\nInput\n2 2 41 11 22 12 2\n\nOutput\n4\n\nInput\n2 3 62 32 21 32 21 21 1\n\nOutput\n5\n\nInput\n5 3 72 31 21 14 13 15 33 2\n\nOutput\n0", "difficulty": 1100, "url": "https://codeforces.com/problemset/problem/508/A"}
{"header": "B. Anton and currency you all know\n\ntime limit per test\n 0.5 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Berland, 2016. The exchange rate of\ncurrency you all know\nagainst the burle has increased so much that to simplify the calculations, its fractional part was neglected and the exchange rate is now assumed to be an integer.\nReliable sources have informed the financier Anton of some information about the exchange rate of\ncurrency you all know\nagainst the burle for tomorrow. Now Anton knows that tomorrow the exchange rate will be an even number, which can be obtained from the present rate by swapping exactly two distinct digits in it. Of all the possible values that meet these conditions, the exchange rate for tomorrow will be the maximum possible. It is guaranteed that today the exchange rate is an\nodd\npositive integer\nn\n. Help Anton to determine the exchange rate of\ncurrency you all know\nfor tomorrow!", "input_specification": "Input\n\nThe first line contains an odd positive integer *n* \u00a0\u2014 the exchange rate of currency you all know for today. The length of number *n* 's representation is within range from 2 to 10 5 , inclusive. The representation of *n* doesn't contain any leading zeroes.", "output_specification": "Output\n\nIf the information about tomorrow's exchange rate is inconsistent, that is, there is no integer that meets the condition, print \u2009-\u20091 .\n\nOtherwise, print the exchange rate of currency you all know against the burle for tomorrow. This should be the maximum possible number of those that are even and that are obtained from today's exchange rate by swapping exactly two digits. Exchange rate representation should not contain leading zeroes.", "sample_tests": "Examples\n\nInput\n527\n\nOutput\n572\n\nInput\n4573\n\nOutput\n3574\n\nInput\n1357997531\n\nOutput\n-1", "difficulty": 1300, "url": "https://codeforces.com/problemset/problem/508/B"}
{"header": "C. Anya and Ghosts\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Anya loves to watch horror movies. In the best traditions of horror, she will be visited by\nm\nghosts tonight. Anya has lots of candles prepared for the visits, each candle can produce light for exactly\nt\nseconds. It takes the girl one second to light one candle. More formally, Anya can spend one second to light one candle, then this candle burns for exactly\nt\nseconds and then goes out and can no longer be used.\nFor each of the\nm\nghosts Anya knows the time at which it comes: the\ni\n-th visit will happen\nw\ni\nseconds after midnight, all\nw\ni\n's are distinct. Each visit lasts exactly one second.\nWhat is the minimum number of candles Anya should use so that during each visit, at least\nr\ncandles are burning? Anya can start to light a candle at any time that is integer number of seconds from midnight, possibly, at the time before midnight.\nThat means, she can start to light a candle integer number of seconds before midnight or integer number of seconds after a midnight, or in other words in any integer moment of time.\nNote\nAnya can start lighting a candle in the same second with ghost visit. But this candle isn't counted as burning at this visit.\nIt takes exactly one second to light up a candle and only after that second this candle is considered burning; it means that if Anya starts lighting candle at moment x, candle is buring from second x + 1 to second x + t inclusively.\nIn the first sample test three candles are enough. For example, Anya can start lighting them at the\n3\n-rd,\n5\n-th and\n7\n-th seconds after the midnight.\nIn the second sample test one candle is enough. For example, Anya can start lighting it one second before the midnight.\nIn the third sample test the answer is\n-\u20091\n, since during each second at most one candle can burn but Anya needs three candles to light up the room at the moment when the ghost comes.", "input_specification": "Input\n\nThe first line contains three integers *m* , *t* , *r* ( 1\u2009\u2264\u2009 *m* ,\u2009 *t* ,\u2009 *r* \u2009\u2264\u2009300 ), representing the number of ghosts to visit Anya, the duration of a candle's burning and the minimum number of candles that should burn during each visit. \n\nThe next line contains *m* space-separated numbers *w* *i* ( 1\u2009\u2264\u2009 *i* \u2009\u2264\u2009 *m* , 1\u2009\u2264\u2009 *w* *i* \u2009\u2264\u2009300 ), the *i* -th of them repesents at what second after the midnight the *i* -th ghost will come. All *w* *i* 's are distinct, they follow in the strictly increasing order.", "output_specification": "Output\n\nIf it is possible to make at least *r* candles burn during each visit, then print the minimum number of candles that Anya needs to light for that.\n\nIf that is impossible, print \u2009-\u20091 .", "sample_tests": "Examples\n\nInput\n1 8 310\n\nOutput\n3\n\nInput\n2 10 15 8\n\nOutput\n1\n\nInput\n1 1 310\n\nOutput\n-1", "difficulty": 1600, "url": "https://codeforces.com/problemset/problem/508/C"}
{"header": "A. Drinks Choosing\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Old timers of Summer Informatics School can remember previous camps in which each student was given a drink of his choice on the vechorka (late-evening meal). Or may be the story was more complicated?\nThere are $n$ students living in a building, and for each of them the favorite drink $a_i$ is known. So you know $n$ integers $a_1, a_2, \\dots, a_n$, where $a_i$ ($1 \\le a_i \\le k$) is the type of the favorite drink of the $i$-th student. The drink types are numbered from $1$ to $k$.\nThere are infinite number of drink sets. Each set consists of\nexactly two\nportions of the same drink. In other words, there are $k$ types of drink sets, the $j$-th type contains two portions of the drink $j$. The available number of sets of each of the $k$ types is infinite.\nYou know that students will receive the minimum possible number of sets to give all students exactly one drink. Obviously, the number of sets will be exactly $\\lceil \\frac{n}{2} \\rceil$, where $\\lceil x \\rceil$ is $x$ rounded up.\nAfter students receive the sets, they will distribute their portions by their choice: each student will get exactly one portion. Note, that if $n$ is odd then one portion will remain unused and the students' teacher will drink it.\nWhat is the maximum number of students that can get their favorite drink if $\\lceil \\frac{n}{2} \\rceil$ sets will be chosen optimally and students will distribute portions between themselves optimally?\nNote\nIn the first example, students could choose three sets with drinks $1$, $1$ and $2$ (so they will have two sets with two drinks of the type $1$ each and one set with two drinks of the type $2$, so portions will be $1, 1, 1, 1, 2, 2$). This way all students except the second one will get their favorite drinks.\nAnother possible answer is sets with drinks $1$, $2$ and $3$. In this case the portions will be $1, 1, 2, 2, 3, 3$. Then all the students except one will gain their favorite drinks. The only student that will not gain the favorite drink will be a student with $a_i = 1$ (i.e. the first, the third or the fourth).", "input_specification": "Input\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n, k \\le 1\\,000$) \u2014 the number of students in the building and the number of different drinks.\n\nThe next $n$ lines contain student's favorite drinks. The $i$-th line contains a single integer from $1$ to $k$ \u2014 the type of the favorite drink of the $i$-th student.", "output_specification": "Output\n\nPrint exactly one integer \u2014 the maximum number of students that can get a favorite drink.", "sample_tests": "Examples\n\nInput\n5 3\n1\n3\n1\n1\n2\n\nOutput\n4\n\nInput\n10 3\n2\n1\n3\n2\n3\n3\n1\n3\n1\n2\n\nOutput\n9", "difficulty": 1000, "url": "https://codeforces.com/problemset/problem/1195/A"}
{"header": "B. Sport Mafia\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Each evening after the dinner the SIS's students gather together to play the game of Sport Mafia.\nFor the tournament, Alya puts candies into the box, which will serve as a prize for a winner. To do that, she performs $n$ actions. The first action performed is to put a single candy into the box. For each of the remaining moves she can choose from two options:\nthe first option, in case the box contains at least one candy, is to take\nexactly one candy out and eat it\n. This way the number of candies in the box decreased by $1$;\nthe second option is to put candies in the box. In this case, Alya will put $1$ more candy, than she put in the previous time.\nThus, if the box is empty, then it can only use the second option.\nFor example, one possible sequence of Alya's actions look as follows:\nput one candy into the box;\nput two candies into the box;\neat one candy from the box;\neat one candy from the box;\nput three candies into the box;\neat one candy from the box;\nput four candies into the box;\neat one candy from the box;\nput five candies into the box;\nThis way she will perform $9$ actions, the number of candies at the end will be $11$, while Alya will eat $4$ candies in total.\nYou know the total number of actions $n$ and the number of candies at the end $k$. You need to find the total number of sweets Alya ate. That is the number of moves of the first option. It's guaranteed, that for the given $n$ and $k$ the answer always exists.\nPlease note, that during an action of the first option, Alya takes out and eats exactly one candy.\nNote\nIn the first example, Alya has made one move only. According to the statement, the first move is always putting one candy in the box. Hence Alya ate $0$ candies.\nIn the second example the possible sequence of Alya's actions looks as follows:\nput $1$ candy,\nput $2$ candies,\neat a candy,\neat a candy,\nput $3$ candies,\neat a candy,\nput $4$ candies,\neat a candy,\nput $5$ candies.\nThis way, she will make exactly $n=9$ actions and in the end the box will contain $1+2-1-1+3-1+4-1+5=11$ candies. The answer is $4$, since she ate $4$ candies in total.", "input_specification": "Input\n\nThe first line contains two integers $n$ and $k$ ($1 \\le n \\le 10^9$; $0 \\le k \\le 10^9$)\u00a0\u2014 the total number of moves and the number of candies in the box at the end. \n\nIt's guaranteed, that for the given $n$ and $k$ the answer exists.", "output_specification": "Output\n\nPrint a single integer\u00a0\u2014 the number of candies, which Alya ate. Please note, that in this problem there aren't multiple possible answers\u00a0\u2014 the answer is unique for any input data.", "sample_tests": "Examples\n\nInput\n1 1\n\nOutput\n0\n\nInput\n9 11\n\nOutput\n4\n\nInput\n5 0\n\nOutput\n3\n\nInput\n3 2\n\nOutput\n1", "difficulty": 1000, "url": "https://codeforces.com/problemset/problem/1195/B"}
{"header": "C. Basketball Exercise\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Finally, a basketball court has been opened in SIS, so Demid has decided to hold a basketball exercise session. $2 \\cdot n$ students have come to Demid's exercise session, and he lined up them into two rows of the same size (there are exactly $n$ people in each row). Students are numbered from $1$ to $n$ in each row in order from left to right.\nNow Demid wants to choose a team to play basketball. He will choose players from left to right, and the index of each chosen player (excluding the first one\ntaken\n) will be strictly greater than the index of the previously chosen player. To avoid giving preference to one of the rows, Demid chooses students in such a way that no consecutive chosen students belong to the same row. The first student can be chosen among all $2n$ students (there are no additional constraints), and a team can consist of any number of students.\nDemid thinks, that in order to compose a perfect team, he should choose students in such a way, that the total height of all chosen students is maximum possible. Help Demid to find the maximum possible total height of players in a team he can choose.\nNote\nIn the first example Demid can choose the following team as follows:\nIn the second example Demid can choose the following team as follows:", "input_specification": "Input\n\nThe first line of the input contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of students in each row.\n\nThe second line of the input contains $n$ integers $h_{1, 1}, h_{1, 2}, \\ldots, h_{1, n}$ ($1 \\le h_{1, i} \\le 10^9$), where $h_{1, i}$ is the height of the $i$-th student in the first row.\n\nThe third line of the input contains $n$ integers $h_{2, 1}, h_{2, 2}, \\ldots, h_{2, n}$ ($1 \\le h_{2, i} \\le 10^9$), where $h_{2, i}$ is the height of the $i$-th student in the second row.", "output_specification": "Output\n\nPrint a single integer \u2014 the maximum possible total height of players in a team Demid can choose.", "sample_tests": "Examples\n\nInput\n5\n9 3 5 7 3\n5 8 1 4 5\n\nOutput\n29\n\nInput\n3\n1 2 9\n10 1 1\n\nOutput\n19\n\nInput\n1\n7\n4\n\nOutput\n7", "difficulty": 1400, "url": "https://codeforces.com/problemset/problem/1195/C"}
{"header": "C. Basketball Exercise\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Finally, a basketball court has been opened in SIS, so Demid has decided to hold a basketball exercise session. $2 \\cdot n$ students have come to Demid's exercise session, and he lined up them into two rows of the same size (there are exactly $n$ people in each row). Students are numbered from $1$ to $n$ in each row in order from left to right.\nNow Demid wants to choose a team to play basketball. He will choose players from left to right, and the index of each chosen player (excluding the first one\ntaken\n) will be strictly greater than the index of the previously chosen player. To avoid giving preference to one of the rows, Demid chooses students in such a way that no consecutive chosen students belong to the same row. The first student can be chosen among all $2n$ students (there are no additional constraints), and a team can consist of any number of students.\nDemid thinks, that in order to compose a perfect team, he should choose students in such a way, that the total height of all chosen students is maximum possible. Help Demid to find the maximum possible total height of players in a team he can choose.\nNote\nIn the first example Demid can choose the following team as follows:\nIn the second example Demid can choose the following team as follows:", "input_specification": "Input\n\nThe first line of the input contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of students in each row.\n\nThe second line of the input contains $n$ integers $h_{1, 1}, h_{1, 2}, \\ldots, h_{1, n}$ ($1 \\le h_{1, i} \\le 10^9$), where $h_{1, i}$ is the height of the $i$-th student in the first row.\n\nThe third line of the input contains $n$ integers $h_{2, 1}, h_{2, 2}, \\ldots, h_{2, n}$ ($1 \\le h_{2, i} \\le 10^9$), where $h_{2, i}$ is the height of the $i$-th student in the second row.", "output_specification": "Output\n\nPrint a single integer \u2014 the maximum possible total height of players in a team Demid can choose.", "sample_tests": "Examples\n\nInput\n5\n9 3 5 7 3\n5 8 1 4 5\n\nOutput\n29\n\nInput\n3\n1 2 9\n10 1 1\n\nOutput\n19\n\nInput\n1\n7\n4\n\nOutput\n7", "difficulty": 1400, "url": "https://codeforces.com/problemset/problem/1195/D"}
{"header": "E. OpenStreetMap\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Seryozha conducts a course dedicated to building a map of heights of Stepanovo recreation center. He laid a rectangle grid of size $n \\times m$ cells on a map (rows of grid are numbered from $1$ to $n$ from north to south, and columns are numbered from $1$ to $m$ from west to east). After that he measured the average height of each cell above Rybinsk sea level and obtained a matrix of heights of size $n \\times m$. The cell $(i, j)$ lies on the intersection of the $i$-th row and the $j$-th column and has height $h_{i, j}$.\nSeryozha is going to look at the result of his work in the browser. The screen of Seryozha's laptop can fit a subrectangle of size $a \\times b$ of matrix of heights ($1 \\le a \\le n$, $1 \\le b \\le m$). Seryozha tries to decide how the weather can affect the recreation center \u2014 for example, if it rains, where all the rainwater will gather. To do so, he is going to find the cell having minimum height among all cells that are shown on the screen of his laptop.\nHelp Seryozha to calculate the sum of heights of such cells for all possible subrectangles he can see on his screen. In other words, you have to calculate the sum of minimum heights in submatrices of size $a \\times b$ with top left corners in $(i, j)$ over all $1 \\le i \\le n - a + 1$ and $1 \\le j \\le m - b + 1$.\nConsider the sequence $g_i = (g_{i - 1} \\cdot x + y) \\bmod z$. You are given integers $g_0$, $x$, $y$ and $z$. By miraculous coincidence, $h_{i, j} = g_{(i - 1) \\cdot m + j - 1}$ ($(i - 1) \\cdot m + j - 1$ is the index).\nNote\nThe matrix from the first example:", "input_specification": "Input\n\nThe first line of the input contains four integers $n$, $m$, $a$ and $b$ ($1 \\le n, m \\le 3\\,000$, $1 \\le a \\le n$, $1 \\le b \\le m$) \u2014 the number of rows and columns in the matrix Seryozha has, and the number of rows and columns that can be shown on the screen of the laptop, respectively.\n\nThe second line of the input contains four integers $g_0$, $x$, $y$ and $z$ ($0 \\le g_0, x, y < z \\le 10^9$).", "output_specification": "Output\n\nPrint a single integer \u2014 the answer to the problem.", "sample_tests": "Example\n\nInput\n3 4 2 1\n1 2 3 59\n\nOutput\n111", "difficulty": 2100, "url": "https://codeforces.com/problemset/problem/1195/E"}
{"header": "A. Almost Increasing Subsequence\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "A sequence is\nalmost-increasing\nif it does not contain three\nconsecutive\nelements $x, y, z$ such that $x\\ge y\\ge z$.\nYou are given an array $a_1, a_2, \\dots, a_n$ and $q$ queries.\nEach query consists of two integers $1\\le l\\le r\\le n$. For each query, find the length of the longest\nalmost-increasing\nsubsequence of the subarray $a_l, a_{l+1}, \\dots, a_r$.\nA subsequence is a sequence that can be derived from the given sequence by deleting zero or more elements without changing the order of the remaining elements.\nNote\nIn the first query, the subarray is $a_1, a_2, a_3 = [1,2,4]$. The whole subarray is almost-increasing, so the answer is $3$.\nIn the second query, the subarray is $a_1, a_2, a_3,a_4 = [1,2,4,3]$. The whole subarray is a almost-increasing, because there are no three consecutive elements such that $x \\geq y \\geq z$. So the answer is $4$.\nIn the third query, the subarray is $a_2, a_3, a_4, a_5 = [2, 4, 3, 3]$. The whole subarray is not almost-increasing, because the last three elements satisfy $4 \\geq 3 \\geq 3$. An almost-increasing subsequence of length $3$ can be found (for example taking $a_2,a_3,a_5 = [2,4,3]$ ). So the answer is $3$.", "input_specification": "Input\n\nThe first line of input contains two integers, $n$ and $q$ ($1 \\leq n, q \\leq 200\\,000$) \u00a0\u2014 the length of the array $a$ and the number of queries.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\leq a_i \\leq 10^9$) \u00a0\u2014 the values of the array $a$.\n\nEach of the next $q$ lines contains the description of a query. Each line contains two integers $l$ and $r$ ($1 \\leq l \\leq r \\leq n$) \u00a0\u2014 the query is about the subarray $a_l, a_{l+1}, \\dots, a_r$.", "output_specification": "Output\n\nFor each of the $q$ queries, print a line containing the length of the longest almost-increasing subsequence of the subarray $a_l, a_{l+1}, \\dots, a_r$.", "sample_tests": "Example\n\nInput\n9 8\n1 2 4 3 3 5 6 2 1\n1 3\n1 4\n2 5\n6 6\n3 7\n7 8\n1 8\n8 8\n\nOutput\n3\n4\n3\n1\n4\n2\n7\n1", "difficulty": 1500, "url": "https://codeforces.com/problemset/problem/1817/A"}
{"header": "B. Fish Graph\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given a simple undirected graph with $n$ nodes and $m$ edges. Note that the graph is not necessarily connected. The nodes are labeled from $1$ to $n$.\nWe define a graph to be a\nFish Graph\nif it contains a simple cycle with a special node $u$ belonging to the cycle. Apart from the edges in the cycle, the graph should have exactly $2$ extra edges. Both edges should connect to node $u$, but they should not be connected to any other node of the cycle.\nDetermine if the graph contains a subgraph that is a Fish Graph, and if so, find any such subgraph.\nIn this problem, we define a subgraph as a graph obtained by taking any subset of the edges of the original graph.\nVisualization of example 1. The red edges form one possible subgraph that is a Fish Graph.\nNote\nIn the first example, a possible valid subgraph contains the cycle $1 \\rightarrow 2 \\rightarrow 3 \\rightarrow 4 \\rightarrow 1$. The special node of this cycle is node $4$. The two extra edges $4 - 5$ and $4 - 6$ are both connected to $4$, completing the Fish Graph.\nIn the second example, a possible valid subgraph contains the cycle $1 \\rightarrow 3 \\rightarrow 4 \\rightarrow 1$. The special node of this cycle is node $3$. The two extra edges $3 - 2$ and $3 - 5$ are both connected to $3$, completing the Fish Graph.\nIn the last example, it can be proven that there is no valid subgraph.", "input_specification": "Input\n\nThe first line of input contains the integer $t$ ($1 \\leq t \\leq 1000$), the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains two integers, $n$ and $m$ ($1 \\le n, m \\le 2\\,000$)\u00a0\u2014 the number of nodes and the number of edges.\n\nEach of the next $m$ lines contains the description of an edge. Each line contains two integers $u_i$ and $v_i$ ($1 \\leq u_i, v_i \\leq n$, $u_i\\neq v_i$)\u00a0\u2014 an edge connects node $u_i$ to node $v_i$.\n\nIt is guaranteed that no two edges connect the same unordered pair of nodes.\n\nFurthermore, it is guaranteed that the sum of $n$ and the sum of $m$ over all test cases both do not exceed $2\\,000$.", "output_specification": "Output\n\nFor each testcase, output \" YES \" if the graph contains a subgraph that is a Fish Graph, otherwise print \" NO \". If the answer is \" YES \", on the following lines output a description of the subgraph.\n\nThe first line of the description contains one integer $k$ \u2014 the number of edges of the subgraph. \n\nOn the next $k$ lines, output the edges of the chosen subgraph. Each of the $k$ lines should contains two integers $u$ and $v$ ($1\\le u, v\\le n$, $u\\neq v$) \u2014 the edge between $u$ and $v$ belongs to the subgraph. The order in which $u$ and $v$ are printed does not matter, as long as the two nodes are connected by an edge in the original graph. The order in which you print the edges does not matter, as long as the resulting subgraph is a fish graph.\n\nIf there are multiple solutions, print any.", "sample_tests": "Example\n\nInput\n\n3\n\n7 8\n\n1 2\n\n2 3\n\n3 4\n\n4 1\n\n4 5\n\n4 6\n\n4 2\n\n6 7\n\n7 7\n\n6 7\n\n1 2\n\n2 3\n\n3 4\n\n4 1\n\n1 3\n\n3 5\n\n4 4\n\n1 3\n\n3 4\n\n4 1\n\n1 2\n\nOutput\nYES\n6\n5 4\n6 4\n4 3\n1 4\n2 1\n3 2\nYES\n5\n5 3\n2 3\n3 1\n4 3\n1 4\nNO", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/1817/B"}
{"header": "A. Array\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Vitaly has an array of\nn\ndistinct integers. Vitaly wants to divide this array into three\nnon-empty\nsets so as the following conditions hold:\nThe product of all numbers in the first set is less than zero\n(\u2009<\u20090)\n.\nThe product of all numbers in the second set is greater than zero\n(\u2009>\u20090)\n.\nThe product of all numbers in the third set is equal to zero.\nEach number from the initial array must occur in exactly one set.\nHelp Vitaly. Divide the given array.", "input_specification": "Input\n\nThe first line of the input contains integer *n* (3\u2009\u2264\u2009 *n* \u2009\u2264\u2009100) . The second line contains *n* space-separated distinct integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* (| *a* *i* |\u2009\u2264\u200910 3 ) \u2014 the array elements.", "output_specification": "Output\n\nIn the first line print integer *n* 1 ( *n* 1 \u2009>\u20090) \u2014 the number of elements in the first set. Then print *n* 1 numbers \u2014 the elements that got to the first set.\n\nIn the next line print integer *n* 2 ( *n* 2 \u2009>\u20090) \u2014 the number of elements in the second set. Then print *n* 2 numbers \u2014 the elements that got to the second set.\n\nIn the next line print integer *n* 3 ( *n* 3 \u2009>\u20090) \u2014 the number of elements in the third set. Then print *n* 3 numbers \u2014 the elements that got to the third set.\n\nThe printed sets must meet the described conditions. It is guaranteed that the solution exists. If there are several solutions, you are allowed to print any of them.", "sample_tests": "Examples\n\nInput\n3-1 2 0\n\nOutput\n1 -11 21 0\n\nInput\n4-1 -2 -3 0\n\nOutput\n1 -12 -3 -21 0", "difficulty": 1100, "url": "https://codeforces.com/problemset/problem/300/A"}
{"header": "B. Coach\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "A programming coach has\nn\nstudents to teach. We know that\nn\nis divisible by\n3\n. Let's assume that all students are numbered from\n1\nto\nn\n, inclusive.\nBefore the university programming championship the coach wants to split all students into groups of three. For some pairs of students we know that they want to be on the same team. Besides, if the\ni\n-th student wants to be on the same team with the\nj\n-th one, then the\nj\n-th student wants to be on the same team with the\ni\n-th one. The coach wants the teams to show good results, so he wants the following condition to hold: if the\ni\n-th student wants to be on the same team with the\nj\n-th, then the\ni\n-th and the\nj\n-th students must be on the same team. Also, it is obvious that each student must be on exactly one team.\nHelp the coach and divide the teams the way he wants.", "input_specification": "Input\n\nThe first line of the input contains integers *n* and *m* (3\u2009\u2264\u2009 *n* \u2009\u2264\u200948 , . Then follow *m* lines, each contains a pair of integers *a* *i* ,\u2009 *b* *i* (1\u2009\u2264\u2009 *a* *i* \u2009<\u2009 *b* *i* \u2009\u2264\u2009 *n* ) \u2014 the pair *a* *i* ,\u2009 *b* *i* means that students with numbers *a* *i* and *b* *i* want to be on the same team.\n\nIt is guaranteed that *n* is divisible by 3 . It is guaranteed that each pair *a* *i* ,\u2009 *b* *i* occurs in the input at most once.", "output_specification": "Output\n\nIf the required division into teams doesn't exist, print number -1 . Otherwise, print lines. In each line print three integers *x* *i* , *y* *i* , *z* *i* ( 1\u2009\u2264\u2009 *x* *i* ,\u2009 *y* *i* ,\u2009 *z* *i* \u2009\u2264\u2009 *n* ) \u2014 the *i* -th team. \n\nIf there are multiple answers, you are allowed to print any of them.", "sample_tests": "Examples\n\nInput\n3 0\n\nOutput\n3 2 1 \n\nInput\n6 41 22 33 45 6\n\nOutput\n-1\n\nInput\n3 31 22 31 3\n\nOutput\n3 2 1", "difficulty": 1500, "url": "https://codeforces.com/problemset/problem/300/B"}
{"header": "C. Beautiful Numbers\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Vitaly is a very weird man. He's got two favorite digits\na\nand\nb\n. Vitaly calls a positive integer\ngood\n, if the decimal representation of this integer only contains digits\na\nand\nb\n. Vitaly calls a good number\nexcellent\n, if the sum of its digits is a good number.\nFor example, let's say that Vitaly's favourite digits are\n1\nand\n3\n, then number\n12\nisn't good and numbers\n13\nor\n311\nare. Also, number\n111\nis excellent and number\n11\nisn't.\nNow Vitaly is wondering, how many excellent numbers of length exactly\nn\nare there. As this number can be rather large, he asks you to count the remainder after dividing it by\n1000000007\n(10\n9\n+\u20097)\n.\nA number's length is the number of digits in its decimal representation without leading zeroes.", "input_specification": "Input\n\nThe first line contains three integers: *a* , *b* , *n* (1\u2009\u2264\u2009 *a* \u2009<\u2009 *b* \u2009\u2264\u20099,\u20091\u2009\u2264\u2009 *n* \u2009\u2264\u200910 6 ) .", "output_specification": "Output\n\nPrint a single integer \u2014 the answer to the problem modulo 1000000007 (10 9 \u2009+\u20097) .", "sample_tests": "Examples\n\nInput\n1 3 3\n\nOutput\n1\n\nInput\n2 3 10\n\nOutput\n165", "difficulty": 1800, "url": "https://codeforces.com/problemset/problem/300/C"}
{"header": "A. Elections\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "As you know, majority of students and teachers of Summer Informatics School live in Berland for the most part of the year. Since corruption there is quite widespread, the following story is not uncommon.\nElections are coming. You know the number of voters and the number of parties\u00a0\u2014 $n$ and $m$ respectively. For each voter you know the party he is going to vote for. However, he can easily change his vote given a certain amount of money. In particular, if you give $i$-th voter $c_i$ bytecoins you can ask him to vote for any other party you choose.\nThe United Party of Berland has decided to perform a statistical study\u00a0\u2014 you need to calculate the minimum number of bytecoins the Party needs to spend to ensure its victory. In order for a party to win the elections, it needs to receive strictly more votes than any other party.\nNote\nIn the first sample, The United Party wins the elections even without buying extra votes.\nIn the second sample, The United Party can buy the votes of the first and the fourth voter. This way The Party gets two votes, while parties $3$, $4$ and $5$ get one vote and party number $2$ gets no votes.\nIn the third sample, The United Party can buy the votes of the first three voters and win, getting three votes against two votes of the fifth party.", "input_specification": "Input\n\nThe first line of input contains two integers $n$ and $m$ ($1 \\le n, m \\le 3000$)\u00a0\u2014 the number of voters and the number of parties respectively.\n\nEach of the following $n$ lines contains two integers $p_i$ and $c_i$ ($1 \\le p_i \\le m$, $1 \\le c_i \\le 10^9$)\u00a0\u2014 the index of this voter's preferred party and the number of bytecoins needed for him to reconsider his decision.\n\nThe United Party of Berland has the index $1$.", "output_specification": "Output\n\nPrint a single number\u00a0\u2014 the minimum number of bytecoins needed for The United Party of Berland to win the elections.", "sample_tests": "Examples\n\nInput\n1 21 100\n\nOutput\n0\n\nInput\n5 52 1003 2004 3005 4005 900\n\nOutput\n500\n\nInput\n5 52 1003 2004 3005 8005 900\n\nOutput\n600", "difficulty": 1700, "url": "https://codeforces.com/problemset/problem/1019/A"}
{"header": "B. The hat\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "This is an interactive problem.\nImur Ishakov decided to organize a club for people who love to play the famous game \u00abThe hat\u00bb. The club was visited by\nn\nstudents, where\nn\nis even. Imur arranged them all in a circle and held a draw to break the students in pairs, but something went wrong. The participants are numbered so that participant\ni\nand participant\ni\n+\u20091\n(\n1\u2009\u2264\ni\n\u2264\nn\n-\u20091\n) are adjacent, as well as participant\nn\nand participant\n1\n. Each student was given a piece of paper with a number in such a way, that for every two adjacent students, these numbers differ exactly by one. The plan was to form students with the same numbers in a pair, but it turned out that not all numbers appeared exactly twice.\nAs you know, the most convenient is to explain the words to the partner when he is sitting exactly across you. Students with numbers\ni\nand\nsit across each other. Imur is wondering if there are two people sitting across each other with the same numbers given. Help him to find such pair of people if it exists.\nYou can ask questions of form \u00abwhich number was received by student\ni\n?\u00bb, and the goal is to determine whether the desired pair exists in no more than\n60\nquestions.\nNote\nInput-output in statements illustrates example interaction.\nIn the first sample the selected sequence is\n1,\u20092,\u20091,\u20092,\u20093,\u20094,\u20093,\u20092\nIn the second sample the selection sequence is\n1,\u20092,\u20093,\u20092,\u20091,\u20090\n.", "input_specification": "Input\n\nAt the beginning the even integer *n* ( 2\u2009\u2264\u2009 *n* \u2009\u2264\u2009100\u2009000 ) is given\u00a0\u2014 the total number of students.\n\nYou are allowed to ask no more than 60 questions.", "output_specification": "Output\n\nTo ask the question about the student *i* ( 1\u2009\u2264\u2009 *i* \u2009\u2264\u2009 *n* ), you should print \u00ab ? *i* \u00bb. Then from standard output you can read the number *a* *i* received by student *i* ( \u2009-\u200910 9 \u2009\u2264\u2009 *a* *i* \u2009\u2264\u200910 9 ).\n\nWhen you find the desired pair, you should print \u00ab ! *i* \u00bb, where *i* is any student who belongs to the pair ( 1\u2009\u2264\u2009 *i* \u2009\u2264\u2009 *n* ). If you determined that such pair doesn't exist, you should output \u00ab ! -1 \u00bb. In both cases you should immediately terminate the program.\n\nThe query that contains your answer is not counted towards the limit of 60 queries.\n\nPlease make sure to flush the standard output after each command. For example, in C++ use function fflush(stdout) , in Java call System.out.flush() , in Pascal use flush(output) and stdout.flush() for Python language.\n\nHacking\n\nUse the following format for hacking:\n\nIn the first line, print one even integer *n* ( 2\u2009\u2264\u2009 *n* \u2009\u2264\u2009100\u2009000 )\u00a0\u2014 the total number of students.\n\nIn the second line print *n* integers *a* *i* ( \u2009-\u200910 9 \u2009\u2264\u2009 *a* *i* \u2009\u2264\u200910 9 ) separated by spaces, where *a* *i* is the number to give to *i* -th student. Any two adjacent elements, including *n* and 1 , must differ by 1 or \u2009-\u20091 .\n\nThe hacked solution will not have direct access to the sequence *a* *i* .", "sample_tests": "Examples\n\nInput\n822\n\nOutput\n? 4? 8! 4\n\nInput\n6123 210\n\nOutput\n? 1? 2? 3? 4? 5? 6! -1", "difficulty": 2000, "url": "https://codeforces.com/problemset/problem/1019/B"}
{"header": "A. Xenia and Divisors\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Xenia the mathematician has a sequence consisting of\nn\n(\nn\nis divisible by 3) positive integers, each of them is at most 7. She wants to split the sequence into groups of three so that for each group of three\na\n,\nb\n,\nc\nthe following conditions held:\na\n<\nb\n<\nc\n;\na\ndivides\nb\n,\nb\ndivides\nc\n.\nNaturally, Xenia wants each element of the sequence to belong to exactly one group of three. Thus, if the required partition exists, then it has\ngroups of three.\nHelp Xenia, find the required partition or else say that it doesn't exist.", "input_specification": "Input\n\nThe first line contains integer *n* (3\u2009\u2264\u2009 *n* \u2009\u2264\u200999999) \u2014 the number of elements in the sequence. The next line contains *n* positive integers, each of them is at most 7.\n\nIt is guaranteed that *n* is divisible by 3.", "output_specification": "Output\n\nIf the required partition exists, print groups of three. Print each group as values of the elements it contains. You should print values in increasing order. Separate the groups and integers in groups by whitespaces. If there are multiple solutions, you can print any of them.\n\nIf there is no solution, print -1.", "sample_tests": "Examples\n\nInput\n61 1 1 2 2 2\n\nOutput\n-1\n\nInput\n62 2 1 1 4 6\n\nOutput\n1 2 41 2 6", "difficulty": 1200, "url": "https://codeforces.com/problemset/problem/342/A"}
{"header": "B. Xenia and Spies\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Xenia the vigorous detective faced\nn\n(\nn\n\u2265\u20092)\nforeign spies lined up in a row. We'll consider the spies numbered from 1 to\nn\nfrom left to right.\nSpy\ns\nhas an important note. He has to pass the note to spy\nf\n. Xenia interrogates the spies in several steps. During one step the spy keeping the important note can pass the note to one of his neighbours in the row. In other words, if this spy's number is\nx\n, he can pass the note to another spy, either\nx\n-\u20091\nor\nx\n+\u20091\n(if\nx\n=\u20091\nor\nx\n=\nn\n, then the spy has only one neighbour). Also during a step the spy can keep a note and not pass it to anyone.\nBut nothing is that easy. During\nm\nsteps Xenia watches some spies attentively. Specifically, during step\nt\ni\n(steps are numbered from 1) Xenia watches spies numbers\nl\ni\n,\nl\ni\n+\u20091,\nl\ni\n+\u20092,\u2009...,\nr\ni\n(1\u2009\u2264\nl\ni\n\u2264\nr\ni\n\u2264\nn\n)\n. Of course, if during some step a spy is watched, he can't do anything: neither give the note nor take it from some other spy. Otherwise, Xenia reveals the spies' cunning plot. Nevertheless, if the spy at the current step keeps the note, Xenia sees nothing suspicious even if she watches him.\nYou've got\ns\nand\nf\n. Also, you have the steps during which Xenia watches spies and which spies she is going to watch during each step. Find the best way the spies should act in order to pass the note from spy\ns\nto spy\nf\nas quickly as possible (in the minimum number of steps).", "input_specification": "Input\n\nThe first line contains four integers *n* , *m* , *s* and *f* (1\u2009\u2264\u2009 *n* ,\u2009 *m* \u2009\u2264\u200910 5 ;\u00a01\u2009\u2264\u2009 *s* ,\u2009 *f* \u2009\u2264\u2009 *n* ;\u00a0 *s* \u2009\u2260\u2009 *f* ;\u00a0 *n* \u2009\u2265\u20092) . Each of the following *m* lines contains three integers *t* *i* ,\u2009 *l* *i* ,\u2009 *r* *i* (1\u2009\u2264\u2009 *t* *i* \u2009\u2264\u200910 9 ,\u20091\u2009\u2264\u2009 *l* *i* \u2009\u2264\u2009 *r* *i* \u2009\u2264\u2009 *n* ) . It is guaranteed that *t* 1 \u2009<\u2009 *t* 2 \u2009<\u2009 *t* 3 \u2009<\u2009...\u2009<\u2009 *t* *m* .", "output_specification": "Output\n\nPrint *k* characters in a line: the *i* -th character in the line must represent the spies' actions on step *i* . If on step *i* the spy with the note must pass the note to the spy with a lesser number, the *i* -th character should equal \" L \". If on step *i* the spy with the note must pass it to the spy with a larger number, the *i* -th character must equal \" R \". If the spy must keep the note at the *i* -th step, the *i* -th character must equal \" X \".\n\nAs a result of applying the printed sequence of actions spy *s* must pass the note to spy *f* . The number of printed characters *k* must be as small as possible. Xenia must not catch the spies passing the note.\n\nIf there are miltiple optimal solutions, you can print any of them. It is guaranteed that the answer exists.", "sample_tests": "Examples\n\nInput\n3 5 1 31 1 22 2 33 3 34 1 110 1 3\n\nOutput\nXXRR", "difficulty": 1500, "url": "https://codeforces.com/problemset/problem/342/B"}
{"header": "C. Cupboard and Balloons\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "A girl named Xenia has a cupboard that looks like an arc from ahead. The arc is made of a semicircle with radius\nr\n(the cupboard's top) and two walls of height\nh\n(the cupboard's sides). The cupboard's depth is\nr\n, that is, it looks like a rectangle with base\nr\nand height\nh\n+\nr\nfrom the sides. The figure below shows what the cupboard looks like (the front view is on the left, the side view is on the right).\nXenia got lots of balloons for her birthday. The girl hates the mess, so she wants to store the balloons in the cupboard. Luckily, each balloon is a sphere with radius\n. Help Xenia calculate the maximum number of balloons she can put in her cupboard.\nYou can say that a balloon is in the cupboard if you can't see any part of the balloon on the left or right view. The balloons in the cupboard can touch each other. It is not allowed to squeeze the balloons or deform them in any way. You can assume that the cupboard's walls are negligibly thin.", "input_specification": "Input\n\nThe single line contains two integers *r* ,\u2009 *h* (1\u2009\u2264\u2009 *r* ,\u2009 *h* \u2009\u2264\u200910 7 ) .", "output_specification": "Output\n\nPrint a single integer \u2014 the maximum number of balloons Xenia can put in the cupboard.", "sample_tests": "Examples\n\nInput\n1 1\n\nOutput\n3\n\nInput\n1 2\n\nOutput\n5\n\nInput\n2 1\n\nOutput\n2", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/342/C"}
{"header": "D. Xenia and Dominoes\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Xenia likes puzzles very much. She is especially fond of the puzzles that consist of domino pieces. Look at the picture that shows one of such puzzles.\nA puzzle is a\n3\u2009\u00d7\nn\ntable with forbidden cells (black squares) containing dominoes (colored rectangles on the picture). A puzzle is called\ncorrect\nif it meets the following conditions:\neach domino occupies exactly two non-forbidden cells of the table;\nno two dominoes occupy the same table cell;\nexactly one non-forbidden cell of the table is unoccupied by any domino (it is marked by a circle in the picture).\nTo solve the puzzle, you need multiple steps to transport an empty cell from the starting position to some specified position. A move is transporting a domino to the empty cell, provided that the puzzle stays correct.\nThe horizontal dominoes can be moved only horizontally, and vertical dominoes can be moved only vertically. You can't rotate dominoes.\nThe picture shows a probable move.\nXenia has a\n3\u2009\u00d7\nn\ntable with forbidden cells and a cell marked with a circle. Also, Xenia has very many identical dominoes. Now Xenia is wondering, how many distinct correct puzzles she can make if she puts dominoes on the existing table. Also, Xenia wants the circle-marked cell to be empty in the resulting puzzle. The puzzle must contain at least one move.\nHelp Xenia, count the described number of puzzles. As the described number can be rather large, print the remainder after dividing it by\n1000000007\n(10\n9\n+\u20097)\n.\nNote\nTwo puzzles are considered distinct if there is a pair of cells that contain one domino in one puzzle and do not contain it in the other one.", "input_specification": "Input\n\nThe first line contains integer *n* (3\u2009\u2264\u2009 *n* \u2009\u2264\u200910 4 ) \u2014 the puzzle's size. Each of the following three lines contains *n* characters \u2014 the description of the table. The *j* -th character of the *i* -th line equals \" X \" if the corresponding cell is forbidden; it equals \" . \", if the corresponding cell is non-forbidden and \" O \", if the corresponding cell is marked with a circle.\n\nIt is guaranteed that exactly one cell in the table is marked with a circle. It is guaranteed that all cells of a given table having at least one common point with the marked cell is non-forbidden.", "output_specification": "Output\n\nPrint a single number \u2014 the answer to the problem modulo 1000000007 (10 9 \u2009+\u20097) .", "sample_tests": "Examples\n\nInput\n5....X.O......X.\n\nOutput\n1\n\nInput\n5......O........\n\nOutput\n2\n\nInput\n3........O\n\nOutput\n4", "difficulty": 2100, "url": "https://codeforces.com/problemset/problem/342/D"}
{"header": "A. Level Statistics\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Polycarp has recently created a new level in this cool new game Berlio Maker 85 and uploaded it online. Now players from all over the world can try his level.\nAll levels in this game have two stats to them: the number of plays and the number of clears. So when a player attempts the level, the number of plays increases by $1$. If he manages to finish the level successfully then the number of clears increases by $1$ as well.\nNote that both of the statistics update at the same time\n(so if the player finishes the level successfully then the number of plays will increase at the same time as the number of clears).\nPolycarp is very excited about his level, so he keeps peeking at the stats to know how hard his level turns out to be.\nSo he peeked at the stats $n$ times and wrote down $n$ pairs of integers \u2014 $(p_1, c_1), (p_2, c_2), \\dots, (p_n, c_n)$, where $p_i$ is the number of plays at the $i$-th moment of time and $c_i$ is the number of clears at the same moment of time.\nThe stats are given in chronological order\n(i.e. the order of given pairs is exactly the same as Polycarp has written down).\nBetween two consecutive moments of time Polycarp peeked at the stats many players (but possibly zero) could attempt the level.\nFinally, Polycarp wonders if he hasn't messed up any records and all the pairs are correct. If there could exist such a sequence of plays (and clears, respectively) that the stats were exactly as Polycarp has written down, then he considers his records correct.\nHelp him to check the correctness of his records.\nFor your convenience you have to answer multiple independent test cases.\nNote\nIn the first test case at the third moment of time the number of clears increased but the number of plays did not, that couldn't have happened.\nThe second test case is a nice example of a Super Expert level.\nIn the third test case the number of plays decreased, which is impossible.\nThe fourth test case is probably an auto level with a single jump over the spike.\nIn the fifth test case the number of clears decreased, which is also impossible.\nNobody wanted to play the sixth test case; Polycarp's mom attempted it to make him feel better, however, she couldn't clear it.", "input_specification": "Input\n\nThe first line contains a single integer $T$ $(1 \\le T \\le 500)$ \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 100$) \u2014 the number of moments of time Polycarp peeked at the stats.\n\nEach of the next $n$ lines contains two integers $p_i$ and $c_i$ ($0 \\le p_i, c_i \\le 1000$) \u2014 the number of plays and the number of clears of the level at the $i$-th moment of time.\n\nNote that the stats are given in chronological order.", "output_specification": "Output\n\nFor each test case print a single line.\n\nIf there could exist such a sequence of plays (and clears, respectively) that the stats were exactly as Polycarp has written down, then print \" YES \".\n\nOtherwise, print \" NO \".\n\nYou can print each letter in any case (upper or lower).", "sample_tests": "Example\n\nInput\n6\n3\n0 0\n1 1\n1 2\n2\n1 0\n1000 3\n4\n10 1\n15 2\n10 2\n15 2\n1\n765 432\n2\n4 4\n4 3\n5\n0 0\n1 0\n1 0\n1 0\n1 0\n\nOutput\nNO\nYES\nNO\nYES\nNO\nYES", "difficulty": 1200, "url": "https://codeforces.com/problemset/problem/1334/A"}
{"header": "B. Middle Class\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Many years ago Berland was a small country where only $n$ people lived. Each person had some savings: the $i$-th one had $a_i$ burles.\nThe government considered a person as wealthy if he had at least $x$ burles. To increase the number of wealthy people Berland decided to carry out several reforms. Each reform looked like that:\nthe government chooses some subset of people (maybe all of them);\nthe government takes all savings from the chosen people and redistributes the savings among the chosen people equally.\nFor example, consider the savings as list $[5, 1, 2, 1]$: if the government chose the $1$-st and the $3$-rd persons then it, at first, will take all $5 + 2 = 7$ burles and after that will return $3.5$ burles to the chosen people. As a result, the savings will become $[3.5, 1, 3.5, 1]$.\nA lot of data was lost from that time, so we don't know how many reforms were implemented and to whom. All we can do is ask you to calculate the maximum possible number of wealthy people after several (maybe zero) reforms.\nNote\nThe first test case is described in the statement.\nIn the second test case, the government, for example, could carry out two reforms: $[\\underline{11}, \\underline{9}, 11, 9] \\rightarrow [10, 10, \\underline{11}, \\underline{9}] \\rightarrow [10, 10, 10, 10]$.\nIn the third test case, the government couldn't make even one person wealthy.\nIn the fourth test case, the government could choose all people to carry out a reform: $[\\underline{9}, \\underline{4}, \\underline{9}] \\rightarrow [7\\frac{1}{3}, 7\\frac{1}{3}, 7\\frac{1}{3}]$.", "input_specification": "Input\n\nThe first line contains single integer $T$ ($1 \\le T \\le 1000$) \u2014 the number of test cases.\n\nNext $2T$ lines contain the test cases \u2014 two lines per test case. The first line contains two integers $n$ and $x$ ($1 \\le n \\le 10^5$, $1 \\le x \\le 10^9$) \u2014 the number of people and the minimum amount of money to be considered as wealthy.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the initial savings of each person.\n\nIt's guaranteed that the total sum of $n$ doesn't exceed $10^5$.", "output_specification": "Output\n\nPrint $T$ integers \u2014 one per test case. For each test case print the maximum possible number of wealthy people after several (maybe zero) reforms.", "sample_tests": "Example\n\nInput\n4\n4 3\n5 1 2 1\n4 10\n11 9 11 9\n2 5\n4 3\n3 7\n9 4 9\n\nOutput\n2\n4\n0\n3", "difficulty": 1100, "url": "https://codeforces.com/problemset/problem/1334/B"}
{"header": "C. Circle of Monsters\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are playing another computer game, and now you have to slay $n$ monsters. These monsters are standing in a circle, numbered clockwise from $1$ to $n$. Initially, the $i$-th monster has $a_i$ health.\nYou may shoot the monsters to kill them. Each shot requires exactly one bullet and decreases the health of the targeted monster by $1$ (deals $1$ damage to it). Furthermore, when the health of some monster $i$ becomes $0$ or less than $0$, it dies and explodes, dealing $b_i$ damage to the next monster (monster $i + 1$, if $i < n$, or monster $1$, if $i = n$). If the next monster is already dead, then nothing happens. If the explosion kills the next monster, it explodes too, damaging the monster after it and possibly triggering another explosion, and so on.\nYou have to calculate the minimum number of bullets you have to fire to kill all $n$ monsters in the circle.", "input_specification": "Input\n\nThe first line contains one integer $T$ ($1 \\le T \\le 150000$) \u2014 the number of test cases.\n\nThen the test cases follow, each test case begins with a line containing one integer $n$ ($2 \\le n \\le 300000$) \u2014 the number of monsters. Then $n$ lines follow, each containing two integers $a_i$ and $b_i$ ($1 \\le a_i, b_i \\le 10^{12}$) \u2014 the parameters of the $i$-th monster in the circle.\n\nIt is guaranteed that the total number of monsters in all test cases does not exceed $300000$.", "output_specification": "Output\n\nFor each test case, print one integer \u2014 the minimum number of bullets you have to fire to kill all of the monsters.", "sample_tests": "Example\n\nInput\n1\n3\n7 15\n2 14\n5 3\n\nOutput\n6", "difficulty": 1600, "url": "https://codeforces.com/problemset/problem/1334/C"}
{"header": "D. Minimum Euler Cycle\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given a\ncomplete directed\ngraph $K_n$ with $n$ vertices: each pair of vertices $u \\neq v$ in $K_n$ have both directed edges $(u, v)$ and $(v, u)$; there are no self-loops.\nYou should find such a cycle in $K_n$ that visits every directed edge exactly once (allowing for revisiting vertices).\nWe can write such cycle as a list of $n(n - 1) + 1$ vertices $v_1, v_2, v_3, \\dots, v_{n(n - 1) - 1}, v_{n(n - 1)}, v_{n(n - 1) + 1} = v_1$ \u2014 a visiting order, where each $(v_i, v_{i + 1})$ occurs exactly once.\nFind the\nlexicographically smallest\nsuch cycle. It's not hard to prove that the cycle always exists.\nSince the answer can be too large print its $[l, r]$ segment, in other words, $v_l, v_{l + 1}, \\dots, v_r$.\nNote\nIn the second test case, the lexicographically minimum cycle looks like: $1, 2, 1, 3, 2, 3, 1$.\nIn the third test case, it's quite obvious that the cycle should start and end in vertex $1$.", "input_specification": "Input\n\nThe first line contains the single integer $T$ ($1 \\le T \\le 100$) \u2014 the number of test cases.\n\nNext $T$ lines contain test cases \u2014 one per line. The first and only line of each test case contains three integers $n$, $l$ and $r$ ($2 \\le n \\le 10^5$, $1 \\le l \\le r \\le n(n - 1) + 1$, $r - l + 1 \\le 10^5$) \u2014 the number of vertices in $K_n$, and segment of the cycle to print.\n\nIt's guaranteed that the total sum of $n$ doesn't exceed $10^5$ and the total sum of $r - l + 1$ doesn't exceed $10^5$.", "output_specification": "Output\n\nFor each test case print the segment $v_l, v_{l + 1}, \\dots, v_r$ of the lexicographically smallest cycle that visits every edge exactly once.", "sample_tests": "Example\n\nInput\n3\n2 1 3\n3 3 6\n99995 9998900031 9998900031\n\nOutput\n1 2 1 \n1 3 2 3 \n1", "difficulty": 1800, "url": "https://codeforces.com/problemset/problem/1334/D"}
{"header": "E. Divisor Paths\n\ntime limit per test\n 3 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given a positive integer $D$. Let's build the following graph from it:\neach vertex is a divisor of $D$ (not necessarily prime, $1$ and $D$ itself are also included);\ntwo vertices $x$ and $y$ ($x > y$) have an undirected edge between them if $x$ is divisible by $y$ and $\\frac x y$ is a prime;\nthe weight of an edge is the number of divisors of $x$ that are not divisors of $y$.\nFor example, here is the graph for $D=12$:\nEdge $(4,12)$ has weight $3$ because $12$ has divisors $[1,2,3,4,6,12]$ and $4$ has divisors $[1,2,4]$. Thus, there are $3$ divisors of $12$ that are not divisors of $4$ \u2014 $[3,6,12]$.\nThere is no edge between $3$ and $2$ because $3$ is not divisible by $2$. There is no edge between $12$ and $3$ because $\\frac{12}{3}=4$ is not a prime.\nLet the length of the path between some vertices $v$ and $u$ in the graph be the total weight of edges on it. For example, path $[(1, 2), (2, 6), (6, 12), (12, 4), (4, 2), (2, 6)]$ has length $1+2+2+3+1+2=11$. The empty path has length $0$.\nSo the shortest path between two vertices $v$ and $u$ is the path that has the minimal possible length.\nTwo paths $a$ and $b$ are different if there is either a different number of edges in them or there is a position $i$ such that $a_i$ and $b_i$ are different edges.\nYou are given $q$ queries of the following form:\n$v$ $u$ \u2014 calculate the\nnumber of the shortest paths\nbetween vertices $v$ and $u$.\nThe answer for each query might be large so print it modulo $998244353$.\nNote\nIn the first example:\nThe first query is only the empty path \u2014 length $0$;\nThe second query are paths $[(12, 4), (4, 2), (2, 1)]$ (length $3+1+1=5$), $[(12, 6), (6, 2), (2, 1)]$ (length $2+2+1=5$) and $[(12, 6), (6, 3), (3, 1)]$ (length $2+2+1=5$).\nThe third query is only the path $[(3, 1), (1, 2), (2, 4)]$ (length $1+1+1=3$).", "input_specification": "Input\n\nThe first line contains a single integer $D$ ($1 \\le D \\le 10^{15}$) \u2014 the number the graph is built from.\n\nThe second line contains a single integer $q$ ($1 \\le q \\le 3 \\cdot 10^5$) \u2014 the number of queries.\n\nEach of the next $q$ lines contains two integers $v$ and $u$ ($1 \\le v, u \\le D$). It is guaranteed that $D$ is divisible by both $v$ and $u$ (both $v$ and $u$ are divisors of $D$).", "output_specification": "Output\n\nPrint $q$ integers \u2014 for each query output the number of the shortest paths between the two given vertices modulo $998244353$.", "sample_tests": "Examples\n\nInput\n12\n3\n4 4\n12 1\n3 4\n\nOutput\n1\n3\n1\n\nInput\n1\n1\n1 1\n\nOutput\n1\n\nInput\n288807105787200\n4\n46 482955026400\n12556830686400 897\n414 12556830686400\n4443186242880 325\n\nOutput\n547558588\n277147129\n457421435\n702277623", "difficulty": 2200, "url": "https://codeforces.com/problemset/problem/1334/E"}
{"header": "A. Greg's Workout\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Greg is a beginner bodybuilder. Today the gym coach gave him the training plan. All it had was\nn\nintegers\na\n1\n,\na\n2\n,\u2009...,\na\nn\n. These numbers mean that Greg needs to do exactly\nn\nexercises today. Besides, Greg should repeat the\ni\n-th in order exercise\na\ni\ntimes.\nGreg now only does three types of exercises: \"chest\" exercises, \"biceps\" exercises and \"back\" exercises. Besides, his training is cyclic, that is, the first exercise he does is a \"chest\" one, the second one is \"biceps\", the third one is \"back\", the fourth one is \"chest\", the fifth one is \"biceps\", and so on to the\nn\n-th exercise.\nNow Greg wonders, which muscle will get the most exercise during his training. We know that the exercise Greg repeats the maximum number of times, trains the corresponding muscle the most. Help Greg, determine which muscle will get the most training.\nNote\nIn the first sample Greg does 2 chest, 8 biceps and zero back exercises, so the biceps gets the most exercises.\nIn the second sample Greg does 5 chest, 1 biceps and 10 back exercises, so the back gets the most exercises.\nIn the third sample Greg does 18 chest, 12 biceps and 8 back exercises, so the chest gets the most exercise.", "input_specification": "Input\n\nThe first line contains integer *n* (1\u2009\u2264\u2009 *n* \u2009\u2264\u200920) . The second line contains *n* integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* (1\u2009\u2264\u2009 *a* *i* \u2009\u2264\u200925) \u2014 the number of times Greg repeats the exercises.", "output_specification": "Output\n\nPrint word \" chest \" (without the quotes), if the chest gets the most exercise, \" biceps \" (without the quotes), if the biceps gets the most exercise and print \" back \" (without the quotes) if the back gets the most exercise.\n\nIt is guaranteed that the input is such that the answer to the problem is unambiguous .", "sample_tests": "Examples\n\nInput\n22 8\n\nOutput\nbiceps\n\nInput\n35 1 10\n\nOutput\nback\n\nInput\n73 3 2 7 9 6 8\n\nOutput\nchest", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/255/A"}
{"header": "B. Code Parsing\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Little Vitaly loves different algorithms. Today he has invented a new algorithm just for you. Vitaly's algorithm works with string\ns\n, consisting of characters \"\nx\n\" and \"\ny\n\", and uses two following operations at runtime:\nFind two consecutive characters in the string, such that the first of them equals \"\ny\n\", and the second one equals \"\nx\n\" and swap them. If there are several suitable pairs of characters, we choose the pair of characters that is located closer to the beginning of the string.\nFind in the string two consecutive characters, such that the first of them equals \"\nx\n\" and the second one equals \"\ny\n\". Remove these characters from the string. If there are several suitable pairs of characters, we choose the pair of characters that is located closer to the beginning of the string.\nThe input for the new algorithm is string\ns\n, and the algorithm works as follows:\nIf you can apply at least one of the described operations to the string, go to step 2 of the algorithm. Otherwise, stop executing the algorithm and print the current string.\nIf you can apply operation 1, then apply it. Otherwise, apply operation 2. After you apply the operation, go to step 1 of the algorithm.\nNow Vitaly wonders, what is going to be printed as the result of the algorithm's work, if the input receives string\ns\n.\nNote\nIn the first test the algorithm will end after the first step of the algorithm, as it is impossible to apply any operation. Thus, the string won't change.\nIn the second test the transformation will be like this:\nstring \"\nyxyxy\n\" transforms into string \"\nxyyxy\n\";\nstring \"\nxyyxy\n\" transforms into string \"\nxyxyy\n\";\nstring \"\nxyxyy\n\" transforms into string \"\nxxyyy\n\";\nstring \"\nxxyyy\n\" transforms into string \"\nxyy\n\";\nstring \"\nxyy\n\" transforms into string \"\ny\n\".\nAs a result, we've got string \"\ny\n\".\nIn the third test case only one transformation will take place: string \"\nxxxxxy\n\" transforms into string \"\nxxxx\n\". Thus, the answer will be string \"\nxxxx\n\".", "input_specification": "Input\n\nThe first line contains a non-empty string *s* . \n\nIt is guaranteed that the string only consists of characters \" x \" and \" y \". It is guaranteed that the string consists of at most 10 6 characters. It is guaranteed that as the result of the algorithm's execution won't be an empty string.", "output_specification": "Output\n\nIn the only line print the string that is printed as the result of the algorithm's work, if the input of the algorithm input receives string *s* .", "sample_tests": "Examples\n\nInput\nx\n\nOutput\nx\n\nInput\nyxyxy\n\nOutput\ny\n\nInput\nxxxxxy\n\nOutput\nxxxx", "difficulty": 1200, "url": "https://codeforces.com/problemset/problem/255/B"}
{"header": "C. Almost Arithmetical Progression\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Gena loves sequences of numbers. Recently, he has discovered a new type of sequences which he called an almost arithmetical progression. A sequence is an\nalmost arithmetical progression\n, if its elements can be represented as:\na\n1\n=\np\n, where\np\nis some integer;\na\ni\n=\na\ni\n-\u20091\n+\u2009(\u2009-\u20091)\ni\n+\u20091\n\u00b7\nq\n(\ni\n>\u20091)\n, where\nq\nis some integer.\nRight now Gena has a piece of paper with sequence\nb\n, consisting of\nn\nintegers. Help Gena, find there the longest subsequence of integers that is an almost arithmetical progression.\nSequence\ns\n1\n,\ns\n2\n,\u2009\u2009...,\ns\nk\nis a subsequence of sequence\nb\n1\n,\nb\n2\n,\u2009\u2009...,\nb\nn\n, if there is such increasing sequence of indexes\ni\n1\n,\ni\n2\n,\u2009...,\ni\nk\n(1\u2009\u2009\u2264\ni\n1\n<\ni\n2\n<\u2009... \u2009\u2009<\ni\nk\n\u2264\nn\n)\n, that\nb\ni\nj\n=\ns\nj\n. In other words, sequence\ns\ncan be obtained from\nb\nby crossing out some elements.\nNote\nIn the first test the sequence actually is the suitable subsequence.\nIn the second test the following subsequence fits:\n10,\u200920,\u200910\n.", "input_specification": "Input\n\nThe first line contains integer *n* (1\u2009\u2264\u2009 *n* \u2009\u2264\u20094000) . The next line contains *n* integers *b* 1 ,\u2009 *b* 2 ,\u2009...,\u2009 *b* *n* (1\u2009\u2264\u2009 *b* *i* \u2009\u2264\u200910 6 ) .", "output_specification": "Output\n\nPrint a single integer \u2014 the length of the required longest subsequence.", "sample_tests": "Examples\n\nInput\n23 5\n\nOutput\n2\n\nInput\n410 20 10 30\n\nOutput\n3", "difficulty": 1500, "url": "https://codeforces.com/problemset/problem/255/C"}
{"header": "D. Mr. Bender and Square\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Mr. Bender has a digital table of size\nn\n\u00d7\nn\n, each cell can be switched on or off. He wants the field to have at least\nc\nswitched on squares. When this condition is fulfilled, Mr Bender will be happy.\nWe'll consider the table rows numbered from top to bottom from 1 to\nn\n, and the columns \u2014 numbered from left to right from 1 to\nn\n. Initially there is exactly one switched on cell with coordinates\n(\nx\n,\ny\n)\n(\nx\nis the row number,\ny\nis the column number), and all other cells are switched off. Then each second we switch on the cells that are off but have the side-adjacent cells that are on.\nFor a cell with coordinates\n(\nx\n,\ny\n)\nthe side-adjacent cells are cells with coordinates\n(\nx\n-\u20091,\ny\n)\n,\n(\nx\n+\u20091,\ny\n)\n,\n(\nx\n,\ny\n-\u20091)\n,\n(\nx\n,\ny\n+\u20091)\n.\nIn how many seconds will Mr. Bender get happy?\nNote\nInitially the first test has one painted cell, so the answer is 0. In the second test all events will go as is shown on the figure.\n.", "input_specification": "Input\n\nThe first line contains four space-separated integers *n* ,\u2009 *x* ,\u2009 *y* ,\u2009 *c* (1\u2009\u2264\u2009 *n* ,\u2009 *c* \u2009\u2264\u200910 9 ;\u00a01\u2009\u2264\u2009 *x* ,\u2009 *y* \u2009\u2264\u2009 *n* ;\u00a0 *c* \u2009\u2264\u2009 *n* 2 ) .", "output_specification": "Output\n\nIn a single line print a single integer \u2014 the answer to the problem.", "sample_tests": "Examples\n\nInput\n6 4 3 1\n\nOutput\n0\n\nInput\n9 3 8 10\n\nOutput\n2", "difficulty": 1800, "url": "https://codeforces.com/problemset/problem/255/D"}
{"header": "E. Furlo and Rublo and Game\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Furlo and Rublo play a game. The table has\nn\npiles of coins lying on it, the\ni\n-th pile has\na\ni\ncoins. Furlo and Rublo move in turns, Furlo moves first. In one move you are allowed to:\nchoose some pile, let's denote the current number of coins in it as\nx\n;\nchoose some integer\ny\n(0\u2009\u2264\ny\n<\nx\n;\nx\n1\u2009/\u20094\n\u2264\ny\n\u2264\nx\n1\u2009/\u20092\n)\nand decrease the number of coins in this pile to\ny\n. In other words, after the described move the pile will have\ny\ncoins left.\nThe player who can't make a move, loses.\nYour task is to find out, who wins in the given game if both Furlo and Rublo play optimally well.", "input_specification": "Input\n\nThe first line contains integer *n* (1\u2009\u2264\u2009 *n* \u2009\u2264\u200977777) \u2014 the number of piles. The next line contains *n* integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* (1\u2009\u2264\u2009 *a* *i* \u2009\u2264\u2009777777777777) \u2014 the sizes of piles. The numbers are separated by single spaces.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin , cout streams or the %I64d specifier.", "output_specification": "Output\n\nIf both players play optimally well and Furlo wins, print \" Furlo \", otherwise print \" Rublo \". Print the answers without the quotes.", "sample_tests": "Examples\n\nInput\n11\n\nOutput\nRublo\n\nInput\n21 2\n\nOutput\nRublo\n\nInput\n101 2 3 4 5 6 7 8 9 10\n\nOutput\nFurlo", "difficulty": 2200, "url": "https://codeforces.com/problemset/problem/255/E"}
{"header": "E. Furlo and Rublo and Game\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Furlo and Rublo play a game. The table has\nn\npiles of coins lying on it, the\ni\n-th pile has\na\ni\ncoins. Furlo and Rublo move in turns, Furlo moves first. In one move you are allowed to:\nchoose some pile, let's denote the current number of coins in it as\nx\n;\nchoose some integer\ny\n(0\u2009\u2264\ny\n<\nx\n;\nx\n1\u2009/\u20094\n\u2264\ny\n\u2264\nx\n1\u2009/\u20092\n)\nand decrease the number of coins in this pile to\ny\n. In other words, after the described move the pile will have\ny\ncoins left.\nThe player who can't make a move, loses.\nYour task is to find out, who wins in the given game if both Furlo and Rublo play optimally well.", "input_specification": "Input\n\nThe first line contains integer *n* (1\u2009\u2264\u2009 *n* \u2009\u2264\u200977777) \u2014 the number of piles. The next line contains *n* integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* (1\u2009\u2264\u2009 *a* *i* \u2009\u2264\u2009777777777777) \u2014 the sizes of piles. The numbers are separated by single spaces.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin , cout streams or the %I64d specifier.", "output_specification": "Output\n\nIf both players play optimally well and Furlo wins, print \" Furlo \", otherwise print \" Rublo \". Print the answers without the quotes.", "sample_tests": "Examples\n\nInput\n11\n\nOutput\nRublo\n\nInput\n21 2\n\nOutput\nRublo\n\nInput\n101 2 3 4 5 6 7 8 9 10\n\nOutput\nFurlo", "difficulty": 2200, "url": "https://codeforces.com/problemset/problem/255/F"}
{"header": "E. Furlo and Rublo and Game\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Furlo and Rublo play a game. The table has\nn\npiles of coins lying on it, the\ni\n-th pile has\na\ni\ncoins. Furlo and Rublo move in turns, Furlo moves first. In one move you are allowed to:\nchoose some pile, let's denote the current number of coins in it as\nx\n;\nchoose some integer\ny\n(0\u2009\u2264\ny\n<\nx\n;\nx\n1\u2009/\u20094\n\u2264\ny\n\u2264\nx\n1\u2009/\u20092\n)\nand decrease the number of coins in this pile to\ny\n. In other words, after the described move the pile will have\ny\ncoins left.\nThe player who can't make a move, loses.\nYour task is to find out, who wins in the given game if both Furlo and Rublo play optimally well.", "input_specification": "Input\n\nThe first line contains integer *n* (1\u2009\u2264\u2009 *n* \u2009\u2264\u200977777) \u2014 the number of piles. The next line contains *n* integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* (1\u2009\u2264\u2009 *a* *i* \u2009\u2264\u2009777777777777) \u2014 the sizes of piles. The numbers are separated by single spaces.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin , cout streams or the %I64d specifier.", "output_specification": "Output\n\nIf both players play optimally well and Furlo wins, print \" Furlo \", otherwise print \" Rublo \". Print the answers without the quotes.", "sample_tests": "Examples\n\nInput\n11\n\nOutput\nRublo\n\nInput\n21 2\n\nOutput\nRublo\n\nInput\n101 2 3 4 5 6 7 8 9 10\n\nOutput\nFurlo", "difficulty": 2200, "url": "https://codeforces.com/problemset/problem/255/G"}
{"header": "E. Furlo and Rublo and Game\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Furlo and Rublo play a game. The table has\nn\npiles of coins lying on it, the\ni\n-th pile has\na\ni\ncoins. Furlo and Rublo move in turns, Furlo moves first. In one move you are allowed to:\nchoose some pile, let's denote the current number of coins in it as\nx\n;\nchoose some integer\ny\n(0\u2009\u2264\ny\n<\nx\n;\nx\n1\u2009/\u20094\n\u2264\ny\n\u2264\nx\n1\u2009/\u20092\n)\nand decrease the number of coins in this pile to\ny\n. In other words, after the described move the pile will have\ny\ncoins left.\nThe player who can't make a move, loses.\nYour task is to find out, who wins in the given game if both Furlo and Rublo play optimally well.", "input_specification": "Input\n\nThe first line contains integer *n* (1\u2009\u2264\u2009 *n* \u2009\u2264\u200977777) \u2014 the number of piles. The next line contains *n* integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* (1\u2009\u2264\u2009 *a* *i* \u2009\u2264\u2009777777777777) \u2014 the sizes of piles. The numbers are separated by single spaces.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin , cout streams or the %I64d specifier.", "output_specification": "Output\n\nIf both players play optimally well and Furlo wins, print \" Furlo \", otherwise print \" Rublo \". Print the answers without the quotes.", "sample_tests": "Examples\n\nInput\n11\n\nOutput\nRublo\n\nInput\n21 2\n\nOutput\nRublo\n\nInput\n101 2 3 4 5 6 7 8 9 10\n\nOutput\nFurlo", "difficulty": 2200, "url": "https://codeforces.com/problemset/problem/255/H"}
{"header": "A. Santa Claus and Candies\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Santa Claus has\nn\ncandies, he dreams to give them as gifts to children.\nWhat is the maximal number of children for whose he can give candies if Santa Claus want each kid should get\ndistinct\npositive integer number of candies. Santa Class wants to give all\nn\ncandies he has.", "input_specification": "Input\n\nThe only line contains positive integer number *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u20091000 ) \u2014 number of candies Santa Claus has.", "output_specification": "Output\n\nPrint to the first line integer number *k* \u2014 maximal number of kids which can get candies.\n\nPrint to the second line *k* distinct integer numbers: number of candies for each of *k* kid. The sum of *k* printed numbers should be exactly *n* .\n\nIf there are many solutions, print any of them.", "sample_tests": "Examples\n\nInput\n5\n\nOutput\n22 3\n\nInput\n9\n\nOutput\n33 5 1\n\nInput\n2\n\nOutput\n12", "difficulty": 1000, "url": "https://codeforces.com/problemset/problem/753/A"}
{"header": "B. Interactive Bulls and Cows (Easy)\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "This problem is a little bit unusual. Here you are to implement an interaction with a testing system. That means that you can make queries and get responses in the online mode. Please be sure to use the stream flushing operation after each query's output in order not to leave part of your output in some buffer. For example, in C++ you've got to use the\nfflush(stdout)\nfunction, in Java \u2014 call\nSystem.out.flush()\n, and in Pascal \u2014\nflush(output)\n.\nBulls and Cows (also known as Cows and Bulls or Pigs and Bulls or Bulls and Cleots) is an old code-breaking paper and pencil game for two players, predating the similar commercially marketed board game Mastermind.\nOn a sheet of paper, the first player thinks a secret string. This string consists only of digits and has the length\n4\n. The digits in the string\nmust\nbe all different, no two or more equal digits are allowed.\nThen the second player tries to guess his opponent's string. For every guess the first player gives the number of matches. If the matching digits are on their right positions, they are \"bulls\", if on different positions, they are \"cows\". Thus a response is a pair of numbers \u2014 the number of \"bulls\" and the number of \"cows\". A try can contain equal digits.\nMore formally, let's the secret string is\ns\nand the second player are trying to guess it with a string\nx\n. The number of \"bulls\" is a number of such positions\ni\n(\n1\u2009\u2264\ni\n\u2264\u20094\n) where\ns\n[\ni\n]\u2009=\nx\n[\ni\n]\n. The number of \"cows\" is a number of such digits\nc\nthat\ns\ncontains\nc\nin the position\ni\n(i.e.\ns\n[\ni\n]\u2009=\nc\n),\nx\ncontains\nc\n, but\nx\n[\ni\n]\u2009\u2260\nc\n.\nFor example, the secret string is \"\n0427\n\", the opponent's try is \"\n0724\n\", then the answer is\n2\nbulls and\n2\ncows (the bulls are \"0\" and \"2\", the cows are \"4\" and \"7\"). If the secret string is \"\n0123\n\", the opponent's try is \"\n0330\n\", then the answer is\n1\nbull and\n1\ncow.\nIn this problem you are to guess the string\ns\nthat the system has chosen. You only know that the chosen string consists of\n4\ndistinct digits.\nYou can make queries to the testing system, each query is the output of a single\n4\n-digit string. The answer to the query is the number of bulls and number of cows. If the system's response equals \"4 0\", that means the interaction with your problem is over and the program must terminate. That is possible for two reasons \u2014 the program either guessed the number\nx\nor made an invalid action (for example, printed letters instead of digits).\nYour program is allowed to do at most\n50\nqueries.\nYou can hack solutions of other participants providing a 4-digit string containing distinct digits \u2014 the secret string.\nNote\nThe secret string\ns\nin the example is \"\n0123\n\".", "input_specification": "Input\n\nTo read answers to the queries, the program must use the standard input.\n\nThe program will receive pairs of non-negative integers in the input, one pair per line. The first number in a pair is a number of bulls and the second one is a number of cows of the string *s* and the string *x* *i* printed by your program. If the system response equals \"4 0\", then your solution should terminate.\n\nThe testing system will let your program read the *i* -th pair of integers from the input only after your program displays the corresponding system query in the output: prints value *x* *i* in a single line and executes operation flush .", "output_specification": "Output\n\nThe program must use the standard output to print queries.\n\nYour program must output requests \u2014 4 -digit strings *x* 1 ,\u2009 *x* 2 ,\u2009... , one per line. After the output of each line the program must execute flush operation. The program should read the answer to the query from the standard input.\n\nYour program is allowed to do at most 50 queries.", "sample_tests": "Examples\n\nInput\n0 12 01 10 42 14 0\n\nOutput\n800001793159321001120123", "difficulty": 1600, "url": "https://codeforces.com/problemset/problem/753/B"}
{"header": "A. Vasya the Hipster\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "One day Vasya the Hipster decided to count how many socks he had. It turned out that he had\na\nred socks and\nb\nblue socks.\nAccording to the latest fashion, hipsters should wear the socks of different colors: a red one on the left foot, a blue one on the right foot.\nEvery day Vasya puts on new socks in the morning and throws them away before going to bed as he doesn't want to wash them.\nVasya wonders, what is the maximum number of days when he can dress fashionable and wear different socks, and after that, for how many days he can then wear the same socks until he either runs out of socks or cannot make a single pair from the socks he's got.\nCan you help him?\nNote\nIn the first sample Vasya can first put on one pair of different socks, after that he has two red socks left to wear on the second day.", "input_specification": "Input\n\nThe single line of the input contains two positive integers *a* and *b* ( 1\u2009\u2264\u2009 *a* ,\u2009 *b* \u2009\u2264\u2009100 ) \u2014 the number of red and blue socks that Vasya's got.", "output_specification": "Output\n\nPrint two space-separated integers \u2014 the maximum number of days when Vasya can wear different socks and the number of days when he can wear the same socks until he either runs out of socks or cannot make a single pair from the socks he's got.\n\nKeep in mind that at the end of the day Vasya throws away the socks that he's been wearing on that day.", "sample_tests": "Examples\n\nInput\n3 1\n\nOutput\n1 1\n\nInput\n2 3\n\nOutput\n2 0\n\nInput\n7 3\n\nOutput\n3 2", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/581/A"}
{"header": "B. Luxurious Houses\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "The capital of Berland has\nn\nmultifloor buildings. The architect who built up the capital was very creative, so all the houses were built in one row.\nLet's enumerate all the houses from left to right, starting with one. A house is considered to be\nluxurious\nif the number of floors in it is strictly greater than in all the houses with larger numbers. In other words, a house is luxurious if the number of floors in it is strictly greater than in all the houses, which are located to the right from it. In this task it is assumed that the heights of floors in the houses are the same.\nThe new architect is interested in\nn\nquestions,\ni\n-th of them is about the following: \"how many floors should be added to the\ni\n-th house to make it luxurious?\" (for all\ni\nfrom\n1\nto\nn\n, inclusive). You need to help him cope with this task.\nNote that all these questions are independent from each other \u2014 the answer to the question for house\ni\ndoes not affect other answers (i.e., the floors to the houses are not actually added).", "input_specification": "Input\n\nThe first line of the input contains a single number *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ) \u2014 the number of houses in the capital of Berland.\n\nThe second line contains *n* space-separated positive integers *h* *i* ( 1\u2009\u2264\u2009 *h* *i* \u2009\u2264\u200910 9 ), where *h* *i* equals the number of floors in the *i* -th house.", "output_specification": "Output\n\nPrint *n* integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* , where number *a* *i* is the number of floors that need to be added to the house number *i* to make it luxurious. If the house is already luxurious and nothing needs to be added to it, then *a* *i* should be equal to zero.\n\nAll houses are numbered from left to right, starting from one.", "sample_tests": "Examples\n\nInput\n51 2 3 1 2\n\nOutput\n3 2 0 2 0 \n\nInput\n43 2 1 4\n\nOutput\n2 3 4 0", "difficulty": 1100, "url": "https://codeforces.com/problemset/problem/581/B"}
{"header": "C. Developing Skills\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Petya loves computer games. Finally a game that he's been waiting for so long came out!\nThe main character of this game has\nn\ndifferent skills, each of which is characterized by an integer\na\ni\nfrom 0 to 100. The higher the number\na\ni\nis, the higher is the\ni\n-th skill of the character. The total rating of the character is calculated as the sum of the values \u200b\u200bof\nfor all\ni\nfrom 1 to\nn\n. The expression\n\u230a\nx\n\u230b\ndenotes the result of rounding the number\nx\ndown\nto the nearest integer.\nAt the beginning of the game Petya got\nk\nimprovement units as a bonus that he can use to increase the skills of his character and his total rating. One improvement unit can increase any skill of Petya's character by exactly one. For example, if\na\n4\n=\u200946\n, after using one imporvement unit to this skill, it becomes equal to 47. A hero's skill cannot rise higher more than 100. Thus, it is permissible that some of the units will remain unused.\nYour task is to determine the optimal way of using the improvement units so as to maximize the overall rating of the character. It is not necessary to use all the improvement units.\nNote\nIn the first test case the optimal strategy is as follows. Petya has to improve the first skill to 10 by spending 3 improvement units, and the second skill to 10, by spending one improvement unit. Thus, Petya spends all his improvement units and the total rating of the character becomes equal to\nlfloor\nfrac\n{100}{10}\nrfloor\n+\nlfloor\nfrac\n{100}{10}\nrfloor\n=\u200910\u2009+\u200910\u2009=\n20.\nIn the second test the optimal strategy for Petya is to improve the first skill to 20 (by spending 3 improvement units) and to improve the third skill to 20 (in this case by spending 1 improvement units). Thus, Petya is left with 4 improvement units and he will be able to increase the second skill to 19 (which does not change the overall rating, so Petya does not necessarily have to do it). Therefore, the highest possible total rating in this example is\n.\nIn the third test case the optimal strategy for Petya is to increase the first skill to 100 by spending 1 improvement unit. Thereafter, both skills of the character will be equal to 100, so Petya will not be able to spend the remaining improvement unit. So the answer is equal to\n.", "input_specification": "Input\n\nThe first line of the input contains two positive integers *n* and *k* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 , 0\u2009\u2264\u2009 *k* \u2009\u2264\u200910 7 ) \u2014 the number of skills of the character and the number of units of improvements at Petya's disposal.\n\nThe second line of the input contains a sequence of *n* integers *a* *i* ( 0\u2009\u2264\u2009 *a* *i* \u2009\u2264\u2009100 ), where *a* *i* characterizes the level of the *i* -th skill of the character.", "output_specification": "Output\n\nThe first line of the output should contain a single non-negative integer \u2014 the maximum total rating of the character that Petya can get using *k* or less improvement units.", "sample_tests": "Examples\n\nInput\n2 47 9\n\nOutput\n2\n\nInput\n3 817 15 19\n\nOutput\n5\n\nInput\n2 299 100\n\nOutput\n20", "difficulty": 1400, "url": "https://codeforces.com/problemset/problem/581/C"}
{"header": "D. Three Logos\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Three companies decided to order a billboard with pictures of their logos. A billboard is a big\nsquare\nboard. A logo of each company is a rectangle of a non-zero area.\nAdvertisers will put up the ad only if it is possible to place all three logos on the billboard so that they do not overlap and the billboard has no empty space left. When you put a logo on the billboard, you should rotate it so that the sides were parallel to the sides of the billboard.\nYour task is to determine if it is possible to put the logos of all the three companies on some square billboard without breaking any of the described rules.", "input_specification": "Input\n\nThe first line of the input contains six positive integers *x* 1 ,\u2009 *y* 1 ,\u2009 *x* 2 ,\u2009 *y* 2 ,\u2009 *x* 3 ,\u2009 *y* 3 ( 1\u2009\u2264\u2009 *x* 1 ,\u2009 *y* 1 ,\u2009 *x* 2 ,\u2009 *y* 2 ,\u2009 *x* 3 ,\u2009 *y* 3 \u2009\u2264\u2009100 ), where *x* *i* and *y* *i* determine the length and width of the logo of the *i* -th company respectively.", "output_specification": "Output\n\nIf it is impossible to place all the three logos on a square shield, print a single integer \" -1 \" (without the quotes).\n\nIf it is possible, print in the first line the length of a side of square *n* , where you can place all the three logos. Each of the next *n* lines should contain *n* uppercase English letters \" A \", \" B \" or \" C \". The sets of the same letters should form solid rectangles, provided that:\n\n the sizes of the rectangle composed from letters \" A \" should be equal to the sizes of the logo of the first company, the sizes of the rectangle composed from letters \" B \" should be equal to the sizes of the logo of the second company, the sizes of the rectangle composed from letters \" C \" should be equal to the sizes of the logo of the third company, \n\nNote that the logos of the companies can be rotated for printing on the billboard. The billboard mustn't have any empty space. If a square billboard can be filled with the logos in multiple ways, you are allowed to print any of them.\n\nSee the samples to better understand the statement.", "sample_tests": "Examples\n\nInput\n5 1 2 5 5 2\n\nOutput\n5AAAAABBBBBBBBBBCCCCCCCCCC\n\nInput\n4 4 2 6 4 2\n\nOutput\n6BBBBBBBBBBBBAAAACCAAAACCAAAACCAAAACC", "difficulty": 1700, "url": "https://codeforces.com/problemset/problem/581/D"}
{"header": "A. Buy a Shovel\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Polycarp urgently needs a shovel! He comes to the shop and chooses an appropriate one. The shovel that Policarp chooses is sold for\nk\nburles. Assume that there is an unlimited number of such shovels in the shop.\nIn his pocket Polycarp has an unlimited number of \"10-burle coins\" and exactly one coin of\nr\nburles (\n1\u2009\u2264\nr\n\u2264\u20099\n).\nWhat is the minimum number of shovels Polycarp has to buy so that he can pay for the purchase without any change? It is obvious that he can pay for 10 shovels without any change (by paying the requied amount of 10-burle coins and not using the coin of\nr\nburles). But perhaps he can buy fewer shovels and pay without any change. Note that Polycarp should buy at least one shovel.\nNote\nIn the first example Polycarp can buy 9 shovels and pay\n9\u00b7117\u2009=\u20091053\nburles. Indeed, he can pay this sum by using 10-burle coins and one 3-burle coin. He can't buy fewer shovels without any change.\nIn the second example it is enough for Polycarp to buy one shovel.\nIn the third example Polycarp should buy two shovels and pay\n2\u00b715\u2009=\u200930\nburles. It is obvious that he can pay this sum without any change.", "input_specification": "Input\n\nThe single line of input contains two integers *k* and *r* ( 1\u2009\u2264\u2009 *k* \u2009\u2264\u20091000 , 1\u2009\u2264\u2009 *r* \u2009\u2264\u20099 )\u00a0\u2014 the price of one shovel and the denomination of the coin in Polycarp's pocket that is different from \"10-burle coins\". \n\nRemember that he has an unlimited number of coins in the denomination of 10, that is, Polycarp has enough money to buy any number of shovels.", "output_specification": "Output\n\nPrint the required minimum number of shovels Polycarp has to buy so that he can pay for them without any change.", "sample_tests": "Examples\n\nInput\n117 3\n\nOutput\n9\n\nInput\n237 7\n\nOutput\n1\n\nInput\n15 2\n\nOutput\n2", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/732/A"}
{"header": "B. Cormen \u2014 The Best Friend Of a Man\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Recently a dog was bought for Polycarp. The dog's name is Cormen. Now Polycarp has a lot of troubles. For example, Cormen likes going for a walk.\nEmpirically Polycarp learned that the dog needs at least\nk\nwalks for any two consecutive days in order to feel good. For example, if\nk\n=\u20095\nand yesterday Polycarp went for a walk with Cormen\n2\ntimes, today he has to go for a walk at least\n3\ntimes.\nPolycarp analysed all his affairs over the next\nn\ndays and made a sequence of\nn\nintegers\na\n1\n,\na\n2\n,\u2009...,\na\nn\n, where\na\ni\nis the number of times Polycarp will walk with the dog on the\ni\n-th day while doing all his affairs (for example, he has to go to a shop, throw out the trash, etc.).\nHelp Polycarp determine the minimum number of walks he needs to do additionaly in the next\nn\ndays so that Cormen will feel good during all the\nn\ndays. You can assume that on the day before the first day and on the day after the\nn\n-th day Polycarp will go for a walk with Cormen exactly\nk\ntimes.\nWrite a program that will find the minumum number of additional walks and the appropriate schedule\u00a0\u2014 the sequence of integers\nb\n1\n,\nb\n2\n,\u2009...,\nb\nn\n(\nb\ni\n\u2265\na\ni\n), where\nb\ni\nmeans the total number of walks with the dog on the\ni\n-th day.", "input_specification": "Input\n\nThe first line contains two integers *n* and *k* ( 1\u2009\u2264\u2009 *n* ,\u2009 *k* \u2009\u2264\u2009500 )\u00a0\u2014 the number of days and the minimum number of walks with Cormen for any two consecutive days. \n\nThe second line contains integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* ( 0\u2009\u2264\u2009 *a* *i* \u2009\u2264\u2009500 )\u00a0\u2014 the number of walks with Cormen on the *i* -th day which Polycarp has already planned.", "output_specification": "Output\n\nIn the first line print the smallest number of additional walks that Polycarp should do during the next *n* days so that Cormen will feel good during all days. \n\nIn the second line print *n* integers *b* 1 ,\u2009 *b* 2 ,\u2009...,\u2009 *b* *n* , where *b* *i* \u00a0\u2014 the total number of walks on the *i* -th day according to the found solutions ( *a* *i* \u2009\u2264\u2009 *b* *i* for all *i* from 1 to *n* ). If there are multiple solutions, print any of them.", "sample_tests": "Examples\n\nInput\n3 52 0 1\n\nOutput\n42 3 2\n\nInput\n3 10 0 0\n\nOutput\n10 1 0\n\nInput\n4 62 4 3 5\n\nOutput\n02 4 3 5", "difficulty": 1000, "url": "https://codeforces.com/problemset/problem/732/B"}
{"header": "C. Sanatorium\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Vasiliy spent his vacation in a sanatorium, came back and found that he completely forgot details of his vacation!\nEvery day there was a breakfast, a dinner and a supper in a dining room of the sanatorium (of course, in this order). The only thing that Vasiliy has now is a card from the dining room contaning notes how many times he had a breakfast, a dinner and a supper (thus, the card contains three integers). Vasiliy could sometimes have missed some meal, for example, he could have had a breakfast and a supper, but a dinner, or, probably, at some days he haven't been at the dining room at all.\nVasiliy doesn't remember what was the time of the day when he arrived to sanatorium (before breakfast, before dinner, before supper or after supper), and the time when he left it (before breakfast, before dinner, before supper or after supper). So he considers any of these options. After Vasiliy arrived to the sanatorium, he was there all the time until he left. Please note, that it's possible that Vasiliy left the sanatorium on the same day he arrived.\nAccording to the notes in the card, help Vasiliy determine the minimum number of meals in the dining room that he could have missed. We shouldn't count as missed meals on the arrival day before Vasiliy's arrival and meals on the departure day after he left.\nNote\nIn the first sample, Vasiliy could have missed one supper, for example, in case he have arrived before breakfast, have been in the sanatorium for two days (including the day of arrival) and then have left after breakfast on the third day.\nIn the second sample, Vasiliy could have arrived before breakfast, have had it, and immediately have left the sanatorium, not missing any meal.\nIn the third sample, Vasiliy could have been in the sanatorium for one day, not missing any meal.", "input_specification": "Input\n\nThe only line contains three integers *b* , *d* and *s* ( 0\u2009\u2264\u2009 *b* ,\u2009 *d* ,\u2009 *s* \u2009\u2264\u200910 18 ,\u2009\u2009 *b* \u2009+\u2009 *d* \u2009+\u2009 *s* \u2009\u2265\u20091 )\u00a0\u2014 the number of breakfasts, dinners and suppers which Vasiliy had during his vacation in the sanatorium.", "output_specification": "Output\n\nPrint single integer\u00a0\u2014 the minimum possible number of meals which Vasiliy could have missed during his vacation.", "sample_tests": "Examples\n\nInput\n3 2 1\n\nOutput\n1\n\nInput\n1 0 0\n\nOutput\n0\n\nInput\n1 1 1\n\nOutput\n0\n\nInput\n1000000000000000000 0 1000000000000000000\n\nOutput\n999999999999999999", "difficulty": 1200, "url": "https://codeforces.com/problemset/problem/732/C"}
{"header": "D. Exams\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Vasiliy has an exam period which will continue for\nn\ndays. He has to pass exams on\nm\nsubjects. Subjects are numbered from 1 to\nm\n.\nAbout every day we know exam for which one of\nm\nsubjects can be passed on that day. Perhaps, some day you can't pass any exam. It is not allowed to pass more than one exam on any day.\nOn each day Vasiliy can either pass the exam of that day (it takes the whole day) or prepare all day for some exam or have a rest.\nAbout each subject Vasiliy know a number\na\ni\n\u2014 the number of days he should prepare to pass the exam number\ni\n. Vasiliy can switch subjects while preparing for exams, it is not necessary to prepare continuously during\na\ni\ndays for the exam number\ni\n. He can mix the order of preparation for exams in any way.\nYour task is to determine the minimum number of days in which Vasiliy can pass all exams, or determine that it is impossible. Each exam should be passed exactly one time.\nNote\nIn the first example Vasiliy can behave as follows. On the first and the second day he can prepare for the exam number 1 and pass it on the fifth day, prepare for the exam number 2 on the third day and pass it on the fourth day.\nIn the second example Vasiliy should prepare for the exam number 3 during the first four days and pass it on the fifth day. Then on the sixth day he should prepare for the exam number 2 and then pass it on the seventh day. After that he needs to prepare for the exam number 1 on the eighth day and pass it on the ninth day.\nIn the third example Vasiliy can't pass the only exam because he hasn't anough time to prepare for it.", "input_specification": "Input\n\nThe first line contains two integers *n* and *m* ( 1\u2009\u2264\u2009 *n* ,\u2009 *m* \u2009\u2264\u200910 5 )\u00a0\u2014 the number of days in the exam period and the number of subjects. \n\nThe second line contains *n* integers *d* 1 ,\u2009 *d* 2 ,\u2009...,\u2009 *d* *n* ( 0\u2009\u2264\u2009 *d* *i* \u2009\u2264\u2009 *m* ), where *d* *i* is the number of subject, the exam of which can be passed on the day number *i* . If *d* *i* equals 0, it is not allowed to pass any exams on the day number *i* . \n\nThe third line contains *m* positive integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *m* ( 1\u2009\u2264\u2009 *a* *i* \u2009\u2264\u200910 5 ), where *a* *i* is the number of days that are needed to prepare before passing the exam on the subject *i* .", "output_specification": "Output\n\nPrint one integer\u00a0\u2014 the minimum number of days in which Vasiliy can pass all exams. If it is impossible, print -1 .", "sample_tests": "Examples\n\nInput\n7 20 1 0 2 1 0 22 1\n\nOutput\n5\n\nInput\n10 30 0 1 2 3 0 2 0 1 21 1 4\n\nOutput\n9\n\nInput\n5 11 1 1 1 15\n\nOutput\n-1", "difficulty": 1700, "url": "https://codeforces.com/problemset/problem/732/D"}
{"header": "E. Sockets\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "The ICM ACPC World Finals is coming! Unfortunately, the organizers of the competition were so busy preparing tasks that totally missed an important technical point \u2014 the organization of electricity supplement for all the participants workstations.\nThere are\nn\ncomputers for participants, the\ni\n-th of which has power equal to positive integer\np\ni\n. At the same time there are\nm\nsockets available, the\nj\n-th of which has power euqal to positive integer\ns\nj\n. It is possible to connect the\ni\n-th computer to the\nj\n-th socket if and only if their powers are the same:\np\ni\n=\ns\nj\n. It is allowed to connect no more than one computer to one socket. Thus, if the powers of all computers and sockets are distinct, then no computer can be connected to any of the sockets.\nIn order to fix the situation professor Puch Williams urgently ordered a wagon of adapters\u00a0\u2014 power splitters. Each adapter has one plug and one socket with a voltage divider between them. After plugging an adapter to a socket with power\nx\n, the power on the adapter's socket becomes equal to\n, it means that it is equal to the socket's power divided by two with rounding up, for example\nand\n.\nEach adapter can be used only once. It is possible to connect several adapters in a chain plugging the first to a socket. For example, if two adapters are plugged one after enother to a socket with power\n10\n, it becomes possible to connect one computer with power\n3\nto this socket.\nThe organizers should install adapters so that it will be possible to supply with electricity the maximum number of computers\nc\nat the same time. If there are several possible connection configurations, they want to find the one that uses the minimum number of adapters\nu\nto connect\nc\ncomputers.\nHelp organizers calculate the maximum number of connected computers\nc\nand the minimum number of adapters\nu\nneeded for this.\nThe wagon of adapters contains enough of them to do the task. It is guaranteed that it's possible to connect at least one computer.", "input_specification": "Input\n\nThe first line contains two integers *n* and *m* ( 1\u2009\u2264\u2009 *n* ,\u2009 *m* \u2009\u2264\u2009200\u2009000 )\u00a0\u2014 the number of computers and the number of sockets.\n\nThe second line contains *n* integers *p* 1 ,\u2009 *p* 2 ,\u2009...,\u2009 *p* *n* ( 1\u2009\u2264\u2009 *p* *i* \u2009\u2264\u200910 9 )\u00a0\u2014 the powers of the computers. \n\nThe third line contains *m* integers *s* 1 ,\u2009 *s* 2 ,\u2009...,\u2009 *s* *m* ( 1\u2009\u2264\u2009 *s* *i* \u2009\u2264\u200910 9 )\u00a0\u2014 the power of the sockets.", "output_specification": "Output\n\nIn the first line print two numbers *c* and *u* \u00a0\u2014 the maximum number of computers which can at the same time be connected to electricity and the minimum number of adapters needed to connect *c* computers.\n\nIn the second line print *m* integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *m* ( 0\u2009\u2264\u2009 *a* *i* \u2009\u2264\u200910 9 ), where *a* *i* equals the number of adapters orginizers need to plug into the *i* -th socket. The sum of all *a* *i* should be equal to *u* .\n\nIn third line print *n* integers *b* 1 ,\u2009 *b* 2 ,\u2009...,\u2009 *b* *n* ( 0\u2009\u2264\u2009 *b* *i* \u2009\u2264\u2009 *m* ), where the *b* *j* -th equals the number of the socket which the *j* -th computer should be connected to. *b* *j* \u2009=\u20090 means that the *j* -th computer should not be connected to any socket. All *b* *j* that are different from 0 should be distinct. The power of the *j* -th computer should be equal to the power of the socket *b* *j* after plugging in *a* *b* *j* adapters. The number of non-zero *b* *j* should be equal to *c* .\n\nIf there are multiple answers, print any of them.", "sample_tests": "Examples\n\nInput\n2 21 12 2\n\nOutput\n2 21 11 2\n\nInput\n2 12 10099\n\nOutput\n1 661 0", "difficulty": 2100, "url": "https://codeforces.com/problemset/problem/732/E"}
{"header": "A. Bear and Poker\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Limak is an old brown bear. He often plays poker with his friends. Today they went to a casino. There are\nn\nplayers (including Limak himself) and right now all of them have bids on the table.\ni\n-th of them has bid with size\na\ni\ndollars.\nEach player can double his bid any number of times and triple his bid any number of times. The casino has a great jackpot for making all bids equal. Is it possible that Limak and his friends will win a jackpot?\nNote\nIn the first sample test first and third players should double their bids twice, second player should double his bid once and fourth player should both double and triple his bid.\nIt can be shown that in the second sample test there is no way to make all bids equal.", "input_specification": "Input\n\nFirst line of input contains an integer *n* ( 2\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ), the number of players.\n\nThe second line contains *n* integer numbers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* ( 1\u2009\u2264\u2009 *a* *i* \u2009\u2264\u200910 9 ) \u2014 the bids of players.", "output_specification": "Output\n\nPrint \" Yes \" (without the quotes) if players can make their bids become equal, or \" No \" otherwise.", "sample_tests": "Examples\n\nInput\n475 150 75 50\n\nOutput\nYes\n\nInput\n3100 150 250\n\nOutput\nNo", "difficulty": 1300, "url": "https://codeforces.com/problemset/problem/573/A"}
{"header": "B. Bear and Blocks\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Limak is a little bear who loves to play. Today he is playing by destroying block towers. He built\nn\ntowers in a row. The\ni\n-th tower is made of\nh\ni\nidentical blocks. For clarification see picture for the first sample.\nLimak will repeat the following operation till everything is destroyed.\nBlock is called internal if it has all four neighbors, i.e. it has each side (top, left, down and right) adjacent to other block or to the floor. Otherwise, block is boundary. In one operation Limak destroys all boundary blocks. His paws are very fast and he destroys all those blocks at the same time.\nLimak is ready to start. You task is to count how many operations will it take him to destroy all towers.\nNote\nThe picture below shows all three operations for the first sample test. Each time boundary blocks are marked with red color.\nAfter first operation there are four blocks left and only one remains after second operation. This last block is destroyed in third operation.", "input_specification": "Input\n\nThe first line contains single integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ).\n\nThe second line contains *n* space-separated integers *h* 1 ,\u2009 *h* 2 ,\u2009...,\u2009 *h* *n* ( 1\u2009\u2264\u2009 *h* *i* \u2009\u2264\u200910 9 ) \u2014 sizes of towers.", "output_specification": "Output\n\nPrint the number of operations needed to destroy all towers.", "sample_tests": "Examples\n\nInput\n62 1 4 6 2 2\n\nOutput\n3\n\nInput\n73 3 3 1 3 3 3\n\nOutput\n2", "difficulty": 1600, "url": "https://codeforces.com/problemset/problem/573/B"}
{"header": "A. Contest for Robots\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Polycarp is preparing the first programming contest for robots. There are $n$ problems in it, and a lot of robots are going to participate in it. Each robot solving the problem $i$ gets $p_i$ points, and the score of each robot in the competition is calculated as the sum of $p_i$ over all problems $i$ solved by it. For each problem, $p_i$ is an integer not less than $1$.\nTwo corporations specializing in problem-solving robot manufacturing, \"Robo-Coder Inc.\" and \"BionicSolver Industries\", are going to register two robots (one for each corporation) for participation as well. Polycarp knows the advantages and flaws of robots produced by these companies, so, for each problem, he knows precisely whether each robot will solve it during the competition. Knowing this, he can try predicting the results \u2014 or manipulating them.\nFor some reason (which absolutely cannot involve bribing), Polycarp wants the \"Robo-Coder Inc.\" robot to outperform the \"BionicSolver Industries\" robot in the competition. Polycarp wants to set the values of $p_i$ in such a way that the \"Robo-Coder Inc.\" robot gets\nstrictly more\npoints than the \"BionicSolver Industries\" robot. However, if the values of $p_i$ will be large, it may look very suspicious \u2014 so Polycarp wants to minimize the maximum value of $p_i$ over all problems. Can you help Polycarp to determine the minimum possible upper bound on the number of points given for solving the problems?\nNote\nIn the first example, one of the valid score assignments is $p = [3, 1, 3, 1, 1]$. Then the \"Robo-Coder\" gets $7$ points, the \"BionicSolver\" \u2014 $6$ points.\nIn the second example, both robots get $0$ points, and the score distribution does not matter.\nIn the third example, both robots solve all problems, so their points are equal.", "input_specification": "Input\n\nThe first line contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the number of problems.\n\nThe second line contains $n$ integers $r_1$, $r_2$, ..., $r_n$ ($0 \\le r_i \\le 1$). $r_i = 1$ means that the \"Robo-Coder Inc.\" robot will solve the $i$-th problem, $r_i = 0$ means that it won't solve the $i$-th problem.\n\nThe third line contains $n$ integers $b_1$, $b_2$, ..., $b_n$ ($0 \\le b_i \\le 1$). $b_i = 1$ means that the \"BionicSolver Industries\" robot will solve the $i$-th problem, $b_i = 0$ means that it won't solve the $i$-th problem.", "output_specification": "Output\n\nIf \"Robo-Coder Inc.\" robot cannot outperform the \"BionicSolver Industries\" robot by any means, print one integer $-1$.\n\nOtherwise, print the minimum possible value of $\\max \\limits_{i = 1}^{n} p_i$, if all values of $p_i$ are set in such a way that the \"Robo-Coder Inc.\" robot gets strictly more points than the \"BionicSolver Industries\" robot.", "sample_tests": "Examples\n\nInput\n5\n1 1 1 0 0\n0 1 1 1 1\n\nOutput\n3\n\nInput\n3\n0 0 0\n0 0 0\n\nOutput\n-1\n\nInput\n4\n1 1 1 1\n1 1 1 1\n\nOutput\n-1\n\nInput\n9\n1 0 0 0 0 0 0 0 1\n0 1 1 0 1 1 1 1 0\n\nOutput\n4", "difficulty": 900, "url": "https://codeforces.com/problemset/problem/1321/A"}
{"header": "B. Journey Planning\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Tanya wants to go on a journey across the cities of Berland. There are $n$ cities situated along the main railroad line of Berland, and these cities are numbered from $1$ to $n$.\nTanya plans her journey as follows. First of all, she will choose some city $c_1$ to start her journey. She will visit it, and after that go to some other city $c_2 > c_1$, then to some other city $c_3 > c_2$, and so on, until she chooses to end her journey in some city $c_k > c_{k - 1}$. So, the sequence of visited cities $[c_1, c_2, \\dots, c_k]$ should be strictly increasing.\nThere are some additional constraints on the sequence of cities Tanya visits. Each city $i$ has a beauty value $b_i$ associated with it. If there is only one city in Tanya's journey, these beauty values imply no additional constraints. But if there are multiple cities in the sequence, then for any pair of adjacent cities $c_i$ and $c_{i + 1}$, the condition $c_{i + 1} - c_i = b_{c_{i + 1}} - b_{c_i}$ must hold.\nFor example, if $n = 8$ and $b = [3, 4, 4, 6, 6, 7, 8, 9]$, there are several three possible ways to plan a journey:\n$c = [1, 2, 4]$;\n$c = [3, 5, 6, 8]$;\n$c = [7]$ (a journey consisting of one city is also valid).\nThere are some additional ways to plan a journey that are not listed above.\nTanya wants her journey to be as beautiful as possible. The beauty value of the whole journey is the sum of beauty values over all visited cities. Can you help her to choose the optimal plan, that is, to maximize the beauty value of the journey?\nNote\nThe optimal journey plan in the first example is $c = [2, 4, 5]$.\nThe optimal journey plan in the second example is $c = [1]$.\nThe optimal journey plan in the third example is $c = [3, 6]$.", "input_specification": "Input\n\nThe first line contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of cities in Berland.\n\nThe second line contains $n$ integers $b_1$, $b_2$, ..., $b_n$ ($1 \\le b_i \\le 4 \\cdot 10^5$), where $b_i$ is the beauty value of the $i$-th city.", "output_specification": "Output\n\nPrint one integer \u2014 the maximum beauty of a journey Tanya can choose.", "sample_tests": "Examples\n\nInput\n6\n10 7 1 9 10 15\n\nOutput\n26\n\nInput\n1\n400000\n\nOutput\n400000\n\nInput\n7\n8 9 26 11 12 29 14\n\nOutput\n55", "difficulty": 1400, "url": "https://codeforces.com/problemset/problem/1321/B"}
{"header": "C. Remove Adjacent\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given a string $s$ consisting of lowercase Latin letters. Let the length of $s$ be $|s|$. You may perform several operations on this string.\nIn one operation, you can choose some index $i$ and\nremove\nthe $i$-th character of $s$ ($s_i$) if\nat least one\nof its adjacent characters is the\nprevious\nletter in the Latin alphabet for $s_i$. For example, the\nprevious\nletter for\nb\nis\na\n, the\nprevious\nletter for\ns\nis\nr\n, the letter\na\nhas no\nprevious\nletters. Note that after each removal the length of the string decreases by one. So, the index $i$ should satisfy the condition $1 \\le i \\le |s|$ during each operation.\nFor the character $s_i$ adjacent characters are $s_{i-1}$ and $s_{i+1}$. The first and the last characters of $s$ both have only one adjacent character (unless $|s| = 1$).\nConsider the following example. Let $s=$\nbacabcab\n.\nDuring the first move, you can remove the first character $s_1=$\nb\nbecause $s_2=$\na\n. Then the string becomes $s=$\nacabcab\n.\nDuring the second move, you can remove the fifth character $s_5=$\nc\nbecause $s_4=$\nb\n. Then the string becomes $s=$\nacabab\n.\nDuring the third move, you can remove the sixth character $s_6=$'\nb\n' because $s_5=$\na\n. Then the string becomes $s=$\nacaba\n.\nDuring the fourth move, the only character you can remove is $s_4=$\nb\n, because $s_3=$\na\n(or $s_5=$\na\n). The string becomes $s=$\nacaa\nand you cannot do anything with it.\nYour task is to find the maximum possible number of characters you can remove if you choose the sequence of operations optimally.\nNote\nThe first example is described in the problem statement. Note that the sequence of moves provided in the statement is not the only, but it can be shown that the maximum possible answer to this test is $4$.\nIn the second example, you can remove all but one character of $s$. The only possible answer follows.\nDuring the first move, remove the third character $s_3=$\nd\n, $s$ becomes\nbca\n.\nDuring the second move, remove the second character $s_2=$\nc\n, $s$ becomes\nba\n.\nAnd during the third move, remove the first character $s_1=$\nb\n, $s$ becomes\na\n.", "input_specification": "Input\n\nThe first line of the input contains one integer $|s|$ ($1 \\le |s| \\le 100$) \u2014 the length of $s$.\n\nThe second line of the input contains one string $s$ consisting of $|s|$ lowercase Latin letters.", "output_specification": "Output\n\nPrint one integer \u2014 the maximum possible number of characters you can remove if you choose the sequence of moves optimally.", "sample_tests": "Examples\n\nInput\n8\nbacabcab\n\nOutput\n4\n\nInput\n4\nbcda\n\nOutput\n3\n\nInput\n6\nabbbbb\n\nOutput\n5", "difficulty": 1600, "url": "https://codeforces.com/problemset/problem/1321/C"}
{"header": "D. Navigation System\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 512 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "The map of Bertown can be represented as a set of $n$ intersections, numbered from $1$ to $n$ and connected by $m$ one-way roads. It is possible to move along the roads from any intersection to any other intersection. The length of some path from one intersection to another is the number of roads that one has to traverse along the path. The shortest path from one intersection $v$ to another intersection $u$ is the path that starts in $v$, ends in $u$ and has the minimum length among all such paths.\nPolycarp lives near the intersection $s$ and works in a building near the intersection $t$. Every day he gets from $s$ to $t$ by car. Today he has chosen the following path to his workplace: $p_1$, $p_2$, ..., $p_k$, where $p_1 = s$, $p_k = t$, and all other elements of this sequence are the intermediate intersections, listed in the order Polycarp arrived at them. Polycarp never arrived at the same intersection twice, so all elements of this sequence are pairwise distinct.\nNote that you know Polycarp's path beforehand (it is fixed), and it is not necessarily one of the shortest paths from $s$ to $t$\n.\nPolycarp's car has a complex navigation system installed in it. Let's describe how it works. When Polycarp starts his journey at the intersection $s$, the system chooses some shortest path from $s$ to $t$ and shows it to Polycarp. Let's denote the next intersection in the chosen path as $v$. If Polycarp chooses to drive along the road from $s$ to $v$, then the navigator shows him the same shortest path (obviously, starting from $v$ as soon as he arrives at this intersection). However, if Polycarp chooses to drive to another intersection $w$ instead, the navigator\nrebuilds\nthe path: as soon as Polycarp arrives at $w$, the navigation system chooses some shortest path from $w$ to $t$ and shows it to Polycarp. The same process continues until Polycarp arrives at $t$: if Polycarp moves along the road recommended by the system, it maintains the shortest path it has already built; but if Polycarp chooses some other path, the system\nrebuilds\nthe path by the same rules.\nHere is an example. Suppose the map of Bertown looks as follows, and Polycarp drives along the path $[1, 2, 3, 4]$ ($s = 1$, $t = 4$):\nCheck the picture by the link\nhttp://tk.codeforces.com/a.png\nWhen Polycarp starts at $1$, the system chooses some shortest path from $1$ to $4$. There is only one such path, it is $[1, 5, 4]$;\nPolycarp chooses to drive to $2$, which is not along the path chosen by the system. When Polycarp arrives at $2$, the navigator\nrebuilds\nthe path by choosing some shortest path from $2$ to $4$, for example, $[2, 6, 4]$ (note that it could choose $[2, 3, 4]$);\nPolycarp chooses to drive to $3$, which is not along the path chosen by the system. When Polycarp arrives at $3$, the navigator\nrebuilds\nthe path by choosing the only shortest path from $3$ to $4$, which is $[3, 4]$;\nPolycarp arrives at $4$ along the road chosen by the navigator, so the system does not have to rebuild anything.\nOverall, we get $2$ rebuilds in this scenario. Note that if the system chose $[2, 3, 4]$ instead of $[2, 6, 4]$ during the second step, there would be only $1$ rebuild (since Polycarp goes along the path, so the system maintains the path $[3, 4]$ during the third step).\nThe example shows us that the number of rebuilds can differ even if the map of Bertown and the path chosen by Polycarp stays the same. Given this information (the map and Polycarp's path), can you determine the minimum and the maximum number of rebuilds that could have happened during the journey?", "input_specification": "Input\n\nThe first line contains two integers $n$ and $m$ ($2 \\le n \\le m \\le 2 \\cdot 10^5$) \u2014 the number of intersections and one-way roads in Bertown, respectively.\n\nThen $m$ lines follow, each describing a road. Each line contains two integers $u$ and $v$ ($1 \\le u, v \\le n$, $u \\ne v$) denoting a road from intersection $u$ to intersection $v$. All roads in Bertown are pairwise distinct, which means that each ordered pair $(u, v)$ appears at most once in these $m$ lines (but if there is a road $(u, v)$, the road $(v, u)$ can also appear).\n\nThe following line contains one integer $k$ ($2 \\le k \\le n$) \u2014 the number of intersections in Polycarp's path from home to his workplace.\n\nThe last line contains $k$ integers $p_1$, $p_2$, ..., $p_k$ ($1 \\le p_i \\le n$, all these integers are pairwise distinct) \u2014 the intersections along Polycarp's path in the order he arrived at them. $p_1$ is the intersection where Polycarp lives ($s = p_1$), and $p_k$ is the intersection where Polycarp's workplace is situated ($t = p_k$). It is guaranteed that for every $i \\in [1, k - 1]$ the road from $p_i$ to $p_{i + 1}$ exists, so the path goes along the roads of Bertown.", "output_specification": "Output\n\nPrint two integers: the minimum and the maximum number of rebuilds that could have happened during the journey.", "sample_tests": "Examples\n\nInput\n6 9\n1 5\n5 4\n1 2\n2 3\n3 4\n4 1\n2 6\n6 4\n4 2\n4\n1 2 3 4\n\nOutput\n1 2\n\nInput\n7 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 1\n7\n1 2 3 4 5 6 7\n\nOutput\n0 0\n\nInput\n8 13\n8 7\n8 6\n7 5\n7 4\n6 5\n6 4\n5 3\n5 2\n4 3\n4 2\n3 1\n2 1\n1 8\n5\n8 7 5 2 1\n\nOutput\n0 3", "difficulty": 1700, "url": "https://codeforces.com/problemset/problem/1321/D"}
{"header": "E. World of Darkraft: Battle for Azathoth\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 512 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Roma is playing a new expansion for his favorite game World of Darkraft. He made a new character and is going for his first grind.\nRoma has a choice to buy\nexactly one\nof $n$ different weapons and\nexactly one\nof $m$ different armor sets. Weapon $i$ has attack modifier $a_i$ and is worth $ca_i$ coins, and armor set $j$ has defense modifier $b_j$ and is worth $cb_j$ coins.\nAfter choosing his equipment Roma can proceed to defeat some monsters. There are $p$ monsters he can try to defeat. Monster $k$ has defense $x_k$, attack $y_k$ and possesses $z_k$ coins. Roma can defeat a monster if his weapon's attack modifier is larger than the monster's defense, and his armor set's defense modifier is larger than the monster's attack. That is, a monster $k$ can be defeated with a weapon $i$ and an armor set $j$ if $a_i > x_k$ and $b_j > y_k$. After defeating the monster, Roma takes all the coins from them. During the grind, Roma can defeat as many monsters as he likes. Monsters do not respawn, thus each monster can be defeated at most one.\nThanks to Roma's excessive donations, we can assume that he has an infinite amount of in-game currency and can afford any of the weapons and armor sets. Still, he wants to maximize the profit of the grind. The profit is defined as the total coins obtained from all defeated monsters minus the cost of his equipment. Note that Roma\nmust\npurchase a weapon and an armor set even if he can not cover their cost with obtained coins.\nHelp Roma find the maximum profit of the grind.", "input_specification": "Input\n\nThe first line contains three integers $n$, $m$, and $p$ ($1 \\leq n, m, p \\leq 2 \\cdot 10^5$)\u00a0\u2014 the number of available weapons, armor sets and monsters respectively.\n\nThe following $n$ lines describe available weapons. The $i$-th of these lines contains two integers $a_i$ and $ca_i$ ($1 \\leq a_i \\leq 10^6$, $1 \\leq ca_i \\leq 10^9$)\u00a0\u2014 the attack modifier and the cost of the weapon $i$.\n\nThe following $m$ lines describe available armor sets. The $j$-th of these lines contains two integers $b_j$ and $cb_j$ ($1 \\leq b_j \\leq 10^6$, $1 \\leq cb_j \\leq 10^9$)\u00a0\u2014 the defense modifier and the cost of the armor set $j$.\n\nThe following $p$ lines describe monsters. The $k$-th of these lines contains three integers $x_k, y_k, z_k$ ($1 \\leq x_k, y_k \\leq 10^6$, $1 \\leq z_k \\leq 10^3$)\u00a0\u2014 defense, attack and the number of coins of the monster $k$.", "output_specification": "Output\n\nPrint a single integer\u00a0\u2014 the maximum profit of the grind.", "sample_tests": "Example\n\nInput\n2 3 3\n2 3\n4 7\n2 4\n3 2\n5 11\n1 2 4\n2 1 6\n3 4 6\n\nOutput\n1", "difficulty": 2000, "url": "https://codeforces.com/problemset/problem/1321/E"}
{"header": "A. New Year Table\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Gerald is setting the New Year table. The table has the form of a circle; its radius equals\nR\n. Gerald invited many guests and is concerned whether the table has enough space for plates for all those guests. Consider all plates to be round and have the same radii that equal\nr\n. Each plate must be completely inside the table and must touch the edge of the table. Of course, the plates must not intersect, but they can touch each other. Help Gerald determine whether the table is large enough for\nn\nplates.\nNote\nThe possible arrangement of the plates for the first sample is:", "input_specification": "Input\n\nThe first line contains three integers *n* , *R* and *r* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u2009100 , 1\u2009\u2264\u2009 *r* ,\u2009 *R* \u2009\u2264\u20091000 ) \u2014 the number of plates, the radius of the table and the plates' radius.", "output_specification": "Output\n\nPrint \" YES \" (without the quotes) if it is possible to place *n* plates on the table by the rules given above. If it is impossible, print \" NO \".\n\nRemember, that each plate must touch the edge of the table.", "sample_tests": "Examples\n\nInput\n4 10 4\n\nOutput\nYES\n\nInput\n5 10 4\n\nOutput\nNO\n\nInput\n1 10 10\n\nOutput\nYES", "difficulty": 1700, "url": "https://codeforces.com/problemset/problem/140/A"}
{"header": "B. New Year Cards\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "As meticulous Gerald sets the table, Alexander finished another post on Codeforces and begins to respond to New Year greetings from friends. Alexander has\nn\nfriends, and each of them sends to Alexander exactly one e-card. Let us number his friends by numbers from\n1\nto\nn\nin the order in which they send the cards. Let's introduce the same numbering for the cards, that is, according to the numbering the\ni\n-th friend sent to Alexander a card number\ni\n.\nAlexander also sends cards to friends, but he doesn't look for the new cards on the Net. He simply uses the cards previously sent to him (sometimes, however, he does need to add some crucial details). Initially Alexander doesn't have any cards. Alexander always follows the two rules:\nHe will never send to a firend a card that this friend has sent to him.\nAmong the other cards available to him at the moment, Alexander always chooses one that Alexander himself likes most.\nAlexander plans to send to each friend exactly one card. Of course, Alexander can send the same card multiple times.\nAlexander and each his friend has the list of preferences, which is a permutation of integers from\n1\nto\nn\n. The first number in the list is the number of the favorite card, the second number shows the second favorite, and so on, the last number shows the least favorite card.\nYour task is to find a schedule of sending cards for Alexander. Determine at which moments of time Alexander must send cards to his friends, to please each of them as much as possible. In other words, so that as a result of applying two Alexander's rules, each friend receives the card that is preferred for him as much as possible.\nNote that Alexander doesn't choose freely what card to send, but he always strictly follows the two rules.\nNote\nIn the sample, the algorithm of actions Alexander and his friends perform is as follows:\nAlexander receives card\n1\nfrom the first friend.\nAlexander sends the card he has received (at the moment he only has one card, and therefore it is the most preferable for him) to friends with the numbers\n2\nand\n3\n.\nAlexander receives card\n2\nfrom the second friend, now he has two cards \u2014\n1\nand\n2\n.\nAlexander sends a card to the first friend. Despite the fact that Alexander likes card\n1\nmore, he sends card\n2\nas he cannot send a friend the card sent by that very friend.\nAlexander receives card\n3\nfrom the third friend.\nAlexander receives card\n4\nfrom the fourth friend.\nAmong the cards Alexander has number\n3\nis his favorite and he sends it to the fourth friend.\nNote that Alexander can send cards to multiple friends at a time (in this case the second and the third one). Alexander can send card\n3\nto the fourth friend after he receives the third card or after he receives the fourth card (both variants are correct).", "input_specification": "Input\n\nThe first line contains an integer *n* ( 2\u2009\u2264\u2009 *n* \u2009\u2264\u2009300 ) \u2014 the number of Alexander's friends, equal to the number of cards. Next *n* lines contain his friends' preference lists. Each list consists of *n* different integers from 1 to *n* . The last line contains Alexander's preference list in the same format.", "output_specification": "Output\n\nPrint *n* space-separated numbers: the *i* -th number should be the number of the friend, whose card Alexander receives right before he should send a card to the *i* -th friend. If there are several solutions, print any of them.", "sample_tests": "Examples\n\nInput\n41 2 3 44 1 3 24 3 1 23 4 2 13 1 2 4\n\nOutput\n2 1 1 4", "difficulty": 1800, "url": "https://codeforces.com/problemset/problem/140/B"}
{"header": "C. New Year Snowmen\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "As meticulous Gerald sets the table and caring Alexander sends the postcards, Sergey makes snowmen. Each showman should consist of three snowballs: a big one, a medium one and a small one. Sergey's twins help him: they've already made\nn\nsnowballs with radii equal to\nr\n1\n,\nr\n2\n, ...,\nr\nn\n. To make a snowman, one needs any three snowballs whose radii are pairwise different. For example, the balls with radii\n1\n,\n2\nand\n3\ncan be used to make a snowman but\n2\n,\n2\n,\n3\nor\n2\n,\n2\n,\n2\ncannot. Help Sergey and his twins to determine what\nmaximum\nnumber of snowmen they can make from those snowballs.", "input_specification": "Input\n\nThe first line contains integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ) \u2014 the number of snowballs. The next line contains *n* integers \u2014 the balls' radii *r* 1 , *r* 2 , ..., *r* *n* ( 1\u2009\u2264\u2009 *r* *i* \u2009\u2264\u200910 9 ). The balls' radii can coincide.", "output_specification": "Output\n\nPrint on the first line a single number *k* \u2014 the maximum number of the snowmen. Next *k* lines should contain the snowmen's descriptions. The description of each snowman should consist of three space-separated numbers \u2014 the big ball's radius, the medium ball's radius and the small ball's radius. It is allowed to print the snowmen in any order. If there are several solutions, print any of them.", "sample_tests": "Examples\n\nInput\n71 2 3 4 5 6 7\n\nOutput\n23 2 16 5 4\n\nInput\n32 2 3\n\nOutput\n0", "difficulty": 1800, "url": "https://codeforces.com/problemset/problem/140/C"}
{"header": "D. New Year Contest\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "As Gerald sets the table, Alexander sends the greeting cards, and Sergey and his twins create an army of clone snowmen, Gennady writes a New Year contest.\nThe New Year contest begins at 18:00 (6.00 P.M.) on December 31 and ends at 6:00 (6.00 A.M.) on January 1. There are\nn\nproblems for the contest. The penalty time for each solved problem is set as the distance from the moment of solution submission to the New Year in minutes. For example, the problem submitted at 21:00 (9.00 P.M.) gets penalty time 180, as well as the problem submitted at 3:00 (3.00 A.M.). The total penalty time is calculated as the sum of penalty time for all solved problems. It is allowed to submit a problem exactly at the end of the contest, at 6:00 (6.00 A.M.).\nGennady opened the problems exactly at 18:00 (6.00 P.M.) and managed to estimate their complexity during the first 10 minutes of the contest. He believes that writing a solution for the\ni\n-th problem will take\na\ni\nminutes. Gennady can submit a solution for evaluation at any time after he completes writing it. Probably he will have to distract from writing some solution to send the solutions of other problems for evaluation. The time needed to send the solutions can be neglected, i.e. this time can be considered to equal zero. Gennady can simultaneously submit multiple solutions. Besides, he can move at any time from writing one problem to another, and then return to the first problem from the very same place, where he has left it. Thus the total solution writing time of the\ni\n-th problem always equals\na\ni\nminutes. Of course, Gennady does not commit wrong attempts, and his solutions are always correct and are accepted from the first attempt. He can begin to write the solutions starting from 18:10 (6.10 P.M.).\nHelp Gennady choose from the strategies that help him solve the maximum possible number of problems, the one with which his total penalty time will be minimum.\nNote\nIn the sample, one of Gennady's possible optimal strategies is as follows. At 18:10 (6:10 PM) he begins to write the first problem and solves it in 30 minutes (18:40 or 6.40 P.M.). At 18:40 (6.40 P.M.) he begins to write the second problem. There are 320 minutes left before the New Year, so Gennady does not have the time to finish writing the second problem before the New Year. At 0:00 (12.00 A.M.) he distracts from the second problem, submits the first one, and returns immediately to writing the second problem. At 0:10 (0.10 A.M.), he completes the solution for the second problem, submits it and gets 10 minute penalty time. Note that as the total duration of the contest is 720 minutes and Gennady has already spent 10 minutes on reading the problems, he will not have time to solve the third problem during the contest. Yes, such problems happen to exist.\nCompetitions by the given rules are held annually on the site http://b23.ru/3wvc", "input_specification": "Input\n\nThe first line contains an integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u2009100 ) \u2014 the number of the problems. The next line contains *n* space-separated integers *a* *i* ( 1\u2009\u2264\u2009 *a* *i* \u2009\u2264\u2009720 ) \u2014 each number shows how much time in minutes Gennady will spend writing a solution to the problem.", "output_specification": "Output\n\nPrint two integers \u2014 the number of problems Gennady will solve and the total penalty time considering that he chooses the optimal strategy.", "sample_tests": "Examples\n\nInput\n330 330 720\n\nOutput\n2 10", "difficulty": 1800, "url": "https://codeforces.com/problemset/problem/140/D"}
{"header": "A. Balanced Substring\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given a string $s$, consisting of $n$ letters, each letter is either '\na\n' or '\nb\n'. The letters in the string are numbered from $1$ to $n$.\n$s[l; r]$ is a continuous substring of letters from index $l$ to $r$ of the string inclusive.\nA string is called balanced if the number of letters '\na\n' in it is equal to the number of letters '\nb\n'. For example, strings \"\nbaba\n\" and \"\naabbab\n\" are balanced and strings \"\naaab\n\" and \"\nb\n\" are not.\nFind any non-empty balanced substring $s[l; r]$ of string $s$. Print its $l$ and $r$ ($1 \\le l \\le r \\le n$). If there is no such substring, then print $-1$ $-1$.\nNote\nIn the first testcase there are no non-empty balanced subtrings.\nIn the second and third testcases there are multiple balanced substrings, including the entire string \"\nabbaba\n\" and substring \"\nbaba\n\".", "input_specification": "Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of testcases.\n\nThen the descriptions of $t$ testcases follow.\n\nThe first line of the testcase contains a single integer $n$ ($1 \\le n \\le 50$)\u00a0\u2014 the length of the string.\n\nThe second line of the testcase contains a string $s$, consisting of $n$ letters, each letter is either ' a ' or ' b '.", "output_specification": "Output\n\nFor each testcase print two integers. If there exists a non-empty balanced substring $s[l; r]$, then print $l$ $r$ ($1 \\le l \\le r \\le n$). Otherwise, print $-1$ $-1$.", "sample_tests": "Example\n\nInput\n4\n1\na\n6\nabbaba\n6\nabbaba\n9\nbabbabbaa\n\nOutput\n-1 -1\n1 6\n3 6\n2 5", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1569/A"}
{"header": "B. Chess Tournament\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "A chess tournament will be held soon, where $n$ chess players will take part. Every participant will play one game against every other participant. Each game ends in either a win for one player and a loss for another player, or a draw for both players.\nEach of the players has their own expectations about the tournament, they can be one of two types:\na player wants not to lose any game (i.\u2009e. finish the tournament with\nzero losses\n);\na player wants to win at least one game.\nYou have to determine if there exists an outcome for all the matches such that all the players meet their expectations. If there are several possible outcomes, print any of them. If there are none, report that it's impossible.", "input_specification": "Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 200$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($2 \\le n \\le 50$)\u00a0\u2014 the number of chess players.\n\nThe second line contains the string $s$ ($|s| = n$; $s_i \\in \\{1, 2\\}$). If $s_i = 1$, then the $i$-th player has expectations of the first type, otherwise of the second type.", "output_specification": "Output\n\nFor each test case, print the answer in the following format:\n\nIn the first line, print NO if it is impossible to meet the expectations of all players.\n\nOtherwise, print YES , and the matrix of size $n \\times n$ in the next $n$ lines.\n\nThe matrix element in the $i$-th row and $j$-th column should be equal to:\n\n + , if the $i$-th player won in a game against the $j$-th player; - , if the $i$-th player lost in a game against the $j$-th player; = , if the $i$-th and $j$-th players' game resulted in a draw; X , if $i = j$.", "sample_tests": "Example\n\nInput\n3\n3\n111\n2\n21\n4\n2122\n\nOutput\nYES\nX==\n=X=\n==X\nNO\nYES\nX--+\n+X++\n+-X-\n--+X", "difficulty": 1000, "url": "https://codeforces.com/problemset/problem/1569/B"}
{"header": "C. Jury Meeting\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "$n$ people gathered to hold a jury meeting of the upcoming competition, the $i$-th member of the jury came up with $a_i$ tasks, which they want to share with each other.\nFirst, the jury decides on the order which they will follow while describing the tasks. Let that be a permutation $p$ of numbers from $1$ to $n$ (an array of size $n$ where each integer from $1$ to $n$ occurs exactly once).\nThen the discussion goes as follows:\nIf a jury member $p_1$ has some tasks left to tell, then they tell one task to others. Otherwise, they are skipped.\nIf a jury member $p_2$ has some tasks left to tell, then they tell one task to others. Otherwise, they are skipped.\n...\nIf a jury member $p_n$ has some tasks left to tell, then they tell one task to others. Otherwise, they are skipped.\nIf there are still members with tasks left, then the process repeats from the start. Otherwise, the discussion ends.\nA permutation $p$ is nice if none of the jury members tell two or more of their own tasks in a row.\nCount the number of nice permutations. The answer may be really large, so print it modulo $998\\,244\\,353$.\nNote\nExplanation of the first test case from the example:\nThere are two possible permutations, $p = [1, 2]$ and $p = [2, 1]$. For $p = [1, 2]$, the process is the following:\nthe first jury member tells a task;\nthe second jury member tells a task;\nthe first jury member doesn't have any tasks left to tell, so they are skipped;\nthe second jury member tells a task.\nSo, the second jury member has told two tasks in a row (in succession), so the permutation is not nice.\nFor $p = [2, 1]$, the process is the following:\nthe second jury member tells a task;\nthe first jury member tells a task;\nthe second jury member tells a task.\nSo, this permutation is nice.", "input_specification": "Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of test cases.\n\nThe first line of the test case contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$)\u00a0\u2014 number of jury members.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$)\u00a0\u2014 the number of problems that the $i$-th member of the jury came up with.\n\nThe sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.", "output_specification": "Output\n\nFor each test case, print one integer\u00a0\u2014 the number of nice permutations, taken modulo $998\\,244\\,353$.", "sample_tests": "Example\n\nInput\n4\n2\n1 2\n3\n5 5 5\n4\n1 3 3 7\n6\n3 4 2 1 3 3\n\nOutput\n1\n6\n0\n540", "difficulty": 1500, "url": "https://codeforces.com/problemset/problem/1569/C"}
{"header": "D. Inconvenient Pairs\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "There is a city that can be represented as a square grid with corner points in $(0, 0)$ and $(10^6, 10^6)$.\nThe city has $n$ vertical and $m$ horizontal streets that goes across the whole city, i.\u00a0e. the $i$-th vertical streets goes from $(x_i, 0)$ to $(x_i, 10^6)$ and the $j$-th horizontal street goes from $(0, y_j)$ to $(10^6, y_j)$.\nAll streets are bidirectional. Borders of the city are streets as well.\nThere are $k$ persons staying\non the streets\n: the $p$-th person at point $(x_p, y_p)$ (so either $x_p$ equal to some $x_i$ or $y_p$ equal to some $y_j$, or both).\nLet's say that a pair of persons form an\ninconvenient pair\nif the shortest path from one person to another going only by streets is\nstrictly greater\nthan the Manhattan distance between them.\nCalculate the number of inconvenient pairs of persons (pairs $(x, y)$ and $(y, x)$ are the same pair).\nLet's recall that Manhattan distance between points $(x_1, y_1)$ and $(x_2, y_2)$ is $|x_1 - x_2| + |y_1 - y_2|$.\nNote\nThe second test case is pictured below:\nFor example, points $3$ and $4$ form an inconvenient pair, since the shortest path between them (shown red and equal to $7$) is greater than its Manhattan distance (equal to $5$).\nPoints $3$ and $5$ also form an inconvenient pair: the shortest path equal to $1000001$ (shown green) is greater than the Manhattan distance equal to $999999$.\nBut points $5$ and $9$ don't form an inconvenient pair, since the shortest path (shown purple) is equal to its Manhattan distance.", "input_specification": "Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains three integers $n$, $m$ and $k$ ($2 \\le n, m \\le 2 \\cdot 10^5$; $2 \\le k \\le 3 \\cdot 10^5$)\u00a0\u2014 the number of vertical and horizontal streets and the number of persons.\n\nThe second line of each test case contains $n$ integers $x_1, x_2, \\dots, x_n$ ($0 = x_1 < x_2 < \\dots < x_{n - 1} < x_n = 10^6$)\u00a0\u2014 the $x$-coordinates of vertical streets.\n\nThe third line contains $m$ integers $y_1, y_2, \\dots, y_m$ ($0 = y_1 < y_2 < \\dots < y_{m - 1} < y_m = 10^6$)\u00a0\u2014 the $y$-coordinates of horizontal streets.\n\nNext $k$ lines contains description of people. The $p$-th line contains two integers $x_p$ and $y_p$ ($0 \\le x_p, y_p \\le 10^6$; $x_p \\in \\{x_1, \\dots, x_n\\}$ or $y_p \\in \\{y_1, \\dots, y_m\\}$)\u00a0\u2014 the coordinates of the $p$-th person. All points are distinct.\n\nIt guaranteed that sum of $n$ doesn't exceed $2 \\cdot 10^5$, sum of $m$ doesn't exceed $2 \\cdot 10^5$ and sum of $k$ doesn't exceed $3 \\cdot 10^5$.", "output_specification": "Output\n\nFor each test case, print the number of inconvenient pairs.", "sample_tests": "Example\n\nInput\n2\n2 2 4\n0 1000000\n0 1000000\n1 0\n1000000 1\n999999 1000000\n0 999999\n5 4 9\n0 1 2 6 1000000\n0 4 8 1000000\n4 4\n2 5\n2 2\n6 3\n1000000 1\n3 8\n5 8\n8 8\n6 8\n\nOutput\n2\n5", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/1569/D"}
{"header": "A. Winner\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 64 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "The winner of the card game popular in Berland \"Berlogging\" is determined according to the following rules. If at the end of the game there is only one player with the maximum number of points, he is the winner. The situation becomes more difficult if the number of such players is more than one. During each round a player gains or loses a particular number of points. In the course of the game the number of points is registered in the line \"\nname score\n\", where\nname\nis a player's name, and\nscore\nis the number of points gained in this round, which is an integer number. If score is negative, this means that the player has lost in the round. So, if two or more players have the maximum number of points (say, it equals to\nm\n) at the end of the game, than wins the one\nof them\nwho scored at least\nm\npoints first. Initially each player has 0 points. It's guaranteed that at the end of the game at least one player has a positive number of points.", "input_specification": "Input\n\nThe first line contains an integer number *n* ( 1\u2009\u2009\u2264\u2009\u2009 *n* \u2009\u2009\u2264\u2009\u20091000 ), *n* is the number of rounds played. Then follow *n* lines, containing the information about the rounds in \" name score \" format in chronological order, where name is a string of lower-case Latin letters with the length from 1 to 32, and score is an integer number between -1000 and 1000, inclusive.", "output_specification": "Output\n\nPrint the name of the winner.", "sample_tests": "Examples\n\nInput\n3mike 3andrew 5mike 2\n\nOutput\nandrew\n\nInput\n3andrew 3andrew 2mike 5\n\nOutput\nandrew", "difficulty": 1500, "url": "https://codeforces.com/problemset/problem/2/A"}
{"header": "B. The least round way\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 64 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "There is a square matrix\nn\n\u00d7\nn\n, consisting of non-negative integer numbers. You should find such a way on it that\nstarts in the upper left cell of the matrix;\neach following cell is to the right or down from the current cell;\nthe way ends in the bottom right cell.\nMoreover, if we multiply together all the numbers along the way, the result should be the least \"round\". In other words, it should end in the least possible number of zeros.", "input_specification": "Input\n\nThe first line contains an integer number *n* ( 2\u2009\u2264\u2009 *n* \u2009\u2264\u20091000 ), *n* is the size of the matrix. Then follow *n* lines containing the matrix elements (non-negative integer numbers not exceeding 10 9 ).", "output_specification": "Output\n\nIn the first line print the least number of trailing zeros. In the second line print the correspondent way itself.", "sample_tests": "Examples\n\nInput\n31 2 34 5 67 8 9\n\nOutput\n0DDRR", "difficulty": 2000, "url": "https://codeforces.com/problemset/problem/2/B"}
{"header": "A. Game With Sticks\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "After winning gold and silver in IOI 2014, Akshat and Malvika want to have some fun. Now they are playing a game on a grid made of\nn\nhorizontal and\nm\nvertical sticks.\nAn\nintersection point\nis any point on the grid which is formed by the intersection of one horizontal stick and one vertical stick.\nIn the grid shown below,\nn\n=\u20093\nand\nm\n=\u20093\n. There are\nn\n+\nm\n=\u20096\nsticks in total (horizontal sticks are shown in red and vertical sticks are shown in green). There are\nn\n\u00b7\nm\n=\u20099\nintersection points, numbered from\n1\nto\n9\n.\nThe rules of the game are very simple. The players move in turns. Akshat won gold, so he makes the first move. During his/her move, a player must choose any remaining intersection point and remove from the grid all sticks which pass through this point. A player will lose the game if he/she cannot make a move (i.e. there are no intersection points remaining on the grid at his/her move).\nAssume that both players play optimally. Who will win the game?\nNote\nExplanation of the first sample:\nThe grid has four intersection points, numbered from\n1\nto\n4\n.\nIf Akshat chooses intersection point\n1\n, then he will remove two sticks (\n1\u2009-\u20092\nand\n1\u2009-\u20093\n). The resulting grid will look like this.\nNow there is only one remaining intersection point (i.e.\n4\n). Malvika must choose it and remove both remaining sticks. After her move the grid will be empty.\nIn the empty grid, Akshat cannot make any move, hence he will lose.\nSince all\n4\nintersection points of the grid are equivalent, Akshat will lose no matter which one he picks.", "input_specification": "Input\n\nThe first line of input contains two space-separated integers, *n* and *m* ( 1\u2009\u2264\u2009 *n* ,\u2009 *m* \u2009\u2264\u2009100 ).", "output_specification": "Output\n\nPrint a single line containing \" Akshat \" or \" Malvika \" (without the quotes), depending on the winner of the game.", "sample_tests": "Examples\n\nInput\n2 2\n\nOutput\nMalvika\n\nInput\n2 3\n\nOutput\nMalvika\n\nInput\n3 3\n\nOutput\nAkshat", "difficulty": 900, "url": "https://codeforces.com/problemset/problem/451/A"}
{"header": "B. Sort the Array\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Being a programmer, you like arrays a lot. For your birthday, your friends have given you an array\na\nconsisting of\nn\ndistinct\nintegers.\nUnfortunately, the size of\na\nis too small. You want a bigger array! Your friends agree to give you a bigger array, but only if you are able to answer the following question correctly: is it possible to sort the array\na\n(in increasing order) by reversing\nexactly one\nsegment of\na\n? See definitions of segment and reversing in the notes.\nNote\nSample 1. You can reverse the entire array to get\n[1,\u20092,\u20093]\n, which is sorted.\nSample 3. No segment can be reversed such that the array will be sorted.\nDefinitions\nA segment\n[\nl\n,\nr\n]\nof array\na\nis the sequence\na\n[\nl\n],\na\n[\nl\n+\u20091],\u2009...,\na\n[\nr\n]\n.\nIf you have an array\na\nof size\nn\nand you reverse its segment\n[\nl\n,\nr\n]\n, the array will become:\na\n[1],\na\n[2],\u2009...,\na\n[\nl\n-\u20092],\na\n[\nl\n-\u20091],\na\n[\nr\n],\na\n[\nr\n-\u20091],\u2009...,\na\n[\nl\n+\u20091],\na\n[\nl\n],\na\n[\nr\n+\u20091],\na\n[\nr\n+\u20092],\u2009...,\na\n[\nn\n-\u20091],\na\n[\nn\n].", "input_specification": "Input\n\nThe first line of the input contains an integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ) \u2014 the size of array *a* .\n\nThe second line contains *n* distinct space-separated integers: *a* [1],\u2009 *a* [2],\u2009...,\u2009 *a* [ *n* ] ( 1\u2009\u2264\u2009 *a* [ *i* ]\u2009\u2264\u200910 9 ).", "output_specification": "Output\n\nPrint \" yes \" or \" no \" (without quotes), depending on the answer.\n\nIf your answer is \" yes \", then also print two space-separated integers denoting start and end (start must not be greater than end) indices of the segment to be reversed. If there are multiple ways of selecting these indices, print any of them.", "sample_tests": "Examples\n\nInput\n33 2 1\n\nOutput\nyes1 3\n\nInput\n42 1 3 4\n\nOutput\nyes1 2\n\nInput\n43 1 2 4\n\nOutput\nno\n\nInput\n21 2\n\nOutput\nyes1 1", "difficulty": 1300, "url": "https://codeforces.com/problemset/problem/451/B"}
{"header": "C. Predict Outcome of the Game\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "There are\nn\ngames in a football tournament. Three teams are participating in it. Currently\nk\ngames had already been played.\nYou are an avid football fan, but recently you missed the whole\nk\ngames. Fortunately, you remember a guess of your friend for these\nk\ngames. Your friend did not tell exact number of wins of each team, instead he thought that absolute difference between number of wins of first and second team will be\nd\n1\nand that of between second and third team will be\nd\n2\n.\nYou don't want any of team win the tournament, that is each team should have the same number of wins after\nn\ngames. That's why you want to know: does there exist a valid tournament satisfying the friend's guess such that no team will win this tournament?\nNote that outcome of a match can not be a draw, it has to be either win or loss.\nNote\nSample 1. There has not been any match up to now\n(\nk\n=\u20090,\nd\n1\n=\u20090,\nd\n2\n=\u20090)\n. If there will be three matches (1-2, 2-3, 3-1) and each team wins once, then at the end each team will have 1 win.\nSample 2. You missed all the games\n(\nk\n=\u20093)\n. As\nd\n1\n=\u20090\nand\nd\n2\n=\u20090\n, and there is a way to play three games with no winner of tournament (described in the previous sample), the answer is \"\nyes\n\".\nSample 3. You missed 4 matches, and\nd\n1\n=\u20091,\nd\n2\n=\u20090\n. These four matches can be: 1-2 (win 2), 1-3 (win 3), 1-2 (win 1), 1-3 (win 1). Currently the first team has 2 wins, the second team has 1 win, the third team has 1 win. Two remaining matches can be: 1-2 (win 2), 1-3 (win 3). In the end all the teams have equal number of wins (2 wins).", "input_specification": "Input\n\nThe first line of the input contains a single integer corresponding to number of test cases *t* (1\u2009\u2264\u2009 *t* \u2009\u2264\u200910 5 ) .\n\nEach of the next *t* lines will contain four space-separated integers *n* ,\u2009 *k* ,\u2009 *d* 1 ,\u2009 *d* 2 (1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 12 ;\u00a00\u2009\u2264\u2009 *k* \u2009\u2264\u2009 *n* ;\u00a00\u2009\u2264\u2009 *d* 1 ,\u2009 *d* 2 \u2009\u2264\u2009 *k* ) \u2014 data for the current test case.", "output_specification": "Output\n\nFor each test case, output a single line containing either \" yes \" if it is possible to have no winner of tournament, or \" no \" otherwise (without quotes).", "sample_tests": "Examples\n\nInput\n53 0 0 03 3 0 06 4 1 06 3 3 03 3 3 2\n\nOutput\nyesyesyesnono", "difficulty": 1700, "url": "https://codeforces.com/problemset/problem/451/C"}
{"header": "D. Count Good Substrings\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "We call a string\ngood\n, if after merging all the consecutive equal characters, the resulting string is palindrome. For example, \"\naabba\n\" is good, because after the merging step it will become \"\naba\n\".\nGiven a string, you have to find two values:\nthe number of good substrings of even length;\nthe number of good substrings of odd length.\nNote\nIn example 1, there are three good substrings (\"\nb\n\", \"\nb\n\", and \"\nbb\n\"). One of them has even length and two of them have odd length.\nIn example 2, there are six good substrings (i.e. \"\nb\n\", \"\na\n\", \"\na\n\", \"\nb\n\", \"\naa\n\", \"\nbaab\n\"). Two of them have even length and four of them have odd length.\nIn example 3, there are seven good substrings (i.e. \"\nb\n\", \"\na\n\", \"\nb\n\", \"\nb\n\", \"\nbb\n\", \"\nbab\n\", \"\nbabb\n\"). Two of them have even length and five of them have odd length.\nDefinitions\nA substring\ns\n[\nl\n,\nr\n]\n(1\u2009\u2264\nl\n\u2264\nr\n\u2264\nn\n)\nof string\ns\n=\ns\n1\ns\n2\n...\ns\nn\nis string\ns\nl\ns\nl\n+\u20091\n...\ns\nr\n.\nA string\ns\n=\ns\n1\ns\n2\n...\ns\nn\nis a palindrome if it is equal to string\ns\nn\ns\nn\n-\u20091\n...\ns\n1\n.", "input_specification": "Input\n\nThe first line of the input contains a single string of length *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ). Each character of the string will be either ' a ' or ' b '.", "output_specification": "Output\n\nPrint two space-separated integers: the number of good substrings of even length and the number of good substrings of odd length.", "sample_tests": "Examples\n\nInput\nbb\n\nOutput\n1 2\n\nInput\nbaab\n\nOutput\n2 4\n\nInput\nbabb\n\nOutput\n2 5\n\nInput\nbabaa\n\nOutput\n2 7", "difficulty": 2000, "url": "https://codeforces.com/problemset/problem/451/D"}
{"header": "A. Omkar and Password\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Lord Omkar has permitted you to enter the Holy Church of Omkar! To test your worthiness, Omkar gives you a password which you must interpret!\nA password is an array $a$ of $n$ positive integers. You apply the following operation to the array: pick any two adjacent numbers that are not equal to each other and replace them with their sum. Formally, choose an index $i$ such that $1 \\leq i < n$ and $a_{i} \\neq a_{i+1}$, delete both $a_i$ and $a_{i+1}$ from the array and put $a_{i}+a_{i+1}$ in their place.\nFor example, for array $[7, 4, 3, 7]$ you can choose $i = 2$ and the array will become $[7, 4+3, 7] = [7, 7, 7]$. Note that in this array you can't apply this operation anymore.\nNotice that one operation will decrease the size of the password by $1$. What is the shortest possible length of the password after some number (possibly $0$) of operations?\nNote\nIn the first test case, you can do the following to achieve a length of $1$:\nPick $i=2$ to get $[2, 4, 1]$\nPick $i=1$ to get $[6, 1]$\nPick $i=1$ to get $[7]$\nIn the second test case, you can't perform any operations because there is no valid $i$ that satisfies the requirements mentioned above.", "input_specification": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). Description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$)\u00a0\u2014 the length of the password.\n\nThe second line of each test case contains $n$ integers $a_{1},a_{2},\\dots,a_{n}$ ($1 \\leq a_{i} \\leq 10^9$)\u00a0\u2014 the initial contents of your password.\n\nThe sum of $n$ over all test cases will not exceed $2 \\cdot 10^5$.", "output_specification": "Output\n\nFor each password, print one integer: the shortest possible length of the password after some number of operations.", "sample_tests": "Example\n\nInput\n2\n4\n2 1 3 1\n2\n420 420\n\nOutput\n1\n2", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1392/A"}
{"header": "B. Omkar and Infinity Clock\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Being stuck at home, Ray became extremely bored. To pass time, he asks Lord Omkar to use his time bending power: Infinity Clock! However, Lord Omkar will only listen to mortals who can solve the following problem:\nYou are given an array $a$ of $n$ integers. You are also given an integer $k$. Lord Omkar wants you to do $k$ operations with this array.\nDefine one operation as the following:\nSet $d$ to be the maximum value of your array.\nFor every $i$ from $1$ to $n$, replace $a_{i}$ with $d-a_{i}$.\nThe goal is to predict the contents in the array after $k$ operations. Please help Ray determine what the final sequence will look like!\nNote\nIn the first test case the array changes as follows:\nInitially, the array is $[-199, 192]$. $d = 192$.\nAfter the operation, the array becomes $[d-(-199), d-192] = [391, 0]$.", "input_specification": "Input\n\nEach test contains multiple test cases. The first line contains the number of cases $t$ ($1 \\le t \\le 100$). Description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\leq n \\leq 2 \\cdot 10^5, 1 \\leq k \\leq 10^{18}$) \u2013 the length of your array and the number of operations to perform.\n\nThe second line of each test case contains $n$ integers $a_{1},a_{2},...,a_{n}$ $(-10^9 \\leq a_{i} \\leq 10^9)$ \u2013 the initial contents of your array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.", "output_specification": "Output\n\nFor each case, print the final version of array $a$ after $k$ operations described above.", "sample_tests": "Example\n\nInput\n3\n2 1\n-199 192\n5 19\n5 -1 4 2 0\n1 2\n69\n\nOutput\n391 0\n0 6 1 3 5\n0", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1392/B"}
{"header": "C. Omkar and Waterslide\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Omkar is building a waterslide in his water park, and he needs your help to ensure that he does it as efficiently as possible.\nOmkar currently has $n$ supports arranged in a line, the $i$-th of which has height $a_i$. Omkar wants to build his waterslide from the right to the left, so his supports must be nondecreasing in height in order to support the waterslide. In $1$ operation, Omkar can do the following: take any\ncontiguous subsegment\nof supports which is\nnondecreasing by heights\nand add $1$ to each of their heights.\nHelp Omkar find the minimum number of operations he needs to perform to make his supports able to support his waterslide!\nAn array $b$ is a subsegment of an array $c$ if $b$ can be obtained from $c$ by deletion of several (possibly zero or all) elements from the beginning and several (possibly zero or all) elements from the end.\nAn array $b_1, b_2, \\dots, b_n$ is called nondecreasing if $b_i\\le b_{i+1}$ for every $i$ from $1$ to $n-1$.\nNote\nThe subarray with which Omkar performs the operation is bolded.\nIn the first test case:\nFirst operation:\n$[5, 3, \\textbf{2}, 5] \\to [5, 3, \\textbf{3}, 5]$\nSecond operation:\n$[5, \\textbf{3}, \\textbf{3}, 5] \\to [5, \\textbf{4}, \\textbf{4}, 5]$\nThird operation:\n$[5, \\textbf{4}, \\textbf{4}, 5] \\to [5, \\textbf{5}, \\textbf{5}, 5]$\nIn the third test case, the array is already nondecreasing, so Omkar does $0$ operations.", "input_specification": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\leq t \\leq 100$). Description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$)\u00a0\u2014 the number of supports Omkar has.\n\nThe second line of each test case contains $n$ integers $a_{1},a_{2},...,a_{n}$ $(0 \\leq a_{i} \\leq 10^9)$\u00a0\u2014 the heights of the supports.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.", "output_specification": "Output\n\nFor each test case, output a single integer\u00a0\u2014 the minimum number of operations Omkar needs to perform to make his supports able to support his waterslide.", "sample_tests": "Example\n\nInput\n3\n4\n5 3 2 5\n5\n1 2 3 5 3\n3\n1 1 1\n\nOutput\n3\n2\n0", "difficulty": 1200, "url": "https://codeforces.com/problemset/problem/1392/C"}
{"header": "D. Omkar and Bed Wars\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Omkar is playing his favorite pixelated video game, Bed Wars! In Bed Wars, there are $n$ players arranged in a circle, so that for all $j$ such that $2 \\leq j \\leq n$, player $j - 1$ is to the left of the player $j$, and player $j$ is to the right of player $j - 1$. Additionally, player $n$ is to the left of player $1$, and player $1$ is to the right of player $n$.\nCurrently, each player is attacking either the player to their left or the player to their right. This means that each player is currently being attacked by either $0$, $1$, or $2$ other players. A key element of Bed Wars strategy is that if a player is being attacked by exactly $1$ other player, then they should logically attack that player in response. If instead a player is being attacked by $0$ or $2$ other players, then Bed Wars strategy says that the player can logically attack either of the adjacent players.\nUnfortunately, it might be that some players in this game are not following Bed Wars strategy correctly. Omkar is aware of whom each player is currently attacking, and he can talk to any amount of the $n$ players in the game to make them instead attack another player \u00a0\u2014 i. e. if they are currently attacking the player to their left, Omkar can convince them to instead attack the player to their right; if they are currently attacking the player to their right, Omkar can convince them to instead attack the player to their left.\nOmkar would like all players to be acting logically. Calculate the minimum amount of players that Omkar needs to talk to so that after all players he talked to (if any) have changed which player they are attacking, all players are acting logically according to Bed Wars strategy.\nNote\nIn the first test case, players $1$ and $2$ are attacking each other, and players $3$ and $4$ are attacking each other. Each player is being attacked by exactly $1$ other player, and each player is attacking the player that is attacking them, so all players are already being logical according to Bed Wars strategy and Omkar does not need to talk to any of them, making the answer $0$.\nIn the second test case, not every player acts logically: for example, player $3$ is attacked only by player $2$, but doesn't attack him in response. Omkar can talk to player $3$ to convert the attack arrangement to\nLR\nL\nRRL\n, in which you can see that all players are being logical according to Bed Wars strategy, making the answer $1$.", "input_specification": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The descriptions of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($3 \\leq n \\leq 2 \\cdot 10^5$) \u00a0\u2014 the amount of players (and therefore beds) in this game of Bed Wars.\n\nThe second line of each test case contains a string $s$ of length $n$. The $j$-th character of $s$ is equal to L if the $j$-th player is attacking the player to their left, and R if the $j$-th player is attacking the player to their right.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.", "output_specification": "Output\n\nFor each test case, output one integer: the minimum number of players Omkar needs to talk to to make it so that all players are acting logically according to Bed Wars strategy.\n\nIt can be proven that it is always possible for Omkar to achieve this under the given constraints.", "sample_tests": "Example\n\nInput\n5\n4\nRLRL\n6\nLRRRRL\n8\nRLLRRRLL\n12\nLLLLRRLRRRLL\n5\nRRRRR\n\nOutput\n0\n1\n1\n3\n2", "difficulty": 1700, "url": "https://codeforces.com/problemset/problem/1392/D"}
{"header": "E. Omkar and Duck\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "This is an interactive problem.\nOmkar has just come across a duck! The duck is walking on a grid with $n$ rows and $n$ columns ($2 \\leq n \\leq 25$) so that the grid contains a total of $n^2$ cells. Let's denote by $(x, y)$ the cell in the $x$-th row from the top and the $y$-th column from the left. Right now, the duck is at the cell $(1, 1)$ (the cell in the top left corner) and would like to reach the cell $(n, n)$ (the cell in the bottom right corner) by moving either down $1$ cell or to the right $1$ cell each second.\nSince Omkar thinks ducks are fun, he wants to play a game with you based on the movement of the duck. First, for each cell $(x, y)$ in the grid, you will tell Omkar a nonnegative integer $a_{x,y}$ not exceeding $10^{16}$, and Omkar will then put $a_{x,y}$ uninteresting problems in the cell $(x, y)$. After that, the duck will start their journey from $(1, 1)$ to $(n, n)$. For each cell $(x, y)$ that the duck crosses during their journey (including the cells $(1, 1)$ and $(n, n)$), the duck will eat the $a_{x,y}$ uninteresting problems in that cell. Once the duck has completed their journey, Omkar will measure their mass to determine the total number $k$ of uninteresting problems that the duck ate on their journey, and then tell you $k$.\nYour challenge, given $k$, is to exactly reproduce the duck's path, i. e. to tell Omkar precisely which cells the duck crossed on their journey. To be sure of your mastery of this game, Omkar will have the duck complete $q$ different journeys ($1 \\leq q \\leq 10^3$). Note that all journeys are independent: at the beginning of each journey, the cell $(x, y)$ will still contain $a_{x,y}$ uninteresting tasks.\nInteraction\nThe interaction will begin with a line containing a single integer $n$ ($2 \\leq n \\leq 25$), the amount of rows and columns in the grid. Read it.\nYour program should then print $n$ lines. The $x$-th line should contain $n$ integers $a_{x,1}, a_{x,2}, \\dotsc, a_{x,n}$ satisfying $0 \\leq a_{x,y} \\leq 10^{16}$, where $a_{x,y}$ is the amount of uninteresting problems Omkar should place in the cell $(x, y)$.\nAfter that, you will first receive a single integer $q$, the amount of journeys that the duck will take. $q$ queries will follow; each query will consist of a single line containing an integer $k$, the amount of uninteresting problems that the duck ate on that journey. After each query, given that you have determined that the duck visited the cells $(x_1, y_1), (x_2, y_2), \\dotsc, (x_{2n - 1}, y_{2n - 1})$ in that order (it should always be true that $(x_1, y_1) = (1, 1)$ and $(x_{2n - 1}, y_{2n - 1}) = (n, n)$), you should output $2n - 1$ lines so that the $j$-th line contains the two integers $x_j, y_j$.\nBear in mind that if the sum on your path is $k$, but your path is different from the actual hidden path, then your solution is still wrong!\nAfter printing each line do not forget to output end of line and flush the output. Otherwise, you will get\nIdleness limit exceeded\n. To do this, use:\nfflush(stdout)\nor\ncout.flush()\nin C++;\nSystem.out.flush()\nin Java;\nflush(output)\nin Pascal;\nstdout.flush()\nin Python;\nsee documentation for other languages.\nHack Format\nTo hack, first output a line containing $n$ and another line containing $q$. It must be true that $2 \\leq n \\leq 25$ and $1 \\leq q \\leq 1000$. Then, output the $q$ journeys taken by the duck in the same format as described above: for each journey, given that the duck visited the cells $(x_1, y_1), (x_2, y_2), \\dotsc, (x_{2n - 1}, y_{2n - 1})$ in that order, you should output $2n - 1$ lines so that the $j$-th line contains the two integers $x_j, y_j$. It must be true that $(x_1, y_1) = (1, 1)$ and $(x_{2n - 1}, y_{2n - 1}) = (n, n)$. Additionally, for each $j$ such that $2 \\leq j \\leq 2n - 1$, it must be true that $1 \\leq x_j, y_j \\leq n$ and either $(x_j, y_j) = (x_{j - 1} + 1, y_{j - 1})$ or $(x_j, y_j) = (x_{j - 1}, y_{j - 1} + 1)$.\nNote\nThe duck's three journeys are illustrated below.\n$1 + 2 + 3 + 2 + 10 + 3 + 2 = 23$\n$1 + 4 + 9 + 0 + 7 + 3 + 2 = 26$\n$1 + 2 + 3 + 6 + 10 + 3 + 2 = 27$", "input_specification": "", "output_specification": "", "sample_tests": "Example\n\nInput\n4\n\n3\n23\n\n26\n\n27\n\nOutput\n1 2 3 6\n4 6 2 10\n9 0 7 3\n2 8 8 2\n\n1 1\n1 2\n1 3\n2 3\n2 4\n3 4\n4 4\n\n1 1\n2 1\n3 1\n3 2\n3 3\n3 4\n4 4\n\n1 1\n1 2\n1 3\n1 4\n2 4\n3 4\n4 4", "difficulty": 2100, "url": "https://codeforces.com/problemset/problem/1392/E"}
{"header": "A. Rational Resistance\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Mad scientist Mike is building a time machine in his spare time. To finish the work, he needs a resistor with a certain resistance value.\nHowever, all Mike has is lots of identical resistors with unit resistance\nR\n0\n=\u20091\n. Elements with other resistance can be constructed from these resistors. In this problem, we will consider the following as elements:\none resistor;\nan element and\none\nresistor plugged in sequence;\nan element and\none\nresistor plugged in parallel.\nWith the consecutive connection the resistance of the new element equals\nR\n=\nR\ne\n+\nR\n0\n. With the parallel connection the resistance of the new element equals\n. In this case\nR\ne\nequals the resistance of the element being connected.\nMike needs to assemble an element with a resistance equal to the fraction\n. Determine the smallest possible number of resistors he needs to make such an element.\nNote\nIn the first sample, one resistor is enough.\nIn the second sample one can connect the resistors in parallel, take the resulting element and connect it to a third resistor consecutively. Then, we get an element with resistance\n. We cannot make this element using two resistors.", "input_specification": "Input\n\nThe single input line contains two space-separated integers *a* and *b* ( 1\u2009\u2264\u2009 *a* ,\u2009 *b* \u2009\u2264\u200910 18 ). It is guaranteed that the fraction is irreducible. It is guaranteed that a solution always exists.", "output_specification": "Output\n\nPrint a single number \u2014 the answer to the problem.\n\nPlease do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is recommended to use the cin , cout streams or the %I64d specifier.", "sample_tests": "Examples\n\nInput\n1 1\n\nOutput\n1\n\nInput\n3 2\n\nOutput\n3\n\nInput\n199 200\n\nOutput\n200", "difficulty": 1600, "url": "https://codeforces.com/problemset/problem/343/A"}
{"header": "B. Alternating Current\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Mad scientist Mike has just finished constructing a new device to search for extraterrestrial intelligence! He was in such a hurry to launch it for the first time that he plugged in the power wires without giving it a proper glance and started experimenting right away. After a while Mike observed that the wires ended up entangled and now have to be untangled again.\nThe device is powered by two wires \"plus\" and \"minus\". The wires run along the floor from the wall (on the left) to the device (on the right). Both the wall and the device have two contacts in them on the same level, into which the wires are plugged in some order. The wires are considered entangled if there are one or more places where one wire runs above the other one. For example, the picture below has four such places (top view):\nMike knows the sequence in which the wires run above each other. Mike also noticed that on the left side, the \"plus\" wire is always plugged into the top contact (as seen on the picture). He would like to untangle the wires without unplugging them and\nwithout moving\nthe device. Determine if it is possible to do that. A wire can be freely moved and stretched on the floor, but cannot be cut.\nTo understand the problem better please read the notes to the test samples.\nNote\nThe first testcase corresponds to the picture in the statement. To untangle the wires, one can first move the \"plus\" wire lower, thus eliminating the two crosses in the middle, and then draw it under the \"minus\" wire, eliminating also the remaining two crosses.\nIn the second testcase the \"plus\" wire makes one full revolution around the \"minus\" wire. Thus the wires cannot be untangled:\nIn the third testcase the \"plus\" wire simply runs above the \"minus\" wire twice in sequence. The wires can be untangled by lifting \"plus\" and moving it higher:\nIn the fourth testcase the \"minus\" wire runs above the \"plus\" wire once. The wires cannot be untangled without moving the device itself:", "input_specification": "Input\n\nThe single line of the input contains a sequence of characters \" + \" and \" - \" of length *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u2009100000 ). The *i* -th ( 1\u2009\u2264\u2009 *i* \u2009\u2264\u2009 *n* ) position of the sequence contains the character \" + \", if on the *i* -th step from the wall the \"plus\" wire runs above the \"minus\" wire, and the character \" - \" otherwise.", "output_specification": "Output\n\nPrint either \" Yes \" (without the quotes) if the wires can be untangled or \" No \" (without the quotes) if the wires cannot be untangled.", "sample_tests": "Examples\n\nInput\n-++-\n\nOutput\nYes\n\nInput\n+-\n\nOutput\nNo\n\nInput\n++\n\nOutput\nYes\n\nInput\n-\n\nOutput\nNo", "difficulty": 1600, "url": "https://codeforces.com/problemset/problem/343/B"}
{"header": "C. Read Time\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Mad scientist Mike does not use slow hard disks. His modification of a hard drive has not one, but\nn\ndifferent heads that can read data in parallel.\nWhen viewed from the side, Mike's hard drive is an endless array of tracks. The tracks of the array are numbered from left to right with integers, starting with 1. In the initial state the\ni\n-th reading head is above the track number\nh\ni\n. For each of the reading heads, the hard drive's firmware can move the head exactly one track to the right or to the left, or leave it on the current track. During the operation each head's movement does not affect the movement of the other heads: the heads can change their relative order; there can be multiple reading heads above any of the tracks. A track is considered\nread\nif at least one head has visited this track. In particular, all of the tracks numbered\nh\n1\n,\nh\n2\n,\n...\n,\nh\nn\nhave been read at the beginning of the operation.\nMike needs to read the data on\nm\ndistinct tracks with numbers\np\n1\n,\np\n2\n,\n...\n,\np\nm\n. Determine the minimum time the hard drive firmware needs to move the heads and read all the given tracks. Note that an arbitrary number of other tracks can also be read.\nNote\nThe first test coincides with the figure. In this case the given tracks can be read in 2 seconds in the following way:\nduring the first second move the 1-st head to the left and let it stay there;\nmove the second head to the left twice;\nmove the third head to the right twice (note that the 6-th track has already been read at the beginning).\nOne cannot read the tracks in 1 second as the 3-rd head is at distance 2 from the 8-th track.", "input_specification": "Input\n\nThe first line of the input contains two space-separated integers *n* , *m* ( 1\u2009\u2264\u2009 *n* ,\u2009 *m* \u2009\u2264\u200910 5 ) \u2014 the number of disk heads and the number of tracks to read, accordingly. The second line contains *n* distinct integers *h* *i* in ascending order ( 1\u2009\u2264\u2009 *h* *i* \u2009\u2264\u200910 10 , *h* *i* \u2009<\u2009 *h* *i* \u2009+\u20091 ) \u2014 the initial positions of the heads. The third line contains *m* distinct integers *p* *i* in ascending order ( 1\u2009\u2264\u2009 *p* *i* \u2009\u2264\u200910 10 , *p* *i* \u2009<\u2009 *p* *i* \u2009+\u20091 ) - the numbers of tracks to read.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is recommended to use the cin , cout streams or the %I64d specifier.", "output_specification": "Output\n\nPrint a single number \u2014 the minimum time required, in seconds, to read all the needed tracks.", "sample_tests": "Examples\n\nInput\n3 42 5 61 3 6 8\n\nOutput\n2\n\nInput\n3 31 2 31 2 3\n\nOutput\n0\n\nInput\n1 2165142 200\n\nOutput\n81", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/343/C"}
{"header": "D. Water Tree\n\ntime limit per test\n 4 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Mad scientist Mike has constructed a rooted tree, which consists of\nn\nvertices. Each vertex is a reservoir which can be either empty or filled with water.\nThe vertices of the tree are numbered from 1 to\nn\nwith the root at vertex 1. For each vertex, the reservoirs of its children are located below the reservoir of this vertex, and the vertex is connected with each of the children by a pipe through which water can flow downwards.\nMike wants to do the following operations with the tree:\nFill vertex\nv\nwith water. Then\nv\nand all its children are filled with water.\nEmpty vertex\nv\n. Then\nv\nand all its ancestors are emptied.\nDetermine whether vertex\nv\nis filled with water at the moment.\nInitially all vertices of the tree are empty.\nMike has already compiled a full list of operations that he wants to perform in order. Before experimenting with the tree Mike decided to run the list through a simulation. Help Mike determine what results will he get after performing all the operations.", "input_specification": "Input\n\nThe first line of the input contains an integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u2009500000 ) \u2014 the number of vertices in the tree. Each of the following *n* \u2009-\u20091 lines contains two space-separated numbers *a* *i* , *b* *i* ( 1\u2009\u2264\u2009 *a* *i* ,\u2009 *b* *i* \u2009\u2264\u2009 *n* , *a* *i* \u2009\u2260\u2009 *b* *i* ) \u2014 the edges of the tree.\n\nThe next line contains a number *q* ( 1\u2009\u2264\u2009 *q* \u2009\u2264\u2009500000 ) \u2014 the number of operations to perform. Each of the following *q* lines contains two space-separated numbers *c* *i* ( 1\u2009\u2264\u2009 *c* *i* \u2009\u2264\u20093 ), *v* *i* ( 1\u2009\u2264\u2009 *v* *i* \u2009\u2264\u2009 *n* ), where *c* *i* is the operation type (according to the numbering given in the statement), and *v* *i* is the vertex on which the operation is performed.\n\nIt is guaranteed that the given graph is a tree.", "output_specification": "Output\n\nFor each type 3 operation print 1 on a separate line if the vertex is full, and 0 if the vertex is empty. Print the answers to queries in the order in which the queries are given in the input.", "sample_tests": "Examples\n\nInput\n51 25 12 34 2121 12 33 13 23 33 41 22 43 13 33 43 5\n\nOutput\n00010101", "difficulty": 2100, "url": "https://codeforces.com/problemset/problem/343/D"}
{"header": "A. Finite or not?\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given several queries. Each query consists of three integers $p$, $q$ and $b$. You need to answer whether the result of $p/q$ in notation with base $b$ is a finite fraction.\nA fraction in notation with base $b$ is finite if it contains finite number of numerals after the decimal point. It is also possible that a fraction has zero numerals after the decimal point.\nNote\n$\\frac{6}{12} = \\frac{1}{2} = 0,5_{10}$\n$\\frac{4}{3} = 1,(3)_{10}$\n$\\frac{9}{36} = \\frac{1}{4} = 0,01_2$\n$\\frac{4}{12} = \\frac{1}{3} = 0,1_3$", "input_specification": "Input\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of queries.\n\nNext $n$ lines contain queries, one per line. Each line contains three integers $p$, $q$, and $b$ ($0 \\le p \\le 10^{18}$, $1 \\le q \\le 10^{18}$, $2 \\le b \\le 10^{18}$). All numbers are given in notation with base $10$.", "output_specification": "Output\n\nFor each question, in a separate line, print Finite if the fraction is finite and Infinite otherwise.", "sample_tests": "Examples\n\nInput\n26 12 104 3 10\n\nOutput\nFiniteInfinite\n\nInput\n41 1 29 36 24 12 33 5 4\n\nOutput\nFiniteFiniteFiniteInfinite", "difficulty": 1700, "url": "https://codeforces.com/problemset/problem/983/A"}
{"header": "B. XOR-pyramid\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 512 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "For an array $b$ of length $m$ we define the function $f$ as\n$ f(b) = \\begin{cases} b[1] & \\quad \\text{if } m = 1 \\\\ f(b[1] \\oplus b[2],b[2] \\oplus b[3],\\dots,b[m-1] \\oplus b[m]) & \\quad \\text{otherwise,} \\end{cases} $\nwhere $\\oplus$ is\nbitwise exclusive OR\n.\nFor example, $f(1,2,4,8)=f(1\\oplus2,2\\oplus4,4\\oplus8)=f(3,6,12)=f(3\\oplus6,6\\oplus12)=f(5,10)=f(5\\oplus10)=f(15)=15$\nYou are given an array $a$ and a few queries. Each query is represented as two integers $l$ and $r$. The answer is the maximum value of $f$ on all continuous subsegments of the array $a_l, a_{l+1}, \\ldots, a_r$.\nNote\nIn first sample in both queries the maximum value of the function is reached on the subsegment that is equal to the whole segment.\nIn second sample, optimal segment for first query are $[3,6]$, for second query \u2014 $[2,5]$, for third \u2014 $[3,4]$, for fourth \u2014 $[1,2]$.", "input_specification": "Input\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 5000$)\u00a0\u2014 the length of $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 2^{30}-1$)\u00a0\u2014 the elements of the array.\n\nThe third line contains a single integer $q$ ($1 \\le q \\le 100\\,000$)\u00a0\u2014 the number of queries.\n\nEach of the next $q$ lines contains a query represented as two integers $l$, $r$ ($1 \\le l \\le r \\le n$).", "output_specification": "Output\n\nPrint $q$ lines\u00a0\u2014 the answers for the queries.", "sample_tests": "Examples\n\nInput\n38 4 122 31 2\n\nOutput\n512\n\nInput\n61 2 4 8 16 3241 62 53 41 2\n\nOutput\n6030123", "difficulty": 1800, "url": "https://codeforces.com/problemset/problem/983/B"}
{"header": "A. Codecraft III\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Today Vasya visited a widely known site and learned that the continuation of his favourite game Codecraft II will appear after exactly\nk\nmonths. He looked at the calendar and learned that at the moment is the month number\ns\n. Vasya immediately got interested in what month Codecraft III will appear. Help him understand that.\nAll the twelve months in Vasya's calendar are named using their usual English names:\nJanuary\n,\nFebruary\n,\nMarch\n,\nApril\n,\nMay\n,\nJune\n,\nJuly\n,\nAugust\n,\nSeptember\n,\nOctober\n,\nNovember\n,\nDecember\n.", "input_specification": "Input\n\nThe first input line contains the name of the current month. It is guaranteed that it is a proper English name of one of twelve months. The first letter is uppercase, the rest are lowercase. The second line contains integer *k* ( 0\u2009\u2264\u2009 *k* \u2009\u2264\u2009100 ) \u2014 the number of months left till the appearance of Codecraft III.", "output_specification": "Output\n\nPrint starting from an uppercase letter the name of the month in which the continuation of Codeforces II will appear. The printed name must be contained in the list January , February , March , April , May , June , July , August , September , October , November , December .", "sample_tests": "Examples\n\nInput\nNovember3\n\nOutput\nFebruary\n\nInput\nMay24\n\nOutput\nMay", "difficulty": 900, "url": "https://codeforces.com/problemset/problem/45/A"}
{"header": "B. School\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "There are\nn\nstudents studying in the 6th grade, in group \"B\" of a berland secondary school. Every one of them has exactly one friend whom he calls when he has some news. Let us denote the friend of the person number\ni\nby\ng\n(\ni\n)\n. Note that the friendships are not mutual, i.e.\ng\n(\ng\n(\ni\n))\nis not necessarily equal to\ni\n.\nOn day\ni\nthe person numbered as\na\ni\nlearns the news with the rating of\nb\ni\n(\nb\ni\n\u2265\u20091\n). He phones the friend immediately and tells it. While he is doing it, the news becomes old and its rating falls a little and becomes equal to\nb\ni\n-\u20091\n. The friend does the same thing \u2014 he also calls his friend and also tells the news. The friend of the friend gets the news already rated as\nb\ni\n-\u20092\n. It all continues until the rating of the news reaches zero as nobody wants to tell the news with zero rating.\nMore formally, everybody acts like this: if a person\nx\nlearns the news with a non-zero rating\ny\n, he calls his friend\ng\n(\ni\n)\nand his friend learns the news with the rating of\ny\n-\u20091\nand, if it is possible, continues the process.\nLet us note that during a day one and the same person may call his friend and tell him one and the same news with different ratings. Thus, the news with the rating of\nb\ni\nwill lead to as much as\nb\ni\ncalls.\nYour task is to count the values of\nres\ni\n\u2014 how many students learned their first news on day\ni\n.\nThe values of\nb\ni\nare known initially, whereas\na\ni\nis determined from the following formula:\nwhere mod stands for the operation of taking the excess from the cleavage,\nres\n0\nis considered equal to zero and\nv\ni\n\u2014 some given integers.", "input_specification": "Input\n\nThe first line contains two space-separated integers *n* and *m* ( 2\u2009\u2264\u2009 *n* ,\u2009 *m* \u2009\u2264\u200910 5 ) \u2014 the number of students and the number of days. The second line contains *n* space-separated integers *g* ( *i* ) ( 1\u2009\u2264\u2009 *g* ( *i* )\u2009\u2264\u2009 *n* ,\u2009 *g* ( *i* )\u2009\u2260\u2009 *i* ) \u2014 the number of a friend of the *i* -th student. The third line contains *m* space-separated integers *v* *i* ( 1\u2009\u2264\u2009 *v* *i* \u2009\u2264\u200910 7 ). The fourth line contains *m* space-separated integers *b* *i* ( 1\u2009\u2264\u2009 *b* *i* \u2009\u2264\u200910 7 ).", "output_specification": "Output\n\nPrint *m* lines containing one number each. The *i* -th line should contain *res* *i* \u2014 for what number of students the first news they've learned over the *m* days in question, was the news number *i* . The number of the news is the number of the day on which it can be learned. The days are numbered starting from one in the order in which they are given in the input file. Don't output *res* 0 .", "sample_tests": "Examples\n\nInput\n3 42 3 11 2 3 41 2 3 4\n\nOutput\n1110\n\nInput\n8 67 6 4 2 3 5 5 710 4 3 8 9 11 1 1 2 2 2\n\nOutput\n111211", "difficulty": 2200, "url": "https://codeforces.com/problemset/problem/45/B"}
{"header": "C. Dancing Lessons\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "There are\nn\npeople taking dancing lessons. Every person is characterized by his/her dancing skill\na\ni\n. At the beginning of the lesson they line up from left to right. While there is at least one couple of a boy and a girl in the line, the following process is repeated: the boy and girl who stand next to each other, having the minimal difference in dancing skills start to dance. If there are several such couples, the one first from the left starts to dance. After a couple leaves to dance, the line closes again, i.e. as a result the line is always continuous. The difference in dancing skills is understood as the absolute value of difference of\na\ni\nvariable. Your task is to find out what pairs and in what order will start dancing.", "input_specification": "Input\n\nThe first line contains an integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u20092\u00b710 5 ) \u2014 the number of people. The next line contains *n* symbols B or G without spaces. B stands for a boy, G stands for a girl. The third line contains *n* space-separated integers *a* *i* ( 1\u2009\u2264\u2009 *a* *i* \u2009\u2264\u200910 7 ) \u2014 the dancing skill. People are specified from left to right in the order in which they lined up.", "output_specification": "Output\n\nPrint the resulting number of couples *k* . Then print *k* lines containing two numerals each \u2014 the numbers of people forming the couple. The people are numbered with integers from 1 to *n* from left to right. When a couple leaves to dance you shouldn't renumber the people. The numbers in one couple should be sorted in the increasing order. Print the couples in the order in which they leave to dance.", "sample_tests": "Examples\n\nInput\n4BGBG4 2 4 3\n\nOutput\n23 41 2\n\nInput\n4BBGG4 6 1 5\n\nOutput\n22 31 4\n\nInput\n4BGBB1 1 2 3\n\nOutput\n11 2", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/45/C"}
{"header": "D. Event Dates\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "On a history lesson the teacher asked Vasya to name the dates when\nn\nfamous events took place. He doesn't remembers the exact dates but he remembers a segment of days\n[\nl\ni\n,\nr\ni\n]\n(inclusive) on which the event could have taken place. However Vasya also remembers that there was at most one event in one day. Help him choose such\nn\ndates of famous events that will fulfill both conditions. It is guaranteed that it is possible.", "input_specification": "Input\n\nThe first line contains one integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u2009100 ) \u2014 the number of known events. Then follow *n* lines containing two integers *l* *i* and *r* *i* each ( 1\u2009\u2264\u2009 *l* *i* \u2009\u2264\u2009 *r* *i* \u2009\u2264\u200910 7 ) \u2014 the earliest acceptable date and the latest acceptable date of the *i* -th event.", "output_specification": "Output\n\nPrint *n* numbers \u2014 the dates on which the events took place. If there are several solutions, print any of them. It is guaranteed that a solution exists.", "sample_tests": "Examples\n\nInput\n31 22 33 4\n\nOutput\n1 2 3 \n\nInput\n21 31 3\n\nOutput\n1 2", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/45/D"}
{"header": "E. Director\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Vasya is a born Berland film director, he is currently working on a new blockbuster, \"The Unexpected\". Vasya knows from his own experience how important it is to choose the main characters' names and surnames wisely. He made up a list of\nn\nnames and\nn\nsurnames that he wants to use. Vasya haven't decided yet how to call characters, so he is free to match any name to any surname. Now he has to make the list of all the main characters in the following format: \"\nName\n1\nSurname\n1\n,\nName\n2\nSurname\n2\n,\n...\n,\nName\nn\nSurname\nn\n\", i.e. all the name-surname pairs should be separated by exactly one comma and exactly one space, and the name should be separated from the surname by exactly one space. First of all Vasya wants to maximize the number of the pairs, in which the name and the surname start from one letter. If there are several such variants, Vasya wants to get the lexicographically minimal one. Help him.\nAn answer will be verified a line in the format as is shown above, including the needed commas and spaces. It's the lexicographical minimality of such a line that needs to be ensured. The output line\nshouldn't end with a space or with a comma\n.", "input_specification": "Input\n\nThe first input line contains number *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u2009100 ) \u2014 the number of names and surnames. Then follow *n* lines \u2014 the list of names. Then follow *n* lines \u2014 the list of surnames. No two from those 2 *n* strings match. Every name and surname is a non-empty string consisting of no more than 10 Latin letters. It is guaranteed that the first letter is uppercase and the rest are lowercase.", "output_specification": "Output\n\nThe output data consist of a single line \u2014 the needed list. Note that one should follow closely the output data format!", "sample_tests": "Examples\n\nInput\n4AnnAnnaSabrinaJohnPetrovIvanovaStoltzAbacaba\n\nOutput\nAnn Abacaba, Anna Ivanova, John Petrov, Sabrina Stoltz\n\nInput\n4AaAbAcBaAdAeBbBc\n\nOutput\nAa Ad, Ab Ae, Ac Bb, Ba Bc", "difficulty": 2000, "url": "https://codeforces.com/problemset/problem/45/E"}
{"header": "A. Flipping Game\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Iahub got bored, so he invented a game to be played on paper.\nHe writes\nn\nintegers\na\n1\n,\na\n2\n,\u2009...,\na\nn\n. Each of those integers can be either 0 or 1. He's allowed to do exactly one move: he chooses two indices\ni\nand\nj\n(\n1\u2009\u2264\ni\n\u2264\nj\n\u2264\nn\n) and flips all values\na\nk\nfor which their positions are in range\n[\ni\n,\nj\n]\n(that is\ni\n\u2264\nk\n\u2264\nj\n). Flip the value of\nx\nmeans to apply operation\nx\n=\u20091\n-\nx\n.\nThe goal of the game is that after\nexactly\none move to obtain the maximum number of ones. Write a program to solve the little game of Iahub.\nNote\nIn the first case, flip the segment from 2 to 5\n(\ni\n=\u20092,\nj\n=\u20095)\n. That flip changes the sequence, it becomes: [1 1 1 0 1]. So, it contains four ones. There is no way to make the whole sequence equal to [1 1 1 1 1].\nIn the second case, flipping only the second and the third element\n(\ni\n=\u20092,\nj\n=\u20093)\nwill turn all numbers into 1.", "input_specification": "Input\n\nThe first line of the input contains an integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u2009100 ). In the second line of the input there are *n* integers: *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* . It is guaranteed that each of those *n* values is either 0 or 1.", "output_specification": "Output\n\nPrint an integer \u2014 the maximal number of 1s that can be obtained after exactly one move.", "sample_tests": "Examples\n\nInput\n51 0 0 1 0\n\nOutput\n4\n\nInput\n41 0 0 1\n\nOutput\n4", "difficulty": 1200, "url": "https://codeforces.com/problemset/problem/327/A"}
{"header": "B. Hungry Sequence\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Iahub and Iahubina went to a date at a luxury restaurant. Everything went fine until paying for the food. Instead of money, the waiter wants Iahub to write a Hungry sequence consisting of\nn\nintegers.\nA sequence\na\n1\n,\na\n2\n, ...,\na\nn\n, consisting of\nn\nintegers, is\nHungry\nif and only if:\nIts elements are in increasing order. That is an inequality\na\ni\n<\na\nj\nholds for any two indices\ni\n,\nj\n(\ni\n<\nj\n)\n.\nFor any two indices\ni\nand\nj\n(\ni\n<\nj\n)\n,\na\nj\nmust\nnot\nbe divisible by\na\ni\n.\nIahub is in trouble, so he asks you for help. Find a Hungry sequence with\nn\nelements.", "input_specification": "Input\n\nThe input contains a single integer: *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ).", "output_specification": "Output\n\nOutput a line that contains *n* space-separated integers *a* 1 *a* 2 , ..., *a* *n* (1\u2009\u2264\u2009 *a* *i* \u2009\u2264\u200910 7 ) , representing a possible Hungry sequence. Note, that each *a* *i* must not be greater than 10000000 ( 10 7 ) and less than 1 .\n\nIf there are multiple solutions you can output any one.", "sample_tests": "Examples\n\nInput\n3\n\nOutput\n2 9 15\n\nInput\n5\n\nOutput\n11 14 20 27 31", "difficulty": 1200, "url": "https://codeforces.com/problemset/problem/327/B"}
{"header": "C. Magic Five\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "There is a long plate\ns\ncontaining\nn\ndigits. Iahub wants to delete some digits (possibly none, but he is not allowed to delete all the digits) to form his \"magic number\" on the plate, a number that is divisible by\n5\n. Note that, the resulting number may contain leading zeros.\nNow Iahub wants to count the number of ways he can obtain magic number, modulo\n1000000007\n(\n10\n9\n+\u20097\n). Two ways are different, if the set of deleted positions in\ns\ndiffers.\nLook at the input part of the statement,\ns\nis given in a special form.\nNote\nIn the first case, there are four possible ways to make a number that is divisible by 5: 5, 15, 25 and 125.\nIn the second case, remember to concatenate the copies of\na\n. The actual plate is 1399013990.\nIn the third case, except deleting all digits, any choice will do. Therefore there are\n2\n6\n-\u20091\u2009=\u200963\npossible ways to delete digits.", "input_specification": "Input\n\nIn the first line you're given a string *a* ( 1\u2009\u2264\u2009| *a* |\u2009\u2264\u200910 5 ), containing digits only. In the second line you're given an integer *k* ( 1\u2009\u2264\u2009 *k* \u2009\u2264\u200910 9 ). The plate *s* is formed by concatenating *k* copies of *a* together. That is *n* \u2009=\u2009| *a* |\u00b7 *k* .", "output_specification": "Output\n\nPrint a single integer \u2014 the required number of ways modulo 1000000007 ( 10 9 \u2009+\u20097 ).", "sample_tests": "Examples\n\nInput\n12561\n\nOutput\n4\n\nInput\n139902\n\nOutput\n528\n\nInput\n5552\n\nOutput\n63", "difficulty": 1700, "url": "https://codeforces.com/problemset/problem/327/C"}
{"header": "D. Block Tower\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "After too much playing on paper, Iahub has switched to computer games. The game he plays is called \"Block Towers\". It is played in a rectangular grid with\nn\nrows and\nm\ncolumns (it contains\nn\n\u00d7\nm\ncells). The goal of the game is to build your own city. Some cells in the grid are big holes, where Iahub can't build any building. The rest of cells are empty. In some empty cell Iahub can build exactly one tower of two following types:\nBlue towers. Each has population limit equal to\n100\n.\nRed towers. Each has population limit equal to\n200\n. However, it can be built in some cell only if in that moment at least one of the neighbouring cells has a Blue Tower. Two cells are neighbours is they share a side.\nIahub is also allowed to destroy a building from any cell. He can do this operation as much as he wants. After destroying a building, the other buildings are not influenced, and the destroyed cell becomes empty (so Iahub can build a tower in this cell if needed, see the second example for such a case).\nIahub can convince as many population as he wants to come into his city. So he needs to configure his city to allow maximum population possible. Therefore he should find a sequence of operations that builds the city in an optimal way, so that total population limit is as large as possible.\nHe says he's the best at this game, but he doesn't have the optimal solution. Write a program that calculates the optimal one, to show him that he's not as good as he thinks.", "input_specification": "Input\n\nThe first line of the input contains two integers *n* and *m* ( 1\u2009\u2264\u2009 *n* ,\u2009 *m* \u2009\u2264\u2009500 ). Each of the next *n* lines contains *m* characters, describing the grid. The *j* -th character in the *i* -th line is ' . ' if you're allowed to build at the cell with coordinates ( *i* ,\u2009 *j* ) a tower (empty cell) or ' # ' if there is a big hole there.", "output_specification": "Output\n\nPrint an integer *k* in the first line (0\u2009\u2264\u2009 *k* \u2009\u2264\u200910 6 ) \u2014 the number of operations Iahub should perform to obtain optimal result.\n\nEach of the following *k* lines must contain a single operation in the following format:\n\n \u00ab B x y \u00bb (1\u2009\u2264\u2009 *x* \u2009\u2264\u2009 *n* ,\u20091\u2009\u2264\u2009 *y* \u2009\u2264\u2009 *m* ) \u2014 building a blue tower at the cell ( *x* ,\u2009 *y* ) ; \u00ab R x y \u00bb (1\u2009\u2264\u2009 *x* \u2009\u2264\u2009 *n* ,\u20091\u2009\u2264\u2009 *y* \u2009\u2264\u2009 *m* ) \u2014 building a red tower at the cell ( *x* ,\u2009 *y* ) ; \u00ab D x y \u00bb (1\u2009\u2264\u2009 *x* \u2009\u2264\u2009 *n* ,\u20091\u2009\u2264\u2009 *y* \u2009\u2264\u2009 *m* ) \u2014 destroying a tower at the cell ( *x* ,\u2009 *y* ) . \n\nIf there are multiple solutions you can output any of them. Note, that you shouldn't minimize the number of operations.", "sample_tests": "Examples\n\nInput\n2 3..#.#.\n\nOutput\n4B 1 1R 1 2R 2 1B 2 3\n\nInput\n1 3...\n\nOutput\n5B 1 1B 1 2R 1 3D 1 2R 1 2", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/327/D"}
{"header": "A. Game With Sticks\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "After winning gold and silver in IOI 2014, Akshat and Malvika want to have some fun. Now they are playing a game on a grid made of\nn\nhorizontal and\nm\nvertical sticks.\nAn\nintersection point\nis any point on the grid which is formed by the intersection of one horizontal stick and one vertical stick.\nIn the grid shown below,\nn\n=\u20093\nand\nm\n=\u20093\n. There are\nn\n+\nm\n=\u20096\nsticks in total (horizontal sticks are shown in red and vertical sticks are shown in green). There are\nn\n\u00b7\nm\n=\u20099\nintersection points, numbered from\n1\nto\n9\n.\nThe rules of the game are very simple. The players move in turns. Akshat won gold, so he makes the first move. During his/her move, a player must choose any remaining intersection point and remove from the grid all sticks which pass through this point. A player will lose the game if he/she cannot make a move (i.e. there are no intersection points remaining on the grid at his/her move).\nAssume that both players play optimally. Who will win the game?\nNote\nExplanation of the first sample:\nThe grid has four intersection points, numbered from\n1\nto\n4\n.\nIf Akshat chooses intersection point\n1\n, then he will remove two sticks (\n1\u2009-\u20092\nand\n1\u2009-\u20093\n). The resulting grid will look like this.\nNow there is only one remaining intersection point (i.e.\n4\n). Malvika must choose it and remove both remaining sticks. After her move the grid will be empty.\nIn the empty grid, Akshat cannot make any move, hence he will lose.\nSince all\n4\nintersection points of the grid are equivalent, Akshat will lose no matter which one he picks.", "input_specification": "Input\n\nThe first line of input contains two space-separated integers, *n* and *m* ( 1\u2009\u2264\u2009 *n* ,\u2009 *m* \u2009\u2264\u2009100 ).", "output_specification": "Output\n\nPrint a single line containing \" Akshat \" or \" Malvika \" (without the quotes), depending on the winner of the game.", "sample_tests": "Examples\n\nInput\n2 2\n\nOutput\nMalvika\n\nInput\n2 3\n\nOutput\nMalvika\n\nInput\n3 3\n\nOutput\nAkshat", "difficulty": 900, "url": "https://codeforces.com/problemset/problem/451/A"}
{"header": "B. Sort the Array\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Being a programmer, you like arrays a lot. For your birthday, your friends have given you an array\na\nconsisting of\nn\ndistinct\nintegers.\nUnfortunately, the size of\na\nis too small. You want a bigger array! Your friends agree to give you a bigger array, but only if you are able to answer the following question correctly: is it possible to sort the array\na\n(in increasing order) by reversing\nexactly one\nsegment of\na\n? See definitions of segment and reversing in the notes.\nNote\nSample 1. You can reverse the entire array to get\n[1,\u20092,\u20093]\n, which is sorted.\nSample 3. No segment can be reversed such that the array will be sorted.\nDefinitions\nA segment\n[\nl\n,\nr\n]\nof array\na\nis the sequence\na\n[\nl\n],\na\n[\nl\n+\u20091],\u2009...,\na\n[\nr\n]\n.\nIf you have an array\na\nof size\nn\nand you reverse its segment\n[\nl\n,\nr\n]\n, the array will become:\na\n[1],\na\n[2],\u2009...,\na\n[\nl\n-\u20092],\na\n[\nl\n-\u20091],\na\n[\nr\n],\na\n[\nr\n-\u20091],\u2009...,\na\n[\nl\n+\u20091],\na\n[\nl\n],\na\n[\nr\n+\u20091],\na\n[\nr\n+\u20092],\u2009...,\na\n[\nn\n-\u20091],\na\n[\nn\n].", "input_specification": "Input\n\nThe first line of the input contains an integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ) \u2014 the size of array *a* .\n\nThe second line contains *n* distinct space-separated integers: *a* [1],\u2009 *a* [2],\u2009...,\u2009 *a* [ *n* ] ( 1\u2009\u2264\u2009 *a* [ *i* ]\u2009\u2264\u200910 9 ).", "output_specification": "Output\n\nPrint \" yes \" or \" no \" (without quotes), depending on the answer.\n\nIf your answer is \" yes \", then also print two space-separated integers denoting start and end (start must not be greater than end) indices of the segment to be reversed. If there are multiple ways of selecting these indices, print any of them.", "sample_tests": "Examples\n\nInput\n33 2 1\n\nOutput\nyes1 3\n\nInput\n42 1 3 4\n\nOutput\nyes1 2\n\nInput\n43 1 2 4\n\nOutput\nno\n\nInput\n21 2\n\nOutput\nyes1 1", "difficulty": 1300, "url": "https://codeforces.com/problemset/problem/451/B"}
{"header": "C. Predict Outcome of the Game\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "There are\nn\ngames in a football tournament. Three teams are participating in it. Currently\nk\ngames had already been played.\nYou are an avid football fan, but recently you missed the whole\nk\ngames. Fortunately, you remember a guess of your friend for these\nk\ngames. Your friend did not tell exact number of wins of each team, instead he thought that absolute difference between number of wins of first and second team will be\nd\n1\nand that of between second and third team will be\nd\n2\n.\nYou don't want any of team win the tournament, that is each team should have the same number of wins after\nn\ngames. That's why you want to know: does there exist a valid tournament satisfying the friend's guess such that no team will win this tournament?\nNote that outcome of a match can not be a draw, it has to be either win or loss.\nNote\nSample 1. There has not been any match up to now\n(\nk\n=\u20090,\nd\n1\n=\u20090,\nd\n2\n=\u20090)\n. If there will be three matches (1-2, 2-3, 3-1) and each team wins once, then at the end each team will have 1 win.\nSample 2. You missed all the games\n(\nk\n=\u20093)\n. As\nd\n1\n=\u20090\nand\nd\n2\n=\u20090\n, and there is a way to play three games with no winner of tournament (described in the previous sample), the answer is \"\nyes\n\".\nSample 3. You missed 4 matches, and\nd\n1\n=\u20091,\nd\n2\n=\u20090\n. These four matches can be: 1-2 (win 2), 1-3 (win 3), 1-2 (win 1), 1-3 (win 1). Currently the first team has 2 wins, the second team has 1 win, the third team has 1 win. Two remaining matches can be: 1-2 (win 2), 1-3 (win 3). In the end all the teams have equal number of wins (2 wins).", "input_specification": "Input\n\nThe first line of the input contains a single integer corresponding to number of test cases *t* (1\u2009\u2264\u2009 *t* \u2009\u2264\u200910 5 ) .\n\nEach of the next *t* lines will contain four space-separated integers *n* ,\u2009 *k* ,\u2009 *d* 1 ,\u2009 *d* 2 (1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 12 ;\u00a00\u2009\u2264\u2009 *k* \u2009\u2264\u2009 *n* ;\u00a00\u2009\u2264\u2009 *d* 1 ,\u2009 *d* 2 \u2009\u2264\u2009 *k* ) \u2014 data for the current test case.", "output_specification": "Output\n\nFor each test case, output a single line containing either \" yes \" if it is possible to have no winner of tournament, or \" no \" otherwise (without quotes).", "sample_tests": "Examples\n\nInput\n53 0 0 03 3 0 06 4 1 06 3 3 03 3 3 2\n\nOutput\nyesyesyesnono", "difficulty": 1700, "url": "https://codeforces.com/problemset/problem/451/C"}
{"header": "D. Count Good Substrings\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "We call a string\ngood\n, if after merging all the consecutive equal characters, the resulting string is palindrome. For example, \"\naabba\n\" is good, because after the merging step it will become \"\naba\n\".\nGiven a string, you have to find two values:\nthe number of good substrings of even length;\nthe number of good substrings of odd length.\nNote\nIn example 1, there are three good substrings (\"\nb\n\", \"\nb\n\", and \"\nbb\n\"). One of them has even length and two of them have odd length.\nIn example 2, there are six good substrings (i.e. \"\nb\n\", \"\na\n\", \"\na\n\", \"\nb\n\", \"\naa\n\", \"\nbaab\n\"). Two of them have even length and four of them have odd length.\nIn example 3, there are seven good substrings (i.e. \"\nb\n\", \"\na\n\", \"\nb\n\", \"\nb\n\", \"\nbb\n\", \"\nbab\n\", \"\nbabb\n\"). Two of them have even length and five of them have odd length.\nDefinitions\nA substring\ns\n[\nl\n,\nr\n]\n(1\u2009\u2264\nl\n\u2264\nr\n\u2264\nn\n)\nof string\ns\n=\ns\n1\ns\n2\n...\ns\nn\nis string\ns\nl\ns\nl\n+\u20091\n...\ns\nr\n.\nA string\ns\n=\ns\n1\ns\n2\n...\ns\nn\nis a palindrome if it is equal to string\ns\nn\ns\nn\n-\u20091\n...\ns\n1\n.", "input_specification": "Input\n\nThe first line of the input contains a single string of length *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ). Each character of the string will be either ' a ' or ' b '.", "output_specification": "Output\n\nPrint two space-separated integers: the number of good substrings of even length and the number of good substrings of odd length.", "sample_tests": "Examples\n\nInput\nbb\n\nOutput\n1 2\n\nInput\nbaab\n\nOutput\n2 4\n\nInput\nbabb\n\nOutput\n2 5\n\nInput\nbabaa\n\nOutput\n2 7", "difficulty": 2000, "url": "https://codeforces.com/problemset/problem/451/D"}
{"header": "A. Dragons\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Kirito is stuck on a level of the MMORPG he is playing now. To move on in the game, he's got to defeat all\nn\ndragons that live on this level. Kirito and the dragons have\nstrength\n, which is represented by an integer. In the duel between two opponents the duel's outcome is determined by their strength. Initially, Kirito's strength equals\ns\n.\nIf Kirito starts duelling with the\ni\n-th (\n1\u2009\u2264\ni\n\u2264\nn\n) dragon and Kirito's strength is not greater than the dragon's strength\nx\ni\n, then Kirito loses the duel and dies. But if Kirito's strength is greater than the dragon's strength, then he defeats the dragon and gets a bonus strength increase by\ny\ni\n.\nKirito can fight the dragons in any order. Determine whether he can move on to the next level of the game, that is, defeat all dragons without a single loss.\nNote\nIn the first sample Kirito's strength initially equals 2. As the first dragon's strength is less than 2, Kirito can fight it and defeat it. After that he gets the bonus and his strength increases to\n2\u2009+\u200999\u2009=\u2009101\n. Now he can defeat the second dragon and move on to the next level.\nIn the second sample Kirito's strength is too small to defeat the only dragon and win.", "input_specification": "Input\n\nThe first line contains two space-separated integers *s* and *n* ( 1\u2009\u2264\u2009 *s* \u2009\u2264\u200910 4 , 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 3 ). Then *n* lines follow: the *i* -th line contains space-separated integers *x* *i* and *y* *i* ( 1\u2009\u2264\u2009 *x* *i* \u2009\u2264\u200910 4 , 0\u2009\u2264\u2009 *y* *i* \u2009\u2264\u200910 4 ) \u2014 the *i* -th dragon's strength and the bonus for defeating it.", "output_specification": "Output\n\nOn a single line print \" YES \" (without the quotes), if Kirito can move on to the next level and print \" NO \" (without the quotes), if he can't.", "sample_tests": "Examples\n\nInput\n2 21 99100 0\n\nOutput\nYES\n\nInput\n10 1100 100\n\nOutput\nNO", "difficulty": 1000, "url": "https://codeforces.com/problemset/problem/230/A"}
{"header": "B. T-primes\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "We know that prime numbers are positive integers that have exactly two distinct positive divisors. Similarly, we'll call a positive integer\nt\n\u0422-prime\n, if\nt\nhas exactly three distinct positive divisors.\nYou are given an array of\nn\npositive integers. For each of them determine whether it is \u0422-prime or not.\nNote\nThe given test has three numbers. The first number 4 has exactly three divisors \u2014 1, 2 and 4, thus the answer for this number is \"\nYES\n\". The second number 5 has two divisors (1 and 5), and the third number 6 has four divisors (1, 2, 3, 6), hence the answer for them is \"\nNO\n\".", "input_specification": "Input\n\nThe first line contains a single positive integer, *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ), showing how many numbers are in the array. The next line contains *n* space-separated integers *x* *i* ( 1\u2009\u2264\u2009 *x* *i* \u2009\u2264\u200910 12 ).\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is advised to use the cin , cout streams or the %I64d specifier.", "output_specification": "Output\n\nPrint *n* lines: the *i* -th line should contain \" YES \" (without the quotes), if number *x* *i* is \u0422-prime, and \" NO \" (without the quotes), if it isn't.", "sample_tests": "Examples\n\nInput\n34 5 6\n\nOutput\nYESNONO", "difficulty": 1300, "url": "https://codeforces.com/problemset/problem/230/B"}
{"header": "C. Shifts\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "You are given a table consisting of\nn\nrows and\nm\ncolumns. Each cell of the table contains a number, 0 or 1. In one move we can choose some row of the table and cyclically shift its values either one cell to the left, or one cell to the right.\nTo\ncyclically shift\na table row one cell to the right means to move the value of each cell, except for the last one, to the right neighboring cell, and to move the value of the last cell to the first cell. A cyclical shift of a row to the left is performed similarly, but in the other direction. For example, if we cyclically shift a row \"\n00110\n\" one cell to the right, we get a row \"\n00011\n\", but if we shift a row \"\n00110\n\" one cell to the left, we get a row \"\n01100\n\".\nDetermine the minimum number of moves needed to make some table column consist only of numbers 1.\nNote\nIn the first sample one way to achieve the goal with the least number of moves is as follows: cyclically shift the second row to the right once, then shift the third row to the left twice. Then the table column before the last one will contain only 1s.\nIn the second sample one can't shift the rows to get a column containing only 1s.", "input_specification": "Input\n\nThe first line contains two space-separated integers: *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u2009100 )\u00a0\u2014 the number of rows in the table and *m* ( 1\u2009\u2264\u2009 *m* \u2009\u2264\u200910 4 )\u00a0\u2014 the number of columns in the table. Then *n* lines follow, each of them contains *m* characters \" 0 \" or \" 1 \": the *j* -th character of the *i* -th line describes the contents of the cell in the *i* -th row and in the *j* -th column of the table.\n\nIt is guaranteed that the description of the table contains no other characters besides \" 0 \" and \" 1 \".", "output_specification": "Output\n\nPrint a single number: the minimum number of moves needed to get only numbers 1 in some column of the table. If this is impossible, print -1.", "sample_tests": "Examples\n\nInput\n3 6101010000100100000\n\nOutput\n3\n\nInput\n2 3111000\n\nOutput\n-1", "difficulty": 1500, "url": "https://codeforces.com/problemset/problem/230/C"}
{"header": "D. Planets\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Goa'uld Apophis captured Jack O'Neill's team again! Jack himself was able to escape, but by that time Apophis's ship had already jumped to hyperspace. But Jack knows on what planet will Apophis land. In order to save his friends, Jack must repeatedly go through stargates to get to this planet.\nOverall the galaxy has\nn\nplanets, indexed with numbers from 1 to\nn\n. Jack is on the planet with index 1, and Apophis will land on the planet with index\nn\n. Jack can move between some pairs of planets through stargates (he can move in both directions); the transfer takes a positive, and, perhaps, for different pairs of planets unequal number of seconds. Jack begins his journey at time 0.\nIt can be that other travellers are arriving to the planet where Jack is currently located. In this case, Jack has to wait for exactly 1 second before he can use the stargate. That is, if at time\nt\nanother traveller arrives to the planet, Jack can only pass through the stargate at time\nt\n+\u20091\n, unless there are more travellers arriving at time\nt\n+\u20091\nto the same planet.\nKnowing the information about travel times between the planets, and the times when Jack would not be able to use the stargate on particular planets, determine the minimum time in which he can get to the planet with index\nn\n.\nNote\nIn the first sample Jack has three ways to go from planet 1. If he moves to planet 4 at once, he spends 8 seconds. If he transfers to planet 3, he spends 3 seconds, but as other travellers arrive to planet 3 at time 3 and 4, he can travel to planet 4 only at time 5, thus spending 8 seconds in total. But if Jack moves to planet 2, and then \u2014 to planet 4, then he spends a total of only\n2\u2009+\u20095\u2009=\u20097\nseconds.\nIn the second sample one can't get from planet 1 to planet 3 by moving through stargates.", "input_specification": "Input\n\nThe first line contains two space-separated integers: *n* ( 2\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 ), the number of planets in the galaxy, and *m* ( 0\u2009\u2264\u2009 *m* \u2009\u2264\u200910 5 ) \u2014 the number of pairs of planets between which Jack can travel using stargates. Then *m* lines follow, containing three integers each: the *i* -th line contains numbers of planets *a* *i* and *b* *i* ( 1\u2009\u2264\u2009 *a* *i* ,\u2009 *b* *i* \u2009\u2264\u2009 *n* , *a* *i* \u2009\u2260\u2009 *b* *i* ), which are connected through stargates, and the integer transfer time (in seconds) *c* *i* ( 1\u2009\u2264\u2009 *c* *i* \u2009\u2264\u200910 4 ) between these planets. It is guaranteed that between any pair of planets there is at most one stargate connection.\n\nThen *n* lines follow: the *i* -th line contains an integer *k* *i* ( 0\u2009\u2264\u2009 *k* *i* \u2009\u2264\u200910 5 ) that denotes the number of moments of time when other travellers arrive to the planet with index *i* . Then *k* *i* distinct space-separated integers *t* *ij* ( 0\u2009\u2264\u2009 *t* *ij* \u2009<\u200910 9 ) follow, sorted in ascending order. An integer *t* *ij* means that at time *t* *ij* (in seconds) another traveller arrives to the planet *i* . It is guaranteed that the sum of all *k* *i* does not exceed 10 5 .", "output_specification": "Output\n\nPrint a single number \u2014 the least amount of time Jack needs to get from planet 1 to planet *n* . If Jack can't get to planet *n* in any amount of time, print number -1.", "sample_tests": "Examples\n\nInput\n4 61 2 21 3 31 4 82 3 42 4 53 4 301 32 3 40\n\nOutput\n7\n\nInput\n3 11 2 301 30\n\nOutput\n-1", "difficulty": 1700, "url": "https://codeforces.com/problemset/problem/230/D"}
{"header": "E. Triangles\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Alice and Bob don't play games anymore. Now they study properties of all sorts of graphs together. Alice invented the following task: she takes a complete undirected graph with\nn\nvertices, chooses some\nm\nedges and keeps them. Bob gets the\nremaining edges.\nAlice and Bob are fond of \"triangles\" in graphs, that is, cycles of length 3. That's why they wonder: what total number of triangles is there in the two graphs formed by Alice and Bob's edges, correspondingly?\nNote\nIn the first sample Alice has 2 triangles: (1, 2, 3) and (2, 3, 4). Bob's graph has only 1 triangle : (1, 4, 5). That's why the two graphs in total contain 3 triangles.\nIn the second sample Alice's graph has only one triangle: (1, 2, 3). Bob's graph has three triangles: (1, 4, 5), (2, 4, 5) and (3, 4, 5). In this case the answer to the problem is 4.", "input_specification": "Input\n\nThe first line contains two space-separated integers *n* and *m* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 6 ,\u20090\u2009\u2264\u2009 *m* \u2009\u2264\u200910 6 ) \u2014 the number of vertices in the initial complete graph and the number of edges in Alice's graph, correspondingly. Then *m* lines follow: the *i* -th line contains two space-separated integers *a* *i* , *b* *i* ( 1\u2009\u2264\u2009 *a* *i* ,\u2009 *b* *i* \u2009\u2264\u2009 *n* , *a* *i* \u2009\u2260\u2009 *b* *i* ), \u2014 the numbers of the two vertices connected by the *i* -th edge in Alice's graph. It is guaranteed that Alice's graph contains no multiple edges and self-loops. It is guaranteed that the initial complete graph also contains no multiple edges and self-loops.\n\nConsider the graph vertices to be indexed in some way from 1 to *n* .", "output_specification": "Output\n\nPrint a single number \u2014 the total number of cycles of length 3 in Alice and Bob's graphs together.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is advised to use the cin , cout streams or the %I64d specifier.", "sample_tests": "Examples\n\nInput\n5 51 21 32 32 43 4\n\nOutput\n3\n\nInput\n5 31 22 31 3\n\nOutput\n4", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/230/E"}
{"header": "E. Triangles\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Alice and Bob don't play games anymore. Now they study properties of all sorts of graphs together. Alice invented the following task: she takes a complete undirected graph with\nn\nvertices, chooses some\nm\nedges and keeps them. Bob gets the\nremaining edges.\nAlice and Bob are fond of \"triangles\" in graphs, that is, cycles of length 3. That's why they wonder: what total number of triangles is there in the two graphs formed by Alice and Bob's edges, correspondingly?\nNote\nIn the first sample Alice has 2 triangles: (1, 2, 3) and (2, 3, 4). Bob's graph has only 1 triangle : (1, 4, 5). That's why the two graphs in total contain 3 triangles.\nIn the second sample Alice's graph has only one triangle: (1, 2, 3). Bob's graph has three triangles: (1, 4, 5), (2, 4, 5) and (3, 4, 5). In this case the answer to the problem is 4.", "input_specification": "Input\n\nThe first line contains two space-separated integers *n* and *m* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 6 ,\u20090\u2009\u2264\u2009 *m* \u2009\u2264\u200910 6 ) \u2014 the number of vertices in the initial complete graph and the number of edges in Alice's graph, correspondingly. Then *m* lines follow: the *i* -th line contains two space-separated integers *a* *i* , *b* *i* ( 1\u2009\u2264\u2009 *a* *i* ,\u2009 *b* *i* \u2009\u2264\u2009 *n* , *a* *i* \u2009\u2260\u2009 *b* *i* ), \u2014 the numbers of the two vertices connected by the *i* -th edge in Alice's graph. It is guaranteed that Alice's graph contains no multiple edges and self-loops. It is guaranteed that the initial complete graph also contains no multiple edges and self-loops.\n\nConsider the graph vertices to be indexed in some way from 1 to *n* .", "output_specification": "Output\n\nPrint a single number \u2014 the total number of cycles of length 3 in Alice and Bob's graphs together.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is advised to use the cin , cout streams or the %I64d specifier.", "sample_tests": "Examples\n\nInput\n5 51 21 32 32 43 4\n\nOutput\n3\n\nInput\n5 31 22 31 3\n\nOutput\n4", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/230/F"}
{"header": "E. Triangles\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Alice and Bob don't play games anymore. Now they study properties of all sorts of graphs together. Alice invented the following task: she takes a complete undirected graph with\nn\nvertices, chooses some\nm\nedges and keeps them. Bob gets the\nremaining edges.\nAlice and Bob are fond of \"triangles\" in graphs, that is, cycles of length 3. That's why they wonder: what total number of triangles is there in the two graphs formed by Alice and Bob's edges, correspondingly?\nNote\nIn the first sample Alice has 2 triangles: (1, 2, 3) and (2, 3, 4). Bob's graph has only 1 triangle : (1, 4, 5). That's why the two graphs in total contain 3 triangles.\nIn the second sample Alice's graph has only one triangle: (1, 2, 3). Bob's graph has three triangles: (1, 4, 5), (2, 4, 5) and (3, 4, 5). In this case the answer to the problem is 4.", "input_specification": "Input\n\nThe first line contains two space-separated integers *n* and *m* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 6 ,\u20090\u2009\u2264\u2009 *m* \u2009\u2264\u200910 6 ) \u2014 the number of vertices in the initial complete graph and the number of edges in Alice's graph, correspondingly. Then *m* lines follow: the *i* -th line contains two space-separated integers *a* *i* , *b* *i* ( 1\u2009\u2264\u2009 *a* *i* ,\u2009 *b* *i* \u2009\u2264\u2009 *n* , *a* *i* \u2009\u2260\u2009 *b* *i* ), \u2014 the numbers of the two vertices connected by the *i* -th edge in Alice's graph. It is guaranteed that Alice's graph contains no multiple edges and self-loops. It is guaranteed that the initial complete graph also contains no multiple edges and self-loops.\n\nConsider the graph vertices to be indexed in some way from 1 to *n* .", "output_specification": "Output\n\nPrint a single number \u2014 the total number of cycles of length 3 in Alice and Bob's graphs together.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is advised to use the cin , cout streams or the %I64d specifier.", "sample_tests": "Examples\n\nInput\n5 51 21 32 32 43 4\n\nOutput\n3\n\nInput\n5 31 22 31 3\n\nOutput\n4", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/230/G"}
{"header": "E. Triangles\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Alice and Bob don't play games anymore. Now they study properties of all sorts of graphs together. Alice invented the following task: she takes a complete undirected graph with\nn\nvertices, chooses some\nm\nedges and keeps them. Bob gets the\nremaining edges.\nAlice and Bob are fond of \"triangles\" in graphs, that is, cycles of length 3. That's why they wonder: what total number of triangles is there in the two graphs formed by Alice and Bob's edges, correspondingly?\nNote\nIn the first sample Alice has 2 triangles: (1, 2, 3) and (2, 3, 4). Bob's graph has only 1 triangle : (1, 4, 5). That's why the two graphs in total contain 3 triangles.\nIn the second sample Alice's graph has only one triangle: (1, 2, 3). Bob's graph has three triangles: (1, 4, 5), (2, 4, 5) and (3, 4, 5). In this case the answer to the problem is 4.", "input_specification": "Input\n\nThe first line contains two space-separated integers *n* and *m* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 6 ,\u20090\u2009\u2264\u2009 *m* \u2009\u2264\u200910 6 ) \u2014 the number of vertices in the initial complete graph and the number of edges in Alice's graph, correspondingly. Then *m* lines follow: the *i* -th line contains two space-separated integers *a* *i* , *b* *i* ( 1\u2009\u2264\u2009 *a* *i* ,\u2009 *b* *i* \u2009\u2264\u2009 *n* , *a* *i* \u2009\u2260\u2009 *b* *i* ), \u2014 the numbers of the two vertices connected by the *i* -th edge in Alice's graph. It is guaranteed that Alice's graph contains no multiple edges and self-loops. It is guaranteed that the initial complete graph also contains no multiple edges and self-loops.\n\nConsider the graph vertices to be indexed in some way from 1 to *n* .", "output_specification": "Output\n\nPrint a single number \u2014 the total number of cycles of length 3 in Alice and Bob's graphs together.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is advised to use the cin , cout streams or the %I64d specifier.", "sample_tests": "Examples\n\nInput\n5 51 21 32 32 43 4\n\nOutput\n3\n\nInput\n5 31 22 31 3\n\nOutput\n4", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/230/H"}
{"header": "A. Chat Server's Outgoing Traffic\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 64 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Polycarp is working on a new project called \"Polychat\". Following modern tendencies in IT, he decided, that this project should contain chat as well. To achieve this goal, Polycarp has spent several hours in front of his laptop and implemented a chat server that can process three types of commands:\nInclude a person to the chat (\n'Add'\ncommand).\nRemove a person from the chat (\n'Remove'\ncommand).\nSend a message from a person to all people, who are currently in the chat, including the one, who sends the message (\n'Send'\ncommand).\nNow Polycarp wants to find out the amount of outgoing traffic that the server will produce while processing a particular set of commands.\nPolycarp knows that chat server sends no traffic for 'Add' and 'Remove' commands. When 'Send' command is processed, server sends\nl\nbytes to each participant of the chat, where\nl\nis the length of the message.\nAs Polycarp has no time, he is asking for your help in solving this problem.", "input_specification": "Input\n\nInput file will contain not more than 100 commands, each in its own line. No line will exceed 100 characters. Formats of the commands will be the following:\n\n +<name> for 'Add' command. -<name> for 'Remove' command. <sender_name>:<message_text> for 'Send' command. \n\n<name> and <sender_name> is a non-empty sequence of Latin letters and digits. <message_text> can contain letters, digits and spaces, but can't start or end with a space. <message_text> can be an empty line.\n\nIt is guaranteed, that input data are correct, i.e. there will be no 'Add' command if person with such a name is already in the chat, there will be no 'Remove' command if there is no person with such a name in the chat etc.\n\nAll names are case-sensitive.", "output_specification": "Output\n\nPrint a single number \u2014 answer to the problem.", "sample_tests": "Examples\n\nInput\n+MikeMike:hello+Kate+Dmitry-DmitryKate:hi-Kate\n\nOutput\n9\n\nInput\n+Mike-Mike+MikeMike:Hi I am here-Mike+Kate-Kate\n\nOutput\n14", "difficulty": 1000, "url": "https://codeforces.com/problemset/problem/5/A"}
{"header": "B. Center Alignment\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 64 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Almost every text editor has a built-in function of center text alignment. The developers of the popular in Berland text editor \u00abTextpad\u00bb decided to introduce this functionality into the fourth release of the product.\nYou are to implement the alignment in the shortest possible time. Good luck!", "input_specification": "Input\n\nThe input file consists of one or more lines, each of the lines contains Latin letters, digits and/or spaces. The lines cannot start or end with a space. It is guaranteed that at least one of the lines has positive length. The length of each line and the total amount of the lines do not exceed 1000.", "output_specification": "Output\n\nFormat the given text, aligning it center. Frame the whole text with characters \u00ab * \u00bb of the minimum size. If a line cannot be aligned perfectly (for example, the line has even length, while the width of the block is uneven), you should place such lines rounding down the distance to the left or to the right edge and bringing them closer left or right alternatively (you should start with bringing left). Study the sample tests carefully to understand the output format better.", "sample_tests": "Examples\n\nInput\nThis isCodeforcesBetaRound5\n\nOutput\n************* This is ** **Codeforces** Beta ** Round ** 5 *************\n\nInput\nwelcome to theCodeforcesBetaRound 5andgood luck\n\nOutput\n*****************welcome to the** Codeforces ** Beta ** Round 5 ** ** and ** good luck *****************", "difficulty": 1200, "url": "https://codeforces.com/problemset/problem/5/B"}
{"header": "C. Longest Regular Bracket Sequence\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "This is yet another problem dealing with regular bracket sequences.\nWe should remind you that a bracket sequence is called regular, if by inserting \u00ab\n+\n\u00bb and \u00ab\n1\n\u00bb into it we can get a correct mathematical expression. For example, sequences \u00ab\n(())()\n\u00bb, \u00ab\n()\n\u00bb and \u00ab\n(()(()))\n\u00bb are regular, while \u00ab\n)(\n\u00bb, \u00ab\n(()\n\u00bb and \u00ab\n(()))(\n\u00bb are not.\nYou are given a string of \u00ab\n(\n\u00bb and \u00ab\n)\n\u00bb characters. You are to find its longest substring that is a regular bracket sequence. You are to find the number of such substrings as well.", "input_specification": "Input\n\nThe first line of the input file contains a non-empty string, consisting of \u00ab ( \u00bb and \u00ab ) \u00bb characters. Its length does not exceed 10 6 .", "output_specification": "Output\n\nPrint the length of the longest substring that is a regular bracket sequence, and the number of such substrings. If there are no such substrings, write the only line containing \" 0 1 \".", "sample_tests": "Examples\n\nInput\n)((())))(()())\n\nOutput\n6 2\n\nInput\n))(\n\nOutput\n0 1", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/5/C"}
{"header": "D. Follow Traffic Rules\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 64 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Everybody knows that the capital of Berland is connected to Bercouver (the Olympic capital) by a direct road. To improve the road's traffic capacity, there was placed just one traffic sign, limiting the maximum speed. Traffic signs in Berland are a bit peculiar, because they limit the speed only at that point on the road where they are placed. Right after passing the sign it is allowed to drive at any speed.\nIt is known that the car of an average Berland citizen has the acceleration (deceleration) speed of\na\nkm/h\n2\n, and has maximum speed of\nv\nkm/h. The road has the length of\nl\nkm, and the speed sign, limiting the speed to\nw\nkm/h, is placed\nd\nkm (\n1\u2009\u2264\nd\n<\nl\n) away from the capital of Berland. The car has a zero speed at the beginning of the journey. Find the minimum time that an average Berland citizen will need to get from the capital to Bercouver, if he drives at the optimal speed.\nThe car can enter Bercouver at any speed.", "input_specification": "Input\n\nThe first line of the input file contains two integer numbers *a* and *v* ( 1\u2009\u2264\u2009 *a* ,\u2009 *v* \u2009\u2264\u200910000 ). The second line contains three integer numbers *l* , *d* and *w* ( 2\u2009\u2264\u2009 *l* \u2009\u2264\u200910000 ; 1\u2009\u2264\u2009 *d* \u2009<\u2009 *l* ; 1\u2009\u2264\u2009 *w* \u2009\u2264\u200910000 ).", "output_specification": "Output\n\nPrint the answer with at least five digits after the decimal point.", "sample_tests": "Examples\n\nInput\n1 12 1 3\n\nOutput\n2.500000000000\n\nInput\n5 70200 170 40\n\nOutput\n8.965874696353", "difficulty": 2100, "url": "https://codeforces.com/problemset/problem/5/D"}
{"header": "A. A Good Contest\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Codeforces user' handle color depends on his rating\u00a0\u2014 it is red if his rating is greater or equal to\n2400\n; it is orange if his rating is less than\n2400\nbut greater or equal to\n2200\n, etc. Each time participant takes part in a rated contest, his rating is changed depending on his performance.\nAnton wants the color of his handle to become red. He considers his performance in the rated contest to be\ngood\nif he outscored some participant, whose handle was colored red before the contest and his rating has increased after it.\nAnton has written a program that analyses contest results and determines whether he performed good or not. Are you able to do the same?\nNote\nIn the first sample, Anton has outscored user with handle\nBurunduk1\n, whose handle was colored red before the contest and his rating has increased after the contest.\nIn the second sample,\nApplejack\n's rating has not increased after the contest, while both\nFluttershy\n's and\nPinkie_Pie\n's handles were not colored red before the contest.", "input_specification": "Input\n\nThe first line of the input contains a single integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u2009100 )\u00a0\u2014 the number of participants Anton has outscored in this contest .\n\nThe next *n* lines describe participants results: the *i* -th of them consists of a participant handle *name* *i* and two integers *before* *i* and *after* *i* ( \u2009-\u20094000\u2009\u2264\u2009 *before* *i* ,\u2009 *after* *i* \u2009\u2264\u20094000 )\u00a0\u2014 participant's rating before and after the contest, respectively. Each handle is a non-empty string, consisting of no more than 10 characters, which might be lowercase and uppercase English letters, digits, characters \u00ab _ \u00bb and \u00ab - \u00bb characters.\n\nIt is guaranteed that all handles are distinct.", "output_specification": "Output\n\nPrint \u00ab YES \u00bb (quotes for clarity), if Anton has performed good in the contest and \u00ab NO \u00bb (quotes for clarity) otherwise.", "sample_tests": "Examples\n\nInput\n3Burunduk1 2526 2537BudAlNik 2084 2214subscriber 2833 2749\n\nOutput\nYES\n\nInput\n3Applejack 2400 2400Fluttershy 2390 2431Pinkie_Pie -2500 -2450\n\nOutput\nNO", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/681/A"}
{"header": "B. Economy Game\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Kolya is developing an economy simulator game. His most favourite part of the development process is in-game testing. Once he was entertained by the testing so much, that he found out his game-coin score become equal to\n0\n.\nKolya remembers that at the beginning of the game his game-coin score was equal to\nn\nand that he have bought only some houses (for\n1\u2009234\u2009567\ngame-coins each), cars (for\n123\u2009456\ngame-coins each) and computers (for\n1\u2009234\ngame-coins each).\nKolya is now interested, whether he could have spent all of his initial\nn\ngame-coins buying only houses, cars and computers or there is a bug in the game. Formally, is there a triple of non-negative integers\na\n,\nb\nand\nc\nsuch that\na\n\u00d7\u20091\u2009234\u2009567\u2009+\nb\n\u00d7\u2009123\u2009456\u2009+\nc\n\u00d7\u20091\u2009234\u2009=\nn\n?\nPlease help Kolya answer this question.\nNote\nIn the first sample, one of the possible solutions is to buy one house, one car and one computer, spending\n1\u2009234\u2009567\u2009+\u2009123\u2009456\u2009+\u20091234\u2009=\u20091\u2009359\u2009257\ngame-coins in total.", "input_specification": "Input\n\nThe first line of the input contains a single integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 9 )\u00a0\u2014 Kolya's initial game-coin score.", "output_specification": "Output\n\nPrint \" YES \" (without quotes) if it's possible that Kolya spent all of his initial *n* coins buying only houses, cars and computers. Otherwise print \" NO \" (without quotes).", "sample_tests": "Examples\n\nInput\n1359257\n\nOutput\nYES\n\nInput\n17851817\n\nOutput\nNO", "difficulty": 1300, "url": "https://codeforces.com/problemset/problem/681/B"}
{"header": "C. Heap Operations\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Petya has recently learned data structure named \"Binary heap\".\nThe heap he is now operating with allows the following operations:\nput the given number into the heap;\nget the value of the minimum element in the heap;\nextract the minimum element from the heap;\nThus, at any moment of time the heap contains several integers (possibly none), some of them might be equal.\nIn order to better learn this data structure Petya took an empty heap and applied some operations above to it. Also, he carefully wrote down all the operations and their results to his event log, following the format:\ninsert\nx\n\u2014 put the element with value\nx\nin the heap;\ngetMin\nx\n\u2014 the value of the minimum element contained in the heap was equal to\nx\n;\nremoveMin\n\u2014 the minimum element was extracted from the heap (only one instance, if there were many).\nAll the operations were correct, i.e. there was at least one element in the heap each time\ngetMin\nor\nremoveMin\noperations were applied.\nWhile Petya was away for a lunch, his little brother Vova came to the room, took away some of the pages from Petya's log and used them to make paper boats.\nNow Vova is worried, if he made Petya's sequence of operations inconsistent. For example, if one apply operations one-by-one in the order they are written in the event log, results of\ngetMin\noperations might differ from the results recorded by Petya, and some of\ngetMin\nor\nremoveMin\noperations may be incorrect, as the heap is empty at the moment they are applied.\nNow Vova wants to add some new operation records to the event log in order to make the resulting sequence of operations correct. That is, the result of each\ngetMin\noperation is equal to the result in the record, and the heap is non-empty when\ngetMin\nad\nremoveMin\nare applied. Vova wants to complete this as fast as possible, as the Petya may get back at any moment. He asks you to add the least possible number of operation records to the current log. Note that arbitrary number of operations may be added at the beginning, between any two other operations, or at the end of the log.\nNote\nIn the first sample, after number\n3\nis inserted into the heap, the minimum number is\n3\n. To make the result of the first\ngetMin\nequal to\n4\none should firstly remove number\n3\nfrom the heap and then add number\n4\ninto the heap.\nIn the second sample case number\n1\nis inserted two times, so should be similarly removed twice.", "input_specification": "Input\n\nThe first line of the input contains the only integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u2009100\u2009000 )\u00a0\u2014 the number of the records left in Petya's journal.\n\nEach of the following *n* lines describe the records in the current log in the order they are applied. Format described in the statement is used. All numbers in the input are integers not exceeding 10 9 by their absolute value.", "output_specification": "Output\n\nThe first line of the output should contain a single integer *m* \u00a0\u2014 the minimum possible number of records in the modified sequence of operations.\n\nNext *m* lines should contain the corrected sequence of records following the format of the input (described in the statement), one per line and in the order they are applied. All the numbers in the output should be integers not exceeding 10 9 by their absolute value.\n\nNote that the input sequence of operations must be the subsequence of the output sequence.\n\nIt's guaranteed that there exists the correct answer consisting of no more than 1\u2009000\u2009000 operations.", "sample_tests": "Examples\n\nInput\n2insert 3getMin 4\n\nOutput\n4insert 3removeMininsert 4getMin 4\n\nInput\n4insert 1insert 1removeMingetMin 2\n\nOutput\n6insert 1insert 1removeMinremoveMininsert 2getMin 2", "difficulty": 1600, "url": "https://codeforces.com/problemset/problem/681/C"}
{"header": "D. Gifts by the List\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Sasha lives in a big happy family. At the Man's Day all the men of the family gather to celebrate it following their own traditions. There are\nn\nmen in Sasha's family, so let's number them with integers from\n1\nto\nn\n.\nEach man has at most one father but may have arbitrary number of sons.\nMan number\nA\nis considered to be the\nancestor\nof the man number\nB\nif at least one of the following conditions is satisfied:\nA\n=\nB\n;\nthe man number\nA\nis the father of the man number\nB\n;\nthere is a man number\nC\n, such that the man number\nA\nis his ancestor and the man number\nC\nis the father of the man number\nB\n.\nOf course, if the man number\nA\nis an ancestor of the man number\nB\nand\nA\n\u2260\nB\n, then the man number\nB\nis not an ancestor of the man number\nA\n.\nThe tradition of the Sasha's family is to give gifts at the Man's Day. Because giving gifts in a normal way is boring, each year the following happens.\nA list of candidates is prepared, containing some (possibly all) of the\nn\nmen in some order.\nEach of the\nn\nmen decides to give a gift.\nIn order to choose a person to give a gift to, man\nA\nlooks through the list and picks the first man\nB\nin the list, such that\nB\nis an ancestor of\nA\nand gives him a gift. Note that according to definition it may happen that a person gives a gift to himself.\nIf there is no ancestor of a person in the list, he becomes sad and leaves the celebration without giving a gift to anyone.\nThis year you have decided to help in organizing celebration and asked each of the\nn\nmen, who do they want to give presents to (this person is chosen only among ancestors). Are you able to make a list of candidates, such that all the wishes will be satisfied if they give gifts according to the process described above?\nNote\nThe first sample explanation:\nif there would be no\n1\nin the list then the first and the third man's wishes would not be satisfied\n(\na\n1\n=\na\n3\n=\u20091)\n;\nif there would be no\n2\nin the list then the second man wish would not be satisfied\n(\na\n2\n=\u20092)\n;\nif\n1\nwould stay before\n2\nin the answer then the second man would have to give his gift to the first man, but he wants to give it to himself\n(\na\n2\n=\u20092)\n.\nif, at the other hand, the man numbered\n2\nwould stay before the man numbered\n1\n, then the third man would have to give his gift to the second man, but not to the first\n(\na\n3\n=\u20091)\n.", "input_specification": "Input\n\nIn the first line of the input two integers *n* and *m* ( 0\u2009\u2264\u2009 *m* \u2009<\u2009 *n* \u2009\u2264\u2009100\u2009000 ) are given\u00a0\u2014 the number of the men in the Sasha's family and the number of family relations in it respectively.\n\nThe next *m* lines describe family relations: the ( *i* \u2009+\u20091) *th* line consists of pair of integers *p* *i* and *q* *i* ( 1\u2009\u2264\u2009 *p* *i* ,\u2009 *q* *i* \u2009\u2264\u2009 *n* , *p* *i* \u2009\u2260\u2009 *q* *i* ) meaning that the man numbered *p* *i* is the father of the man numbered *q* *i* . It is guaranteed that every pair of numbers appears at most once, that among every pair of two different men at least one of them is not an ancestor of another and that every man has at most one father.\n\nThe next line contains *n* integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* ( 1\u2009\u2264\u2009 *a* *i* \u2009\u2264\u2009 *n* ), *i* *th* of which means that the man numbered *i* wants to give a gift to the man numbered *a* *i* . It is guaranteed that for every 1\u2009\u2264\u2009 *i* \u2009\u2264\u2009 *n* the man numbered *a* *i* is an ancestor of the man numbered *i* .", "output_specification": "Output\n\nPrint an integer *k* (1\u2009\u2264\u2009 *k* \u2009\u2264\u2009 *n* ) \u00a0\u2014 the number of the men in the list of candidates, in the first line.\n\nPrint then *k* pairwise different positive integers not exceeding *n* \u2014 the numbers of the men in the list in an order satisfying every of the men's wishes, one per line.\n\nIf there are more than one appropriate lists, print any of them. If there is no appropriate list print \u2009-\u20091 in the only line.", "sample_tests": "Examples\n\nInput\n3 21 22 31 2 1\n\nOutput\n-1\n\nInput\n4 21 23 41 2 3 3\n\nOutput\n3213", "difficulty": 2000, "url": "https://codeforces.com/problemset/problem/681/D"}
{"header": "A. Digits Sum\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Let's define $S(x)$ to be the sum of digits of number $x$ written in decimal system. For example, $S(5) = 5$, $S(10) = 1$, $S(322) = 7$.\nWe will call an integer $x$\ninteresting\nif $S(x + 1) < S(x)$. In each test you will be given one integer $n$. Your task is to calculate the number of integers $x$ such that $1 \\le x \\le n$ and $x$ is interesting.\nNote\nThe first interesting number is equal to $9$.", "input_specification": "Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) \u00a0\u2014 number of test cases.\n\nThen $t$ lines follow, the $i$-th line contains one integer $n$ ($1 \\le n \\le 10^9$) for the $i$-th test case.", "output_specification": "Output\n\nPrint $t$ integers, the $i$-th should be the answer for the $i$-th test case.", "sample_tests": "Example\n\nInput\n5\n1\n9\n10\n34\n880055535\n\nOutput\n0\n1\n1\n3\n88005553", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1553/A"}
{"header": "B. Reverse String\n\ntime limit per test\n 3 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You have a string $s$ and a chip, which you can place onto any character of this string.\nAfter placing the chip, you move it to the right several (maybe zero) times, i.\u00a0e. you perform the following operation several times: if the current position of the chip is $i$, you move it to the position $i + 1$. Of course, moving the chip to the right is impossible if it is already in the last position.\nAfter moving the chip to the right, you move it to the left several (maybe zero) times, i.\u00a0e. you perform the following operation several times: if the current position of the chip is $i$, you move it to the position $i - 1$. Of course, moving the chip to the left is impossible if it is already in the first position.\nWhen you place a chip or move it, you write down the character where the chip ends up after your action. For example, if $s$ is\nabcdef\n, you place the chip onto the $3$-rd character, move it to the right $2$ times and then move it to the left $3$ times, you write down the string\ncdedcb\n.\nYou are given two strings $s$ and $t$. Your task is to determine whether it's possible to perform the described operations with $s$ so that you write down the string $t$ as a result.\nNote\nConsider the examples.\nThe first test case is described in the statement.\nIn the second test case, you can place the chip on the $1$-st position, move it twice to the right, and then move it twice to the left.\nIn the fourth test case, you can place the chip on the $2$-nd position, and then don't move it at all.\nIn the fifth test case, you can place the chip on the $1$-st position, move it $5$ times to the right, and then finish the process.", "input_specification": "Input\n\nThe first line contains one integer $q$ ($1 \\le q \\le 500$) \u2014 the number of test cases.\n\nEach test case consists of two lines. The first line contains the string $s$ ($1 \\le |s| \\le 500$), the second line contains the string $t$ ($1 \\le |t| \\le 2 \\cdot |s| - 1$). Both strings consist of lowercase English characters.\n\nIt is guaranteed that the sum of $|s|$ over all test cases does not exceed $500$.", "output_specification": "Output\n\nFor each test case, print \" YES \" if you can obtain the string $t$ by performing the process mentioned in the statement with the string $s$, or \" NO \" if you cannot.\n\nYou may print each letter in any case ( YES , yes , Yes will all be recognized as positive answer, NO , no and nO will all be recognized as negative answer).", "sample_tests": "Example\n\nInput\n6\nabcdef\ncdedcb\naaa\naaaaa\naab\nbaaa\nab\nb\nabcdef\nabcdef\nba\nbaa\n\nOutput\nYES\nYES\nNO\nYES\nYES\nNO", "difficulty": 1300, "url": "https://codeforces.com/problemset/problem/1553/B"}
{"header": "C. Penalty\n\ntime limit per test\n 3 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Consider a simplified penalty phase at the end of a football match.\nA penalty phase consists of at most $10$ kicks, the first team takes the first kick, the second team takes the second kick, then the first team takes the third kick, and so on. The team that scores more goals wins; if both teams score the same number of goals, the game results in a tie (\nnote that it goes against the usual football rules\n). The penalty phase is stopped if one team has scored more goals than the other team could reach with all of its remaining kicks. For example, if after the $7$-th kick the first team has scored $1$ goal, and the second team has scored $3$ goals, the penalty phase ends \u2014 the first team cannot reach $3$ goals.\nYou know which player will be taking each kick, so you have your predictions for each of the $10$ kicks. These predictions are represented by a string $s$ consisting of $10$ characters. Each character can either be\n1\n,\n0\n, or\n?\n. This string represents your predictions in the following way:\nif $s_i$ is\n1\n, then the $i$-th kick will definitely score a goal;\nif $s_i$ is\n0\n, then the $i$-th kick definitely won't score a goal;\nif $s_i$ is\n?\n, then the $i$-th kick could go either way.\nBased on your predictions, you have to calculate the minimum possible number of kicks there can be in the penalty phase (that means, the earliest moment when the penalty phase is stopped, considering all possible ways it could go). Note that\nthe referee doesn't take into account any predictions when deciding to stop the penalty phase\n\u2014 you may know that some kick will/won't be scored, but the referee doesn't.\nNote\nConsider the example test:\nIn the first test case, consider the situation when the $1$-st, $5$-th and $7$-th kicks score goals, and kicks $2$, $3$, $4$ and $6$ are unsuccessful. Then the current number of goals for the first team is $3$, for the second team is $0$, and the referee sees that the second team can score at most $2$ goals in the remaining kicks. So the penalty phase can be stopped after the $7$-th kick.\nIn the second test case, the penalty phase won't be stopped until all $10$ kicks are finished.\nIn the third test case, if the first team doesn't score any of its three first kicks and the second team scores all of its three first kicks, then after the $6$-th kick, the first team has scored $0$ goals and the second team has scored $3$ goals, and the referee sees that the first team can score at most $2$ goals in the remaining kicks. So, the penalty phase can be stopped after the $6$-th kick.\nIn the fourth test case, even though you can predict the whole penalty phase, the referee understands that the phase should be ended only after the $9$-th kick.", "input_specification": "Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1\\,000$) \u2014 the number of test cases.\n\nEach test case is represented by one line containing the string $s$, consisting of exactly $10$ characters. Each character is either 1 , 0 , or ? .", "output_specification": "Output\n\nFor each test case, print one integer \u2014 the minimum possible number of kicks in the penalty phase.", "sample_tests": "Example\n\nInput\n4\n1?0???1001\n1111111111\n??????????\n0100000000\n\nOutput\n7\n10\n6\n9", "difficulty": 1200, "url": "https://codeforces.com/problemset/problem/1553/C"}
{"header": "D. Backspace\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given two strings $s$ and $t$, both consisting of lowercase English letters. You are going to type the string $s$ character by character, from the first character to the last one.\nWhen typing a character, instead of pressing the button corresponding to it, you can press the \"Backspace\" button. It deletes the last character you have typed among those that aren't deleted yet (or does nothing if there are no characters in the current string). For example, if $s$ is \"\nabcbd\n\" and you press Backspace instead of typing the first and the fourth characters, you will get the string \"\nbd\n\" (the first press of Backspace deletes no character, and the second press deletes the character '\nc\n'). Another example, if $s$ is \"\nabcaa\n\" and you press Backspace instead of the last two letters, then the resulting text is \"\na\n\".\nYour task is to determine whether you can obtain the string $t$, if you type the string $s$ and press \"Backspace\" instead of typing several (maybe zero) characters of $s$.\nNote\nConsider the example test from the statement.\nIn order to obtain \"\nba\n\" from \"\nababa\n\", you may press Backspace instead of typing the first and the fourth characters.\nThere's no way to obtain \"\nbb\n\" while typing \"\nababa\n\".\nThere's no way to obtain \"\naaaa\n\" while typing \"\naaa\n\".\nIn order to obtain \"\nababa\n\" while typing \"\naababa\n\", you have to press Backspace instead of typing the first character, then type all the remaining characters.", "input_specification": "Input\n\nThe first line contains a single integer $q$ ($1 \\le q \\le 10^5$) \u2014 the number of test cases.\n\nThe first line of each test case contains the string $s$ ($1 \\le |s| \\le 10^5$). Each character of $s$ is a lowercase English letter.\n\nThe second line of each test case contains the string $t$ ($1 \\le |t| \\le 10^5$). Each character of $t$ is a lowercase English letter.\n\nIt is guaranteed that the total number of characters in the strings over all test cases does not exceed $2 \\cdot 10^5$.", "output_specification": "Output\n\nFor each test case, print \" YES \" if you can obtain the string $t$ by typing the string $s$ and replacing some characters with presses of \"Backspace\" button, or \" NO \" if you cannot.\n\nYou may print each letter in any case ( YES , yes , Yes will all be recognized as positive answer, NO , no and nO will all be recognized as negative answer).", "sample_tests": "Example\n\nInput\n4\nababa\nba\nababa\nbb\naaa\naaaa\naababa\nababa\n\nOutput\nYES\nNO\nNO\nYES", "difficulty": 1500, "url": "https://codeforces.com/problemset/problem/1553/D"}
{"header": "E. Permutation Shift\n\ntime limit per test\n 3 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "An identity permutation of length $n$ is an array $[1, 2, 3, \\dots, n]$.\nWe performed the following operations to an identity permutation of length $n$:\nfirstly, we cyclically shifted it to the right by $k$ positions, where $k$ is unknown to you (the only thing you know is that $0 \\le k \\le n - 1$). When an array is cyclically shifted to the right by $k$ positions, the resulting array is formed by taking $k$ last elements of the original array (without changing their relative order), and then appending $n - k$ first elements to the right of them (without changing relative order of the first $n - k$ elements as well). For example, if we cyclically shift the identity permutation of length $6$ by $2$ positions, we get the array $[5, 6, 1, 2, 3, 4]$;\nsecondly, we performed the following operation\nat most\n$m$ times: pick any two elements of the array and swap them.\nYou are given the values of $n$ and $m$, and the resulting array. Your task is to find all possible values of $k$ in the cyclic shift operation.\nNote\nConsider the example:\nin the first test case, the only possible value for the cyclic shift is $3$. If we shift $[1, 2, 3, 4]$ by $3$ positions, we get $[2, 3, 4, 1]$. Then we can swap the $3$-rd and the $4$-th elements to get the array $[2, 3, 1, 4]$;\nin the second test case, the only possible value for the cyclic shift is $0$. If we shift $[1, 2, 3]$ by $0$ positions, we get $[1, 2, 3]$. Then we don't change the array at all (we stated that we made\nat most\n$1$ swap), so the resulting array stays $[1, 2, 3]$;\nin the third test case, all values from $0$ to $2$ are possible for the cyclic shift:\nif we shift $[1, 2, 3]$ by $0$ positions, we get $[1, 2, 3]$. Then we can swap the $1$-st and the $3$-rd elements to get $[3, 2, 1]$;\nif we shift $[1, 2, 3]$ by $1$ position, we get $[3, 1, 2]$. Then we can swap the $2$-nd and the $3$-rd elements to get $[3, 2, 1]$;\nif we shift $[1, 2, 3]$ by $2$ positions, we get $[2, 3, 1]$. Then we can swap the $1$-st and the $2$-nd elements to get $[3, 2, 1]$;\nin the fourth test case, we stated that we didn't do any swaps after the cyclic shift, but no value of cyclic shift could produce the array $[1, 2, 3, 4, 6, 5]$.", "input_specification": "Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^5$) \u2014 the number of test cases.\n\nEach test case consists of two lines. The first line contains two integers $n$ and $m$ ($3 \\le n \\le 3 \\cdot 10^5$; $0 \\le m \\le \\frac{n}{3}$).\n\nThe second line contains $n$ integers $p_1, p_2, \\dots, p_n$ ($1 \\le p_i \\le n$, each integer from $1$ to $n$ appears in this sequence exactly once) \u2014 the resulting array.\n\nThe sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.", "output_specification": "Output\n\nFor each test case, print the answer in the following way:\n\n firstly, print one integer $r$ ($0 \\le r \\le n$) \u2014 the number of possible values of $k$ for the cyclic shift operation; secondly, print $r$ integers $k_1, k_2, \\dots, k_r$ ($0 \\le k_i \\le n - 1$) \u2014 all possible values of $k$ in increasing order .", "sample_tests": "Example\n\nInput\n4\n4 1\n2 3 1 4\n3 1\n1 2 3\n3 1\n3 2 1\n6 0\n1 2 3 4 6 5\n\nOutput\n1 3\n1 0\n3 0 1 2\n0", "difficulty": 2100, "url": "https://codeforces.com/problemset/problem/1553/E"}
{"header": "A. Combination Lock\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Scrooge McDuck keeps his most treasured savings in a home safe with a combination lock. Each time he wants to put there the treasures that he's earned fair and square, he has to open the lock.\nThe combination lock is represented by\nn\nrotating disks with digits from 0 to 9 written on them. Scrooge McDuck has to turn some disks so that the combination of digits on the disks forms a secret combination. In one move, he can rotate one disk one digit forwards or backwards. In particular, in one move he can go from digit 0 to digit 9 and vice versa. What minimum number of actions does he need for that?\nNote\nIn the sample he needs 13 moves:\n1 disk:\n2 disk:\n3 disk:\n4 disk:\n5 disk:", "input_specification": "Input\n\nThe first line contains a single integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u20091000 )\u00a0\u2014 the number of disks on the combination lock.\n\nThe second line contains a string of *n* digits\u00a0\u2014 the original state of the disks.\n\nThe third line contains a string of *n* digits\u00a0\u2014 Scrooge McDuck's combination that opens the lock.", "output_specification": "Output\n\nPrint a single integer\u00a0\u2014 the minimum number of moves Scrooge McDuck needs to open the lock.", "sample_tests": "Examples\n\nInput\n58219564723\n\nOutput\n13", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/540/A"}
{"header": "B. School Marks\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Little Vova studies programming in an elite school. Vova and his classmates are supposed to write\nn\nprogress tests, for each test they will get a mark from 1 to\np\n. Vova is very smart and he can write every test for any mark, but he doesn't want to stand out from the crowd too much. If the sum of his marks for all tests exceeds value\nx\n, then his classmates notice how smart he is and start distracting him asking to let them copy his homework. And if the median of his marks will be lower than\ny\npoints\n(the definition of a median is given in the notes)\n, then his mom will decide that he gets too many bad marks and forbid him to play computer games.\nVova has already wrote\nk\ntests and got marks\na\n1\n,\u2009...,\na\nk\n. He doesn't want to get into the first or the second situation described above and now he needs to determine which marks he needs to get for the remaining tests. Help him do that.\nNote\nThe median of sequence\na\n1\n,\u00a0...,\na\nn\nwhere\nn\nis odd (in this problem\nn\nis always odd) is the element staying on\n(\nn\n+\u20091)\u2009/\u20092\nposition in the sorted list of\na\ni\n.\nIn the first sample the sum of marks equals 3 + 5 + 4 + 4 + 1 = 17, what doesn't exceed 18, that means that Vova won't be disturbed by his classmates. And the median point of the sequence {1, 3, 4, 4, 5} equals to 4, that isn't less than 4, so his mom lets him play computer games.\nPlease note that you do not have to maximize the sum of marks or the median mark. Any of the answers: \"\n4\u00a02\n\", \"\n2\u00a04\n\", \"\n5\u00a01\n\", \"\n1\u00a05\n\", \"\n4\u00a01\n\", \"\n1\u00a04\n\" for the first test is correct.\nIn the second sample Vova got three '5' marks, so even if he gets two '1' marks, the sum of marks will be 17, that is more than the required value of 16. So, the answer to this test is \"\n-1\n\".", "input_specification": "Input\n\nThe first line contains 5 space-separated integers: *n* , *k* , *p* , *x* and *y* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u2009999 , *n* is odd, 0\u2009\u2264\u2009 *k* \u2009<\u2009 *n* , 1\u2009\u2264\u2009 *p* \u2009\u2264\u20091000 , *n* \u2009\u2264\u2009 *x* \u2009\u2264\u2009 *n* \u00b7 *p* , 1\u2009\u2264\u2009 *y* \u2009\u2264\u2009 *p* ). Here *n* is the number of tests that Vova is planned to write, *k* is the number of tests he has already written, *p* is the maximum possible mark for a test, *x* is the maximum total number of points so that the classmates don't yet disturb Vova, *y* is the minimum median point so that mom still lets him play computer games.\n\nThe second line contains *k* space-separated integers: *a* 1 ,\u2009...,\u2009 *a* *k* ( 1\u2009\u2264\u2009 *a* *i* \u2009\u2264\u2009 *p* )\u00a0\u2014 the marks that Vova got for the tests he has already written.", "output_specification": "Output\n\nIf Vova cannot achieve the desired result, print \" -1 \".\n\nOtherwise, print *n* \u2009-\u2009 *k* space-separated integers\u00a0\u2014 the marks that Vova should get for the remaining tests. If there are multiple possible solutions, print any of them.", "sample_tests": "Examples\n\nInput\n5 3 5 18 43 5 4\n\nOutput\n4 1\n\nInput\n5 3 5 16 45 5 5\n\nOutput\n-1", "difficulty": 1700, "url": "https://codeforces.com/problemset/problem/540/B"}
{"header": "C. Ice Cave\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You play a computer game. Your character stands on some level of a multilevel ice cave. In order to move on forward, you need to descend one level lower and the only way to do this is to fall through the ice.\nThe level of the cave where you are is a rectangular square grid of\nn\nrows and\nm\ncolumns. Each cell consists either from intact or from cracked ice. From each cell you can move to cells that are side-adjacent with yours (due to some limitations of the game engine you cannot make jumps on the same place, i.e. jump from a cell to itself). If you move to the cell with cracked ice, then your character falls down through it and if you move to the cell with intact ice, then the ice on this cell becomes cracked.\nLet's number the rows with integers from\n1\nto\nn\nfrom top to bottom and the columns with integers from\n1\nto\nm\nfrom left to right. Let's denote a cell on the intersection of the\nr\n-th row and the\nc\n-th column as\n(\nr\n,\nc\n)\n.\nYou are staying in the cell\n(\nr\n1\n,\nc\n1\n)\nand this cell is cracked because you've just fallen here from a higher level. You need to fall down through the cell\n(\nr\n2\n,\nc\n2\n)\nsince the exit to the next level is there. Can you do this?\nNote\nIn the first sample test one possible path is:\nAfter the first visit of cell\n(2,\u20092)\nthe ice on it cracks and when you step there for the second time, your character falls through the ice as intended.", "input_specification": "Input\n\nThe first line contains two integers, *n* and *m* ( 1\u2009\u2264\u2009 *n* ,\u2009 *m* \u2009\u2264\u2009500 )\u00a0\u2014 the number of rows and columns in the cave description.\n\nEach of the next *n* lines describes the initial state of the level of the cave, each line consists of *m* characters \" . \" (that is, intact ice) and \" X \" (cracked ice).\n\nThe next line contains two integers, *r* 1 and *c* 1 ( 1\u2009\u2264\u2009 *r* 1 \u2009\u2264\u2009 *n* ,\u20091\u2009\u2264\u2009 *c* 1 \u2009\u2264\u2009 *m* )\u00a0\u2014 your initial coordinates. It is guaranteed that the description of the cave contains character ' X ' in cell ( *r* 1 ,\u2009 *c* 1 ) , that is, the ice on the starting cell is initially cracked.\n\nThe next line contains two integers *r* 2 and *c* 2 ( 1\u2009\u2264\u2009 *r* 2 \u2009\u2264\u2009 *n* ,\u20091\u2009\u2264\u2009 *c* 2 \u2009\u2264\u2009 *m* )\u00a0\u2014 the coordinates of the cell through which you need to fall. The final cell may coincide with the starting one.", "output_specification": "Output\n\nIf you can reach the destination, print ' YES ', otherwise print ' NO '.", "sample_tests": "Examples\n\nInput\n4 6X...XX...XX..X..X.......1 62 2\n\nOutput\nYES\n\nInput\n5 4.X.....XX.X......XX.5 31 1\n\nOutput\nNO\n\nInput\n4 7..X.XX..XX..X.X...X..X......2 21 6\n\nOutput\nYES", "difficulty": 2000, "url": "https://codeforces.com/problemset/problem/540/C"}
{"header": "D. Bad Luck Island\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "The Bad Luck Island is inhabited by three kinds of species:\nr\nrocks,\ns\nscissors and\np\npapers. At some moments of time two random individuals meet (all pairs of individuals can meet equiprobably), and if they belong to different species, then one individual kills the other one: a rock kills scissors, scissors kill paper, and paper kills a rock. Your task is to determine for each species what is the probability that this species will be the only one to inhabit this island after a long enough period of time.", "input_specification": "Input\n\nThe single line contains three integers *r* , *s* and *p* ( 1\u2009\u2264\u2009 *r* ,\u2009 *s* ,\u2009 *p* \u2009\u2264\u2009100 )\u00a0\u2014 the original number of individuals in the species of rock, scissors and paper, respectively.", "output_specification": "Output\n\nPrint three space-separated real numbers: the probabilities, at which the rocks, the scissors and the paper will be the only surviving species, respectively. The answer will be considered correct if the relative or absolute error of each number doesn't exceed 10 \u2009-\u20099 .", "sample_tests": "Examples\n\nInput\n2 2 2\n\nOutput\n0.333333333333 0.333333333333 0.333333333333\n\nInput\n2 1 2\n\nOutput\n0.150000000000 0.300000000000 0.550000000000\n\nInput\n1 1 3\n\nOutput\n0.057142857143 0.657142857143 0.285714285714", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/540/D"}
{"header": "E. Infinite Inversions\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "There is an infinite sequence consisting of all positive integers in the increasing order:\np\n=\u2009{1,\u20092,\u20093,\u2009...}\n. We performed\nn\nswap\noperations with this sequence. A\nswap\n(\na\n,\nb\n)\nis an operation of swapping the elements of the sequence on positions\na\nand\nb\n. Your task is to find the number of inversions in the resulting sequence, i.e. the number of such index pairs\n(\ni\n,\nj\n)\n, that\ni\n<\nj\nand\np\ni\n>\np\nj\n.\nNote\nIn the first sample the sequence is being modified as follows:\n. It has 4 inversions formed by index pairs\n(1,\u20094)\n,\n(2,\u20093)\n,\n(2,\u20094)\nand\n(3,\u20094)\n.", "input_specification": "Input\n\nThe first line contains a single integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 )\u00a0\u2014 the number of swap operations applied to the sequence.\n\nEach of the next *n* lines contains two integers *a* *i* and *b* *i* ( 1\u2009\u2264\u2009 *a* *i* ,\u2009 *b* *i* \u2009\u2264\u200910 9 , *a* *i* \u2009\u2260\u2009 *b* *i* )\u00a0\u2014 the arguments of the swap operation.", "output_specification": "Output\n\nPrint a single integer \u2014 the number of inversions in the resulting sequence.", "sample_tests": "Examples\n\nInput\n24 21 4\n\nOutput\n4\n\nInput\n31 63 42 5\n\nOutput\n15", "difficulty": 2100, "url": "https://codeforces.com/problemset/problem/540/E"}
{"header": "E. Infinite Inversions\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "There is an infinite sequence consisting of all positive integers in the increasing order:\np\n=\u2009{1,\u20092,\u20093,\u2009...}\n. We performed\nn\nswap\noperations with this sequence. A\nswap\n(\na\n,\nb\n)\nis an operation of swapping the elements of the sequence on positions\na\nand\nb\n. Your task is to find the number of inversions in the resulting sequence, i.e. the number of such index pairs\n(\ni\n,\nj\n)\n, that\ni\n<\nj\nand\np\ni\n>\np\nj\n.\nNote\nIn the first sample the sequence is being modified as follows:\n. It has 4 inversions formed by index pairs\n(1,\u20094)\n,\n(2,\u20093)\n,\n(2,\u20094)\nand\n(3,\u20094)\n.", "input_specification": "Input\n\nThe first line contains a single integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 )\u00a0\u2014 the number of swap operations applied to the sequence.\n\nEach of the next *n* lines contains two integers *a* *i* and *b* *i* ( 1\u2009\u2264\u2009 *a* *i* ,\u2009 *b* *i* \u2009\u2264\u200910 9 , *a* *i* \u2009\u2260\u2009 *b* *i* )\u00a0\u2014 the arguments of the swap operation.", "output_specification": "Output\n\nPrint a single integer \u2014 the number of inversions in the resulting sequence.", "sample_tests": "Examples\n\nInput\n24 21 4\n\nOutput\n4\n\nInput\n31 63 42 5\n\nOutput\n15", "difficulty": 2100, "url": "https://codeforces.com/problemset/problem/540/F"}
{"header": "E. Infinite Inversions\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "There is an infinite sequence consisting of all positive integers in the increasing order:\np\n=\u2009{1,\u20092,\u20093,\u2009...}\n. We performed\nn\nswap\noperations with this sequence. A\nswap\n(\na\n,\nb\n)\nis an operation of swapping the elements of the sequence on positions\na\nand\nb\n. Your task is to find the number of inversions in the resulting sequence, i.e. the number of such index pairs\n(\ni\n,\nj\n)\n, that\ni\n<\nj\nand\np\ni\n>\np\nj\n.\nNote\nIn the first sample the sequence is being modified as follows:\n. It has 4 inversions formed by index pairs\n(1,\u20094)\n,\n(2,\u20093)\n,\n(2,\u20094)\nand\n(3,\u20094)\n.", "input_specification": "Input\n\nThe first line contains a single integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 )\u00a0\u2014 the number of swap operations applied to the sequence.\n\nEach of the next *n* lines contains two integers *a* *i* and *b* *i* ( 1\u2009\u2264\u2009 *a* *i* ,\u2009 *b* *i* \u2009\u2264\u200910 9 , *a* *i* \u2009\u2260\u2009 *b* *i* )\u00a0\u2014 the arguments of the swap operation.", "output_specification": "Output\n\nPrint a single integer \u2014 the number of inversions in the resulting sequence.", "sample_tests": "Examples\n\nInput\n24 21 4\n\nOutput\n4\n\nInput\n31 63 42 5\n\nOutput\n15", "difficulty": 2100, "url": "https://codeforces.com/problemset/problem/540/G"}
{"header": "E. Infinite Inversions\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "There is an infinite sequence consisting of all positive integers in the increasing order:\np\n=\u2009{1,\u20092,\u20093,\u2009...}\n. We performed\nn\nswap\noperations with this sequence. A\nswap\n(\na\n,\nb\n)\nis an operation of swapping the elements of the sequence on positions\na\nand\nb\n. Your task is to find the number of inversions in the resulting sequence, i.e. the number of such index pairs\n(\ni\n,\nj\n)\n, that\ni\n<\nj\nand\np\ni\n>\np\nj\n.\nNote\nIn the first sample the sequence is being modified as follows:\n. It has 4 inversions formed by index pairs\n(1,\u20094)\n,\n(2,\u20093)\n,\n(2,\u20094)\nand\n(3,\u20094)\n.", "input_specification": "Input\n\nThe first line contains a single integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 5 )\u00a0\u2014 the number of swap operations applied to the sequence.\n\nEach of the next *n* lines contains two integers *a* *i* and *b* *i* ( 1\u2009\u2264\u2009 *a* *i* ,\u2009 *b* *i* \u2009\u2264\u200910 9 , *a* *i* \u2009\u2260\u2009 *b* *i* )\u00a0\u2014 the arguments of the swap operation.", "output_specification": "Output\n\nPrint a single integer \u2014 the number of inversions in the resulting sequence.", "sample_tests": "Examples\n\nInput\n24 21 4\n\nOutput\n4\n\nInput\n31 63 42 5\n\nOutput\n15", "difficulty": 2100, "url": "https://codeforces.com/problemset/problem/540/H"}
{"header": "A. Eevee\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "You are solving the crossword problem K from IPSC 2014. You solved all the clues except for one: who does Eevee evolve into? You are not very into pokemons, but quick googling helped you find out, that Eevee can evolve into eight different pokemons: Vaporeon, Jolteon, Flareon, Espeon, Umbreon, Leafeon, Glaceon, and Sylveon.\nYou know the length of the word in the crossword, and you already know some letters. Designers of the crossword made sure that the answer is unambiguous, so you can assume that exactly one pokemon out of the 8 that Eevee evolves into fits the length and the letters given. Your task is to find it.\nNote\nHere's a set of names in a form you can paste into your solution:\n[\"vaporeon\", \"jolteon\", \"flareon\", \"espeon\", \"umbreon\", \"leafeon\", \"glaceon\", \"sylveon\"]\n{\"vaporeon\", \"jolteon\", \"flareon\", \"espeon\", \"umbreon\", \"leafeon\", \"glaceon\", \"sylveon\"}", "input_specification": "Input\n\nFirst line contains an integer *n* ( 6\u2009\u2264\u2009 *n* \u2009\u2264\u20098 ) \u2013 the length of the string.\n\nNext line contains a string consisting of *n* characters, each of which is either a lower case english letter (indicating a known letter) or a dot character (indicating an empty cell in the crossword).", "output_specification": "Output\n\nPrint a name of the pokemon that Eevee can evolve into that matches the pattern in the input. Use lower case letters only to print the name (in particular, do not capitalize the first letter).", "sample_tests": "Examples\n\nInput\n7j......\n\nOutput\njolteon\n\nInput\n7...feon\n\nOutput\nleafeon\n\nInput\n7.l.r.o.\n\nOutput\nflareon", "difficulty": 1000, "url": "https://codeforces.com/problemset/problem/452/A"}
{"header": "B. 4-point polyline\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "You are given a rectangular grid of lattice points from\n(0,\u20090)\nto\n(\nn\n,\nm\n)\ninclusive. You have to choose exactly 4 different points to build a polyline possibly with self-intersections and self-touching. This polyline should be as long as possible.\nA polyline defined by points\np\n1\n,\np\n2\n,\np\n3\n,\np\n4\nconsists of the line segments\np\n1\np\n2\n,\np\n2\np\n3\n,\np\n3\np\n4\n, and its length is the sum of the lengths of the individual line segments.", "input_specification": "Input\n\nThe only line of the input contains two integers *n* and *m* (0\u2009\u2264\u2009 *n* ,\u2009 *m* \u2009\u2264\u20091000) . It is guaranteed that grid contains at least 4 different points.", "output_specification": "Output\n\nPrint 4 lines with two integers per line separated by space \u2014 coordinates of points *p* 1 ,\u2009 *p* 2 ,\u2009 *p* 3 ,\u2009 *p* 4 in order which represent the longest possible polyline.\n\nJudge program compares your answer and jury's answer with 10 \u2009-\u20096 precision.", "sample_tests": "Examples\n\nInput\n1 1\n\nOutput\n1 10 01 00 1\n\nInput\n0 10\n\nOutput\n0 10 100 00 9", "difficulty": 1800, "url": "https://codeforces.com/problemset/problem/452/B"}
{"header": "C. Magic Trick\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Alex enjoys performing magic tricks. He has a trick that requires a deck of\nn\ncards. He has\nm\nidentical decks of\nn\ndifferent cards each, which have been mixed together. When Alex wishes to perform the trick, he grabs\nn\ncards at random and performs the trick with those. The resulting deck looks like a normal deck, but may have duplicates of some cards.\nThe trick itself is performed as follows: first Alex allows you to choose a random card from the deck. You memorize the card and put it back in the deck. Then Alex shuffles the deck, and pulls out a card. If the card matches the one you memorized, the trick is successful.\nYou don't think Alex is a very good magician, and that he just pulls a card randomly from the deck. Determine the probability of the trick being successful if this is the case.\nNote\nIn the first sample, with probability\nAlex will perform the trick with two cards with the same value from two different decks. In this case the trick is guaranteed to succeed.\nWith the remaining\nprobability he took two different cards, and the probability of pulling off the trick is\n.\nThe resulting probability is", "input_specification": "Input\n\nFirst line of the input consists of two integers *n* and *m* ( 1\u2009\u2264\u2009 *n* ,\u2009 *m* \u2009\u2264\u20091000 ), separated by space \u2014 number of cards in each deck, and number of decks.", "output_specification": "Output\n\nOn the only line of the output print one floating point number \u2013 probability of Alex successfully performing the trick. Relative or absolute error of your answer should not be higher than 10 \u2009-\u20096 .", "sample_tests": "Examples\n\nInput\n2 2\n\nOutput\n0.6666666666666666\n\nInput\n4 4\n\nOutput\n0.4000000000000000\n\nInput\n1 2\n\nOutput\n1.0000000000000000", "difficulty": 2100, "url": "https://codeforces.com/problemset/problem/452/C"}
{"header": "D. Washer, Dryer, Folder\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "You have\nk\npieces of laundry, each of which you want to wash, dry and fold. You are at a laundromat that has\nn\n1\nwashing machines,\nn\n2\ndrying machines and\nn\n3\nfolding machines. Each machine can process only one piece of laundry at a time. You can't dry a piece of laundry before it is washed, and you can't fold it before it is dried. Moreover, after a piece of laundry is washed, it needs to be immediately moved into a drying machine, and after it is dried, it needs to be immediately moved into a folding machine.\nIt takes\nt\n1\nminutes to wash one piece of laundry in a washing machine,\nt\n2\nminutes to dry it in a drying machine, and\nt\n3\nminutes to fold it in a folding machine. Find the smallest number of minutes that is enough to wash, dry and fold all the laundry you have.\nNote\nIn the first example there's one instance of each machine, each taking 5 minutes to complete. You have only one piece of laundry, so it takes 15 minutes to process it.\nIn the second example you start washing first two pieces at moment\n0\n. If you start the third piece of laundry immediately, then by the time it is dried, there will be no folding machine available, so you have to wait, and start washing third piece at moment\n2\n. Similarly, you can't start washing next piece until moment\n5\n, since otherwise there will be no dryer available, when it is washed. Start time for each of the eight pieces of laundry is\n0,\u20090,\u20092,\u20095,\u200910,\u200910,\u200912\nand\n15\nminutes respectively. The last piece of laundry will be ready after\n15\u2009+\u200910\u2009+\u20095\u2009+\u20092\u2009=\u200932\nminutes.", "input_specification": "Input\n\nThe only line of the input contains seven integers: *k* ,\u2009 *n* 1 ,\u2009 *n* 2 ,\u2009 *n* 3 ,\u2009 *t* 1 ,\u2009 *t* 2 ,\u2009 *t* 3 (1\u2009\u2264\u2009 *k* \u2009\u2264\u200910 4 ;\u00a01\u2009\u2264\u2009 *n* 1 ,\u2009 *n* 2 ,\u2009 *n* 3 ,\u2009 *t* 1 ,\u2009 *t* 2 ,\u2009 *t* 3 \u2009\u2264\u20091000) .", "output_specification": "Output\n\nPrint one integer \u2014 smallest number of minutes to do all your laundry.", "sample_tests": "Examples\n\nInput\n1 1 1 1 5 5 5\n\nOutput\n15\n\nInput\n8 4 3 2 10 5 2\n\nOutput\n32", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/452/D"}
{"header": "A. Common Subsequence\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given two arrays of integers $a_1,\\ldots,a_n$ and $b_1,\\ldots,b_m$.\nYour task is to find a\nnon-empty\narray $c_1,\\ldots,c_k$ that is a subsequence of $a_1,\\ldots,a_n$, and also a subsequence of $b_1,\\ldots,b_m$. If there are multiple answers, find one of the\nsmallest\npossible length. If there are still multiple of the smallest possible length, find any. If there are no such arrays, you should report about it.\nA sequence $a$ is a subsequence of a sequence $b$ if $a$ can be obtained from $b$ by deletion of several (possibly, zero) elements. For example, $[3,1]$ is a subsequence of $[3,2,1]$ and $[4,3,1]$, but not a subsequence of $[1,3,3,7]$ and $[3,10,4]$.\nNote\nIn the first test case, $[4]$ is a subsequence of $[10, 8, 6, 4]$ and $[1, 2, 3, 4, 5]$. This array has length $1$, it is the smallest possible length of a subsequence of both $a$ and $b$.\nIn the third test case, no non-empty subsequences of both $[3]$ and $[2]$ exist, so the answer is \"\nNO\n\".", "input_specification": "Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 1000$) \u00a0\u2014 the number of test cases. Next $3t$ lines contain descriptions of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1\\le n,m\\le 1000$) \u00a0\u2014 the lengths of the two arrays.\n\nThe second line of each test case contains $n$ integers $a_1,\\ldots,a_n$ ($1\\le a_i\\le 1000$) \u00a0\u2014 the elements of the first array.\n\nThe third line of each test case contains $m$ integers $b_1,\\ldots,b_m$ ($1\\le b_i\\le 1000$) \u00a0\u2014 the elements of the second array.\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ across all test cases does not exceed $1000$ ($\\sum\\limits_{i=1}^t n_i, \\sum\\limits_{i=1}^t m_i\\le 1000$).", "output_specification": "Output\n\nFor each test case, output \" YES \" if a solution exists, or \" NO \" otherwise.\n\nIf the answer is \" YES \", on the next line output an integer $k$ ($1\\le k\\le 1000$) \u00a0\u2014 the length of the array, followed by $k$ integers $c_1,\\ldots,c_k$ ($1\\le c_i\\le 1000$) \u00a0\u2014 the elements of the array.\n\nIf there are multiple solutions with the smallest possible $k$, output any.", "sample_tests": "Example\n\nInput\n5\n4 5\n10 8 6 4\n1 2 3 4 5\n1 1\n3\n3\n1 1\n3\n2\n5 3\n1000 2 2 2 3\n3 1 5\n5 5\n1 2 3 4 5\n1 2 3 4 5\n\nOutput\nYES\n1 4\nYES\n1 3\nNO\nYES\n1 3\nYES\n1 2", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1382/A"}
{"header": "B. Sequential Nim\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "There are $n$ piles of stones, where the $i$-th pile has $a_i$ stones. Two people play a game, where they take alternating turns removing stones.\nIn a move, a player may remove a positive number of stones from the\nfirst non-empty pile\n(the pile with the minimal index, that has at least one stone). The first player who cannot make a move (because all piles are empty) loses the game. If both players play optimally, determine the winner of the game.\nNote\nIn the first test case, the first player will win the game. His winning strategy is:\nThe first player should take the stones from the first pile. He will take $1$ stone. The numbers of stones in piles will be $[1, 5, 4]$.\nThe second player should take the stones from the first pile. He will take $1$ stone because he can't take any other number of stones. The numbers of stones in piles will be $[0, 5, 4]$.\nThe first player should take the stones from the second pile because the first pile is empty. He will take $4$ stones. The numbers of stones in piles will be $[0, 1, 4]$.\nThe second player should take the stones from the second pile because the first pile is empty. He will take $1$ stone because he can't take any other number of stones. The numbers of stones in piles will be $[0, 0, 4]$.\nThe first player should take the stones from the third pile because the first and second piles are empty. He will take $4$ stones. The numbers of stones in piles will be $[0, 0, 0]$.\nThe second player will lose the game because all piles will be empty.", "input_specification": "Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 1000$) \u00a0\u2014 the number of test cases. Next $2t$ lines contain descriptions of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 10^5$) \u00a0\u2014 the number of piles.\n\nThe second line of each test case contains $n$ integers $a_1,\\ldots,a_n$ ($1\\le a_i\\le 10^9$) \u00a0\u2014 $a_i$ is equal to the number of stones in the $i$-th pile.\n\nIt is guaranteed that the sum of $n$ for all test cases does not exceed $10^5$.", "output_specification": "Output\n\nFor each test case, if the player who makes the first move will win, output \" First \". Otherwise, output \" Second \".", "sample_tests": "Example\n\nInput\n7\n3\n2 5 4\n8\n1 1 1 1 1 1 1 1\n6\n1 2 3 4 5 6\n6\n1 1 2 1 2 2\n1\n1000000000\n5\n1 2 2 1 1\n3\n1 1 1\n\nOutput\nFirst\nSecond\nSecond\nFirst\nFirst\nSecond\nFirst", "difficulty": 1100, "url": "https://codeforces.com/problemset/problem/1382/B"}
{"header": "B. Sequential Nim\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "There are $n$ piles of stones, where the $i$-th pile has $a_i$ stones. Two people play a game, where they take alternating turns removing stones.\nIn a move, a player may remove a positive number of stones from the\nfirst non-empty pile\n(the pile with the minimal index, that has at least one stone). The first player who cannot make a move (because all piles are empty) loses the game. If both players play optimally, determine the winner of the game.\nNote\nIn the first test case, the first player will win the game. His winning strategy is:\nThe first player should take the stones from the first pile. He will take $1$ stone. The numbers of stones in piles will be $[1, 5, 4]$.\nThe second player should take the stones from the first pile. He will take $1$ stone because he can't take any other number of stones. The numbers of stones in piles will be $[0, 5, 4]$.\nThe first player should take the stones from the second pile because the first pile is empty. He will take $4$ stones. The numbers of stones in piles will be $[0, 1, 4]$.\nThe second player should take the stones from the second pile because the first pile is empty. He will take $1$ stone because he can't take any other number of stones. The numbers of stones in piles will be $[0, 0, 4]$.\nThe first player should take the stones from the third pile because the first and second piles are empty. He will take $4$ stones. The numbers of stones in piles will be $[0, 0, 0]$.\nThe second player will lose the game because all piles will be empty.", "input_specification": "Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 1000$) \u00a0\u2014 the number of test cases. Next $2t$ lines contain descriptions of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 10^5$) \u00a0\u2014 the number of piles.\n\nThe second line of each test case contains $n$ integers $a_1,\\ldots,a_n$ ($1\\le a_i\\le 10^9$) \u00a0\u2014 $a_i$ is equal to the number of stones in the $i$-th pile.\n\nIt is guaranteed that the sum of $n$ for all test cases does not exceed $10^5$.", "output_specification": "Output\n\nFor each test case, if the player who makes the first move will win, output \" First \". Otherwise, output \" Second \".", "sample_tests": "Example\n\nInput\n7\n3\n2 5 4\n8\n1 1 1 1 1 1 1 1\n6\n1 2 3 4 5 6\n6\n1 1 2 1 2 2\n1\n1000000000\n5\n1 2 2 1 1\n3\n1 1 1\n\nOutput\nFirst\nSecond\nSecond\nFirst\nFirst\nSecond\nFirst", "difficulty": 1100, "url": "https://codeforces.com/problemset/problem/1382/C"}
{"header": "D. Unmerge\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Let $a$ and $b$ be two arrays of lengths $n$ and $m$, respectively, with no elements in common. We can define a new array $\\mathrm{merge}(a,b)$ of length $n+m$ recursively as follows:\nIf one of the arrays is empty, the result is the other array. That is, $\\mathrm{merge}(\\emptyset,b)=b$ and $\\mathrm{merge}(a,\\emptyset)=a$. In particular, $\\mathrm{merge}(\\emptyset,\\emptyset)=\\emptyset$.\nIf both arrays are non-empty, and $a_1<b_1$, then $\\mathrm{merge}(a,b)=[a_1]+\\mathrm{merge}([a_2,\\ldots,a_n],b)$. That is, we delete the first element $a_1$ of $a$, merge the remaining arrays, then add $a_1$ to the beginning of the result.\nIf both arrays are non-empty, and $a_1>b_1$, then $\\mathrm{merge}(a,b)=[b_1]+\\mathrm{merge}(a,[b_2,\\ldots,b_m])$. That is, we delete the first element $b_1$ of $b$, merge the remaining arrays, then add $b_1$ to the beginning of the result.\nThis algorithm has the nice property that if $a$ and $b$ are sorted, then $\\mathrm{merge}(a,b)$ will also be sorted. For example, it is used as a subroutine in merge-sort. For this problem, however, we will consider the same procedure acting on non-sorted arrays as well. For example, if $a=[3,1]$ and $b=[2,4]$, then $\\mathrm{merge}(a,b)=[2,3,1,4]$.\nA permutation is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array) and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\nThere is a permutation $p$ of length $2n$. Determine if there exist two arrays $a$ and $b$, each of length $n$ and with no elements in common, so that $p=\\mathrm{merge}(a,b)$.\nNote\nIn the first test case, $[2,3,1,4]=\\mathrm{merge}([3,1],[2,4])$.\nIn the second test case, we can show that $[3,1,2,4]$ is not the merge of two arrays of length $2$.\nIn the third test case, $[3,2,6,1,5,7,8,4]=\\mathrm{merge}([3,2,8,4],[6,1,5,7])$.\nIn the fourth test case, $[1,2,3,4,5,6]=\\mathrm{merge}([1,3,6],[2,4,5])$, for example.", "input_specification": "Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 1000$) \u00a0\u2014 the number of test cases. Next $2t$ lines contain descriptions of test cases. \n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 2000$).\n\nThe second line of each test case contains $2n$ integers $p_1,\\ldots,p_{2n}$ ($1\\le p_i\\le 2n$). It is guaranteed that $p$ is a permutation.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2000$.", "output_specification": "Output\n\nFor each test case, output \" YES \" if there exist arrays $a$, $b$, each of length $n$ and with no common elements, so that $p=\\mathrm{merge}(a,b)$. Otherwise, output \" NO \".", "sample_tests": "Example\n\nInput\n6\n2\n2 3 1 4\n2\n3 1 2 4\n4\n3 2 6 1 5 7 8 4\n3\n1 2 3 4 5 6\n4\n6 1 3 7 4 5 8 2\n6\n4 3 2 5 1 11 9 12 8 6 10 7\n\nOutput\nYES\nNO\nYES\nYES\nNO\nNO", "difficulty": 1800, "url": "https://codeforces.com/problemset/problem/1382/D"}
{"header": "A. Generous Kefa\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "One day Kefa found\nn\nbaloons. For convenience, we denote color of\ni\n-th baloon as\ns\ni\n\u2014 lowercase letter of the Latin alphabet. Also Kefa has\nk\nfriends. Friend will be upset, If he get two baloons of the same color. Kefa want to give out\nall\nbaloons to his friends. Help Kefa to find out, can he give out all his baloons, such that no one of his friens will be upset \u2014 print \u00ab\nYES\n\u00bb, if he can, and \u00ab\nNO\n\u00bb, otherwise. Note, that Kefa's friend will not upset, if he doesn't get baloons at all.\nNote\nIn the first sample Kefa can give\n1\n-st and\n3\n-rd baloon to the first friend, and\n2\n-nd and\n4\n-th to the second.\nIn the second sample Kefa needs to give to all his friends baloons of color\na\n, but one baloon will stay, thats why answer is \u00ab\nNO\n\u00bb.", "input_specification": "Input\n\nThe first line contains two integers *n* and *k* ( 1\u2009\u2264\u2009 *n* ,\u2009 *k* \u2009\u2264\u2009100 ) \u2014 the number of baloons and friends.\n\nNext line contains string *s* \u2014 colors of baloons.", "output_specification": "Output\n\nAnswer to the task \u2014 \u00ab YES \u00bb or \u00ab NO \u00bb in a single line.\n\nYou can choose the case (lower or upper) for each letter arbitrary.", "sample_tests": "Examples\n\nInput\n4 2aabb\n\nOutput\nYES\n\nInput\n6 3aacaab\n\nOutput\nNO", "difficulty": 900, "url": "https://codeforces.com/problemset/problem/841/A"}
{"header": "B. Godsend\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Leha somehow found an array consisting of\nn\nintegers. Looking at it, he came up with a task. Two players play the game on the array. Players move one by one. The first player can choose for his move a subsegment of non-zero length with an odd sum of numbers and remove it from the array, after that the remaining parts are glued together into one array and the game continues. The second player can choose a subsegment of non-zero length with an even sum and remove it. Loses the one who can not make a move. Who will win if both play optimally?\nNote\nIn first sample first player remove whole array in one move and win.\nIn second sample first player can't make a move and lose.", "input_specification": "Input\n\nFirst line of input data contains single integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 6 ) \u2014 length of the array.\n\nNext line contains *n* integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* ( 0\u2009\u2264\u2009 *a* *i* \u2009\u2264\u200910 9 ).", "output_specification": "Output\n\nOutput answer in single line. \" First \", if first player wins, and \" Second \" otherwise (without quotes).", "sample_tests": "Examples\n\nInput\n41 3 2 3\n\nOutput\nFirst\n\nInput\n22 2\n\nOutput\nSecond", "difficulty": 1100, "url": "https://codeforces.com/problemset/problem/841/B"}
{"header": "C. Leha and Function\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Leha like all kinds of strange things. Recently he liked the function\nF\n(\nn\n,\nk\n)\n. Consider all possible\nk\n-element subsets of the set\n[1,\u20092,\u2009...,\nn\n]\n. For subset find minimal element in it.\nF\n(\nn\n,\nk\n)\n\u2014 mathematical expectation of the minimal element among all\nk\n-element subsets.\nBut only function does not interest him. He wants to do interesting things with it. Mom brought him two arrays\nA\nand\nB\n, each consists of\nm\nintegers. For all\ni\n,\nj\nsuch that\n1\u2009\u2264\ni\n,\nj\n\u2264\nm\nthe condition\nA\ni\n\u2265\nB\nj\nholds. Help Leha rearrange the numbers in the array\nA\nso that the sum\nis maximally possible, where\nA\n'\nis already rearranged array.", "input_specification": "Input\n\nFirst line of input data contains single integer *m* ( 1\u2009\u2264\u2009 *m* \u2009\u2264\u20092\u00b710 5 ) \u2014 length of arrays *A* and *B* .\n\nNext line contains *m* integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *m* ( 1\u2009\u2264\u2009 *a* *i* \u2009\u2264\u200910 9 ) \u2014 array *A* .\n\nNext line contains *m* integers *b* 1 ,\u2009 *b* 2 ,\u2009...,\u2009 *b* *m* ( 1\u2009\u2264\u2009 *b* *i* \u2009\u2264\u200910 9 ) \u2014 array *B* .", "output_specification": "Output\n\nOutput *m* integers *a* ' 1 ,\u2009 *a* ' 2 ,\u2009...,\u2009 *a* ' *m* \u2014 array *A* ' which is permutation of the array *A* .", "sample_tests": "Examples\n\nInput\n57 3 5 3 42 1 3 2 3\n\nOutput\n4 7 3 5 3\n\nInput\n74 6 5 8 8 2 62 1 2 2 1 1 2\n\nOutput\n2 6 4 5 8 8 6", "difficulty": 1300, "url": "https://codeforces.com/problemset/problem/841/C"}
{"header": "D. Leha and another game about graph\n\ntime limit per test\n 3 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Leha plays a computer game, where is on each level is given a connected graph with\nn\nvertices and\nm\nedges. Graph can contain multiple edges, but can not contain self loops. Each vertex has an integer\nd\ni\n, which can be equal to\n0\n,\n1\nor\n-\u20091\n. To pass the level, he needs to find a \u00abgood\u00bb subset of edges of the graph or say, that it doesn't exist. Subset is called \u00abgood\u00bb, if by by leaving only edges from this subset in the original graph, we obtain the following: for every vertex i,\nd\ni\n=\u2009\u2009-\u20091 or it's degree modulo 2 is equal to\nd\ni\n. Leha wants to pass the game as soon as possible and ask you to help him. In case of multiple correct answers, print any of them.\nNote\nIn the first sample we have single vertex without edges. It's degree is 0 and we can not get 1.", "input_specification": "Input\n\nThe first line contains two integers *n* , *m* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u20093\u00b710 5 , *n* \u2009-\u20091\u2009\u2264\u2009 *m* \u2009\u2264\u20093\u00b710 5 ) \u2014 number of vertices and edges.\n\nThe second line contains *n* integers *d* 1 ,\u2009 *d* 2 ,\u2009...,\u2009 *d* *n* ( \u2009-\u20091\u2009\u2264\u2009 *d* *i* \u2009\u2264\u20091 ) \u2014 numbers on the vertices.\n\nEach of the next *m* lines contains two integers *u* and *v* ( 1\u2009\u2264\u2009 *u* ,\u2009 *v* \u2009\u2264\u2009 *n* ) \u2014 edges. It's guaranteed, that graph in the input is connected.", "output_specification": "Output\n\nPrint \u2009-\u20091 in a single line, if solution doesn't exist. Otherwise in the first line *k* \u2014 number of edges in a subset. In the next *k* lines indexes of edges. Edges are numerated in order as they are given in the input, starting from 1 .", "sample_tests": "Examples\n\nInput\n1 01\n\nOutput\n-1\n\nInput\n4 50 0 0 -11 22 33 41 42 4\n\nOutput\n0\n\nInput\n2 11 11 2\n\nOutput\n11\n\nInput\n3 30 -1 11 22 31 3\n\nOutput\n12", "difficulty": 2100, "url": "https://codeforces.com/problemset/problem/841/D"}
{"header": "A. And Then There Were K\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Given an integer $n$, find the maximum value of integer $k$ such that the following condition holds:\n$n$ & ($n-1$) & ($n-2$) & ($n-3$) & ... ($k$) = $0$\nwhere & denotes the\nbitwise AND operation.\nNote\nIn the first testcase, the maximum value for which the continuous & operation gives 0 value, is 1.\nIn the second testcase, the maximum value for which the continuous & operation gives 0 value, is 3. No value greater then 3, say for example 4, will give the & sum 0.\n$5 \\, \\& \\, 4 \\neq 0$,\n$5 \\, \\& \\, 4 \\, \\& \\, 3 = 0$.\nHence, 3 is the answer.", "input_specification": "Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 3 \\cdot 10^4$). Then $t$ test cases follow.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^9$).", "output_specification": "Output\n\nFor each test case, output a single integer \u2014 the required integer $k$.", "sample_tests": "Example\n\nInput\n3\n2\n5\n17\n\nOutput\n1\n3\n15", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1527/A"}
{"header": "A. And Then There Were K\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Given an integer $n$, find the maximum value of integer $k$ such that the following condition holds:\n$n$ & ($n-1$) & ($n-2$) & ($n-3$) & ... ($k$) = $0$\nwhere & denotes the\nbitwise AND operation.\nNote\nIn the first testcase, the maximum value for which the continuous & operation gives 0 value, is 1.\nIn the second testcase, the maximum value for which the continuous & operation gives 0 value, is 3. No value greater then 3, say for example 4, will give the & sum 0.\n$5 \\, \\& \\, 4 \\neq 0$,\n$5 \\, \\& \\, 4 \\, \\& \\, 3 = 0$.\nHence, 3 is the answer.", "input_specification": "Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 3 \\cdot 10^4$). Then $t$ test cases follow.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^9$).", "output_specification": "Output\n\nFor each test case, output a single integer \u2014 the required integer $k$.", "sample_tests": "Example\n\nInput\n3\n2\n5\n17\n\nOutput\n1\n3\n15", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1527/B"}
{"header": "C. Sequence Pair Weight\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "The\nweight\nof a sequence is defined as the number of unordered pairs of indexes $(i,j)$ (here $i \\lt j$) with same value ($a_{i} = a_{j}$). For example, the weight of sequence $a = [1, 1, 2, 2, 1]$ is $4$. The set of unordered pairs of indexes with same value are $(1, 2)$, $(1, 5)$, $(2, 5)$, and $(3, 4)$.\nYou are given a sequence $a$ of $n$ integers. Print the sum of the weight of all subsegments of $a$.\nA sequence $b$ is a subsegment of a sequence $a$ if $b$ can be obtained from $a$ by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\nNote\nIn test case $1$, all possible subsegments of sequence $[1, 2, 1, 1]$ having size more than $1$ are:\n$[1, 2]$ having $0$ valid unordered pairs;\n$[2, 1]$ having $0$ valid unordered pairs;\n$[1, 1]$ having $1$ valid unordered pair;\n$[1, 2, 1]$ having $1$ valid unordered pairs;\n$[2, 1, 1]$ having $1$ valid unordered pair;\n$[1, 2, 1, 1]$ having $3$ valid unordered pairs.\nAnswer is $6$.\nIn test case $2$, all elements of the sequence are distinct. So, there is no valid unordered pair with the same value for any subarray. Answer is $0$.", "input_specification": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^5$). Description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^5$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.", "output_specification": "Output\n\nFor each test case, print a single integer\u00a0\u2014 the sum of the weight of all subsegments of $a$.", "sample_tests": "Example\n\nInput\n2\n4\n1 2 1 1\n4\n1 2 3 4\n\nOutput\n6\n0", "difficulty": 1600, "url": "https://codeforces.com/problemset/problem/1527/C"}
{"header": "A. Game 23\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Polycarp plays \"Game 23\". Initially he has a number $n$ and his goal is to transform it to $m$. In one move, he can multiply $n$ by $2$ or multiply $n$ by $3$. He can perform any number of moves.\nPrint the number of moves needed to transform $n$ to $m$. Print\n-1\nif it is impossible to do so.\nIt is easy to prove that any way to transform $n$ to $m$ contains the same number of moves (i.e. number of moves doesn't depend on the way of transformation).\nNote\nIn the first example, the possible sequence of moves is: $120 \\rightarrow 240 \\rightarrow 720 \\rightarrow 1440 \\rightarrow 4320 \\rightarrow 12960 \\rightarrow 25920 \\rightarrow 51840.$ The are $7$ steps in total.\nIn the second example, no moves are needed. Thus, the answer is $0$.\nIn the third example, it is impossible to transform $48$ to $72$.", "input_specification": "Input\n\nThe only line of the input contains two integers $n$ and $m$ ($1 \\le n \\le m \\le 5\\cdot10^8$).", "output_specification": "Output\n\nPrint the number of moves to transform $n$ to $m$, or -1 if there is no solution.", "sample_tests": "Examples\n\nInput\n120 51840\n\nOutput\n7\n\nInput\n42 42\n\nOutput\n0\n\nInput\n48 72\n\nOutput\n-1", "difficulty": 1000, "url": "https://codeforces.com/problemset/problem/1141/A"}
{"header": "B. Maximal Continuous Rest\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Each day in Berland consists of $n$ hours. Polycarp likes time management. That's why he has a fixed schedule for each day \u2014 it is a sequence $a_1, a_2, \\dots, a_n$ (each $a_i$ is either $0$ or $1$), where $a_i=0$ if Polycarp works during the $i$-th hour of the day and $a_i=1$ if Polycarp rests during the $i$-th hour of the day.\nDays go one after another endlessly and Polycarp uses the same schedule for each day.\nWhat is the maximal number of continuous hours during which Polycarp rests? It is guaranteed that there is at least one working hour in a day.\nNote\nIn the first example, the maximal rest starts in last hour and goes to the first hour of the next day.\nIn the second example, Polycarp has maximal rest from the $4$-th to the $5$-th hour.\nIn the third example, Polycarp has maximal rest from the $3$-rd to the $5$-th hour.\nIn the fourth example, Polycarp has no rest at all.", "input_specification": "Input\n\nThe first line contains $n$ ($1 \\le n \\le 2\\cdot10^5$) \u2014 number of hours per day.\n\nThe second line contains $n$ integer numbers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 1$), where $a_i=0$ if the $i$-th hour in a day is working and $a_i=1$ if the $i$-th hour is resting. It is guaranteed that $a_i=0$ for at least one $i$.", "output_specification": "Output\n\nPrint the maximal number of continuous hours during which Polycarp rests. Remember that you should consider that days go one after another endlessly and Polycarp uses the same schedule for each day.", "sample_tests": "Examples\n\nInput\n5\n1 0 1 0 1\n\nOutput\n2\n\nInput\n6\n0 1 0 1 1 0\n\nOutput\n2\n\nInput\n7\n1 0 1 1 1 0 1\n\nOutput\n3\n\nInput\n3\n0 0 0\n\nOutput\n0", "difficulty": 900, "url": "https://codeforces.com/problemset/problem/1141/B"}
{"header": "C. Polycarp Restores Permutation\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "An array of integers $p_1, p_2, \\dots, p_n$ is called a\npermutation\nif it contains each number from $1$ to $n$ exactly once. For example, the following arrays are permutations: $[3, 1, 2]$, $[1]$, $[1, 2, 3, 4, 5]$ and $[4, 3, 1, 2]$. The following arrays are\nnot\npermutations: $[2]$, $[1, 1]$, $[2, 3, 4]$.\nPolycarp invented a really cool permutation $p_1, p_2, \\dots, p_n$ of length $n$. It is very disappointing, but he forgot this permutation. He only remembers the array $q_1, q_2, \\dots, q_{n-1}$ of length $n-1$, where $q_i=p_{i+1}-p_i$.\nGiven $n$ and $q=q_1, q_2, \\dots, q_{n-1}$, help Polycarp restore the invented permutation.", "input_specification": "Input\n\nThe first line contains the integer $n$ ($2 \\le n \\le 2\\cdot10^5$) \u2014 the length of the permutation to restore. The second line contains $n-1$ integers $q_1, q_2, \\dots, q_{n-1}$ ($-n < q_i < n$).", "output_specification": "Output\n\nPrint the integer -1 if there is no such permutation of length $n$ which corresponds to the given array $q$. Otherwise, if it exists, print $p_1, p_2, \\dots, p_n$. Print any such permutation if there are many of them.", "sample_tests": "Examples\n\nInput\n3\n-2 1\n\nOutput\n3 1 2 \n\nInput\n5\n1 1 1 1\n\nOutput\n1 2 3 4 5 \n\nInput\n4\n-1 2 2\n\nOutput\n-1", "difficulty": 1500, "url": "https://codeforces.com/problemset/problem/1141/C"}
{"header": "D. Colored Boots\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "There are $n$ left boots and $n$ right boots. Each boot has a color which is denoted as a lowercase Latin letter or a question mark ('\n?\n'). Thus, you are given two strings $l$ and $r$, both of length $n$. The character $l_i$ stands for the color of the $i$-th left boot and the character $r_i$ stands for the color of the $i$-th right boot.\nA lowercase Latin letter denotes a specific color, but the question mark ('\n?\n') denotes an indefinite color. Two specific colors are\ncompatible\nif they are exactly the same. An indefinite color is\ncompatible\nwith any (specific or indefinite) color.\nFor example, the following pairs of colors are compatible: ('\nf\n', '\nf\n'), ('\n?\n', '\nz\n'), ('\na\n', '\n?\n') and ('\n?\n', '\n?\n'). The following pairs of colors are\nnot\ncompatible: ('\nf\n', '\ng\n') and ('\na\n', '\nz\n').\nCompute the maximum number of pairs of boots such that there is one left and one right boot in a pair and their colors are compatible.\nPrint the maximum number of such pairs and the pairs themselves. A boot can be part of at most one pair.", "input_specification": "Input\n\nThe first line contains $n$ ($1 \\le n \\le 150000$), denoting the number of boots for each leg (i.e. the number of left boots and the number of right boots).\n\nThe second line contains the string $l$ of length $n$. It contains only lowercase Latin letters or question marks. The $i$-th character stands for the color of the $i$-th left boot.\n\nThe third line contains the string $r$ of length $n$. It contains only lowercase Latin letters or question marks. The $i$-th character stands for the color of the $i$-th right boot.", "output_specification": "Output\n\nPrint $k$ \u2014 the maximum number of compatible left-right pairs of boots, i.e. pairs consisting of one left and one right boot which have compatible colors.\n\nThe following $k$ lines should contain pairs $a_j, b_j$ ($1 \\le a_j, b_j \\le n$). The $j$-th of these lines should contain the index $a_j$ of the left boot in the $j$-th pair and index $b_j$ of the right boot in the $j$-th pair. All the numbers $a_j$ should be distinct (unique), all the numbers $b_j$ should be distinct (unique).\n\nIf there are many optimal answers, print any of them.", "sample_tests": "Examples\n\nInput\n10\ncodeforces\ndodivthree\n\nOutput\n5\n7 8\n4 9\n2 2\n9 10\n3 1\n\nInput\n7\nabaca?b\nzabbbcc\n\nOutput\n5\n6 5\n2 3\n4 6\n7 4\n1 2\n\nInput\n9\nbambarbia\nhellocode\n\nOutput\n0\n\nInput\n10\ncode??????\n??????test\n\nOutput\n10\n6 2\n1 6\n7 3\n3 5\n4 8\n9 7\n5 1\n2 4\n10 9\n8 10", "difficulty": 1500, "url": "https://codeforces.com/problemset/problem/1141/D"}
{"header": "E. Superhero Battle\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "A superhero fights with a monster. The battle consists of rounds, each of which lasts exactly $n$ minutes. After a round ends, the next round starts immediately. This is repeated over and over again.\nEach round has the same scenario. It is described by a sequence of $n$ numbers: $d_1, d_2, \\dots, d_n$ ($-10^6 \\le d_i \\le 10^6$). The $i$-th element means that monster's hp (hit points) changes by the value $d_i$ during the $i$-th minute of each round. Formally, if before the $i$-th minute of a round the monster's hp is $h$, then after the $i$-th minute it changes to $h := h + d_i$.\nThe monster's initial hp is $H$. It means that before the battle the monster has $H$ hit points. Print the first minute after which the monster dies. The monster dies if its hp is less than or equal to $0$. Print\n-1\nif the battle continues infinitely.", "input_specification": "Input\n\nThe first line contains two integers $H$ and $n$ ($1 \\le H \\le 10^{12}$, $1 \\le n \\le 2\\cdot10^5$). The second line contains the sequence of integers $d_1, d_2, \\dots, d_n$ ($-10^6 \\le d_i \\le 10^6$), where $d_i$ is the value to change monster's hp in the $i$-th minute of a round.", "output_specification": "Output\n\nPrint -1 if the superhero can't kill the monster and the battle will last infinitely. Otherwise, print the positive integer $k$ such that $k$ is the first minute after which the monster is dead.", "sample_tests": "Examples\n\nInput\n1000 6\n-100 -200 -300 125 77 -4\n\nOutput\n9\n\nInput\n1000000000000 5\n-1 0 0 0 0\n\nOutput\n4999999999996\n\nInput\n10 4\n-3 -6 5 4\n\nOutput\n-1", "difficulty": 1700, "url": "https://codeforces.com/problemset/problem/1141/E"}
{"header": "E. Superhero Battle\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "A superhero fights with a monster. The battle consists of rounds, each of which lasts exactly $n$ minutes. After a round ends, the next round starts immediately. This is repeated over and over again.\nEach round has the same scenario. It is described by a sequence of $n$ numbers: $d_1, d_2, \\dots, d_n$ ($-10^6 \\le d_i \\le 10^6$). The $i$-th element means that monster's hp (hit points) changes by the value $d_i$ during the $i$-th minute of each round. Formally, if before the $i$-th minute of a round the monster's hp is $h$, then after the $i$-th minute it changes to $h := h + d_i$.\nThe monster's initial hp is $H$. It means that before the battle the monster has $H$ hit points. Print the first minute after which the monster dies. The monster dies if its hp is less than or equal to $0$. Print\n-1\nif the battle continues infinitely.", "input_specification": "Input\n\nThe first line contains two integers $H$ and $n$ ($1 \\le H \\le 10^{12}$, $1 \\le n \\le 2\\cdot10^5$). The second line contains the sequence of integers $d_1, d_2, \\dots, d_n$ ($-10^6 \\le d_i \\le 10^6$), where $d_i$ is the value to change monster's hp in the $i$-th minute of a round.", "output_specification": "Output\n\nPrint -1 if the superhero can't kill the monster and the battle will last infinitely. Otherwise, print the positive integer $k$ such that $k$ is the first minute after which the monster is dead.", "sample_tests": "Examples\n\nInput\n1000 6\n-100 -200 -300 125 77 -4\n\nOutput\n9\n\nInput\n1000000000000 5\n-1 0 0 0 0\n\nOutput\n4999999999996\n\nInput\n10 4\n-3 -6 5 4\n\nOutput\n-1", "difficulty": 1700, "url": "https://codeforces.com/problemset/problem/1141/F"}
{"header": "G. Privatization of Roads in Treeland\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Treeland consists of $n$ cities and $n-1$ roads. Each road is bidirectional and connects two distinct cities. From any city you can get to any other city by roads. Yes, you are right \u2014 the country's topology is an undirected tree.\nThere are some private road companies in Treeland. The government decided to sell roads to the companies. Each road will belong to one company and a company can own multiple roads.\nThe government is afraid to look unfair. They think that people in a city can consider them unfair if there is one company which owns two or more roads entering the city. The government wants to make such privatization that the number of such cities doesn't exceed $k$ and the number of companies taking part in the privatization is minimal.\nChoose the number of companies $r$ such that it is possible to assign each road to one company in such a way that the number of cities that have two or more roads of one company is at most $k$. In other words, if for a city all the roads belong to the different companies then the city is\ngood\n. Your task is to find the minimal $r$ that there is such assignment to companies from $1$ to $r$ that the number of cities which are not\ngood\ndoesn't exceed $k$.\nThe picture illustrates the first example ($n=6, k=2$). The answer contains $r=2$ companies. Numbers on the edges denote edge indices. Edge colors mean companies:\nred\ncorresponds to the first company,\nblue\ncorresponds to the second company. The gray vertex (number $3$) is\nnot good\n. The number of such vertices (just one) doesn't exceed $k=2$. It is impossible to have at most $k=2$ not good cities in case of one company.", "input_specification": "Input\n\nThe first line contains two integers $n$ and $k$ ($2 \\le n \\le 200000, 0 \\le k \\le n - 1$) \u2014 the number of cities and the maximal number of cities which can have two or more roads belonging to one company.\n\nThe following $n-1$ lines contain roads, one road per line. Each line contains a pair of integers $x_i$, $y_i$ ($1 \\le x_i, y_i \\le n$), where $x_i$, $y_i$ are cities connected with the $i$-th road.", "output_specification": "Output\n\nIn the first line print the required $r$ ($1 \\le r \\le n - 1$). In the second line print $n-1$ numbers $c_1, c_2, \\dots, c_{n-1}$ ($1 \\le c_i \\le r$), where $c_i$ is the company to own the $i$-th road. If there are multiple answers, print any of them.", "sample_tests": "Examples\n\nInput\n6 2\n1 4\n4 3\n3 5\n3 6\n5 2\n\nOutput\n2\n1 2 1 1 2 \n\nInput\n4 2\n3 1\n1 4\n1 2\n\nOutput\n1\n1 1 1 \n\nInput\n10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9\n\nOutput\n3\n1 1 2 3 2 3 1 3 1", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/1141/G"}
{"header": "G. Privatization of Roads in Treeland\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Treeland consists of $n$ cities and $n-1$ roads. Each road is bidirectional and connects two distinct cities. From any city you can get to any other city by roads. Yes, you are right \u2014 the country's topology is an undirected tree.\nThere are some private road companies in Treeland. The government decided to sell roads to the companies. Each road will belong to one company and a company can own multiple roads.\nThe government is afraid to look unfair. They think that people in a city can consider them unfair if there is one company which owns two or more roads entering the city. The government wants to make such privatization that the number of such cities doesn't exceed $k$ and the number of companies taking part in the privatization is minimal.\nChoose the number of companies $r$ such that it is possible to assign each road to one company in such a way that the number of cities that have two or more roads of one company is at most $k$. In other words, if for a city all the roads belong to the different companies then the city is\ngood\n. Your task is to find the minimal $r$ that there is such assignment to companies from $1$ to $r$ that the number of cities which are not\ngood\ndoesn't exceed $k$.\nThe picture illustrates the first example ($n=6, k=2$). The answer contains $r=2$ companies. Numbers on the edges denote edge indices. Edge colors mean companies:\nred\ncorresponds to the first company,\nblue\ncorresponds to the second company. The gray vertex (number $3$) is\nnot good\n. The number of such vertices (just one) doesn't exceed $k=2$. It is impossible to have at most $k=2$ not good cities in case of one company.", "input_specification": "Input\n\nThe first line contains two integers $n$ and $k$ ($2 \\le n \\le 200000, 0 \\le k \\le n - 1$) \u2014 the number of cities and the maximal number of cities which can have two or more roads belonging to one company.\n\nThe following $n-1$ lines contain roads, one road per line. Each line contains a pair of integers $x_i$, $y_i$ ($1 \\le x_i, y_i \\le n$), where $x_i$, $y_i$ are cities connected with the $i$-th road.", "output_specification": "Output\n\nIn the first line print the required $r$ ($1 \\le r \\le n - 1$). In the second line print $n-1$ numbers $c_1, c_2, \\dots, c_{n-1}$ ($1 \\le c_i \\le r$), where $c_i$ is the company to own the $i$-th road. If there are multiple answers, print any of them.", "sample_tests": "Examples\n\nInput\n6 2\n1 4\n4 3\n3 5\n3 6\n5 2\n\nOutput\n2\n1 2 1 1 2 \n\nInput\n4 2\n3 1\n1 4\n1 2\n\nOutput\n1\n1 1 1 \n\nInput\n10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9\n\nOutput\n3\n1 1 2 3 2 3 1 3 1", "difficulty": 1900, "url": "https://codeforces.com/problemset/problem/1141/H"}
{"header": "A. Double Cola\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Sheldon, Leonard, Penny, Rajesh and Howard are in the queue for a \"Double Cola\" drink vending machine; there are no other people in the queue. The first one in the queue (Sheldon) buys a can, drinks it and doubles! The resulting two Sheldons go to the end of the queue. Then the next in the queue (Leonard) buys a can, drinks it and gets to the end of the queue as two Leonards, and so on. This process continues ad infinitum.\nFor example, Penny drinks the third can of cola and the queue will look like this: Rajesh, Howard, Sheldon, Sheldon, Leonard, Leonard, Penny, Penny.\nWrite a program that will print the name of a man who will drink the\nn\n-th can.\nNote that in the very beginning the queue looks like that: Sheldon, Leonard, Penny, Rajesh, Howard. The first person is Sheldon.", "input_specification": "Input\n\nThe input data consist of a single integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u200910 9 ).\n\nIt is guaranteed that the pretests check the spelling of all the five names, that is, that they contain all the five possible answers.", "output_specification": "Output\n\nPrint the single line \u2014 the name of the person who drinks the *n* -th can of cola. The cans are numbered starting from 1. Please note that you should spell the names like this: \" Sheldon \", \" Leonard \", \" Penny \", \" Rajesh \", \" Howard \" (without the quotes). In that order precisely the friends are in the queue initially.", "sample_tests": "Examples\n\nInput\n1\n\nOutput\nSheldon\n\nInput\n6\n\nOutput\nSheldon\n\nInput\n1802\n\nOutput\nPenny", "difficulty": 1100, "url": "https://codeforces.com/problemset/problem/82/A"}
{"header": "B. Sets\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Little Vasya likes very much to play with sets consisting of positive integers. To make the game more interesting, Vasya chose\nn\nnon-empty sets in such a way, that no two of them have common elements.\nOne day he wanted to show his friends just how interesting playing with numbers is. For that he wrote out all possible unions of two different sets on\nn\n\u00b7(\nn\n-\u20091)\u2009/\u20092\npieces of paper. Then he shuffled the pieces of paper. He had written out the numbers in the unions in an arbitrary order.\nFor example, if\nn\n=\u20094\n, and the actual sets have the following form\n{1,\u20093}\n,\n{5}\n,\n{2,\u20094}\n,\n{7}\n, then the number of set pairs equals to six. The six pieces of paper can contain the following numbers:\n2,\u20097,\u20094\n.\n1,\u20097,\u20093\n;\n5,\u20094,\u20092\n;\n1,\u20093,\u20095\n;\n3,\u20091,\u20092,\u20094\n;\n5,\u20097\n.\nThen Vasya showed the pieces of paper to his friends, but kept the\nn\nsets secret from them. His friends managed to calculate which sets Vasya had thought of in the first place. And how about you, can you restore the sets by the given pieces of paper?", "input_specification": "Input\n\nThe first input file line contains a number *n* ( 2\u2009\u2264\u2009 *n* \u2009\u2264\u2009200 ), *n* is the number of sets at Vasya's disposal. Then follow sets of numbers from the pieces of paper written on *n* \u00b7( *n* \u2009-\u20091)\u2009/\u20092 lines. Each set starts with the number *k* *i* ( 2\u2009\u2264\u2009 *k* *i* \u2009\u2264\u2009200 ), which is the number of numbers written of the *i* -th piece of paper, and then follow *k* *i* numbers *a* *ij* ( 1\u2009\u2264\u2009 *a* *ij* \u2009\u2264\u2009200 ). All the numbers on the lines are separated by exactly one space. It is guaranteed that the input data is constructed according to the above given rules from *n* non-intersecting sets.", "output_specification": "Output\n\nPrint on *n* lines Vasya's sets' description. The first number on the line shows how many numbers the current set has. Then the set should be recorded by listing its elements. Separate the numbers by spaces. Each number and each set should be printed exactly once. Print the sets and the numbers in the sets in any order. If there are several answers to that problem, print any of them.\n\nIt is guaranteed that there is a solution.", "sample_tests": "Examples\n\nInput\n43 2 7 43 1 7 33 5 4 23 1 3 54 3 1 2 42 5 7\n\nOutput\n1 7 2 2 4 2 1 3 1 5 \n\nInput\n45 6 7 8 9 1004 7 8 9 14 7 8 9 23 1 6 1003 2 6 1002 1 2\n\nOutput\n3 7 8 9 2 6 100 1 1 1 2 \n\nInput\n32 1 22 1 32 2 3\n\nOutput\n1 1 1 2 1 3", "difficulty": 1700, "url": "https://codeforces.com/problemset/problem/82/B"}
{"header": "C. General Mobilization\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "The Berland Kingdom is a set of\nn\ncities connected with each other with\nn\n-\u20091\nrailways. Each road connects exactly two different cities. The capital is located in city\n1\n. For each city there is a way to get from there to the capital by rail.\nIn the\ni\n-th city there is a soldier division number\ni\n, each division is characterized by a number of\na\ni\n. It represents the priority, the smaller the number, the higher the priority of this division. All values of\na\ni\nare different.\nOne day the Berland King Berl Great declared a general mobilization, and for that, each division should arrive in the capital. Every day from every city except the capital a train departs. So there are exactly\nn\n-\u20091\ndeparting trains each day. Each train moves toward the capital and finishes movement on the opposite endpoint of the railway on the next day. It has some finite capacity of\nc\nj\n, expressed in the maximum number of divisions, which this train can transport in one go. Each train moves in the direction of reducing the distance to the capital. So each train passes exactly one railway moving from a city to the neighboring (where it stops) toward the capital.\nIn the first place among the divisions that are in the city, division with the smallest number of\na\ni\nget on the train, then with the next smallest and so on, until either the train is full or all the divisions are be loaded. So it is possible for a division to stay in a city for a several days.\nThe duration of train's progress from one city to another is always equal to\n1\nday. All divisions start moving at the same time and end up in the capital, from where they don't go anywhere else any more. Each division moves along a simple path from its city to the capital, regardless of how much time this journey will take.\nYour goal is to find for each division, in how many days it will arrive to the capital of Berland. The countdown begins from day\n0\n.", "input_specification": "Input\n\nThe first line contains the single integer *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u20095000 ). It is the number of cities in Berland. The second line contains *n* space-separated integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* , where *a* *i* represents the priority of the division, located in the city number *i* . All numbers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* are different ( 1\u2009\u2264\u2009 *a* *i* \u2009\u2264\u200910 9 ). Then *n* \u2009-\u20091 lines contain the descriptions of the railway roads. Each description consists of three integers *v* *j* ,\u2009 *u* *j* ,\u2009 *c* *j* , where *v* *j* , *u* *j* are number of cities connected by the *j* -th rail, and *c* *j* stands for the maximum capacity of a train riding on this road ( 1\u2009\u2264\u2009 *v* *j* ,\u2009 *u* *j* \u2009\u2264\u2009 *n* ,\u2009 *v* *j* \u2009\u2260\u2009 *u* *j* , 1\u2009\u2264\u2009 *c* *j* \u2009\u2264\u2009 *n* ).", "output_specification": "Output\n\nPrint sequence *t* 1 ,\u2009 *t* 2 ,\u2009...,\u2009 *t* *n* , where *t* *i* stands for the number of days it takes for the division of city *i* to arrive to the capital. Separate numbers with spaces.", "sample_tests": "Examples\n\nInput\n440 10 30 201 2 12 3 14 2 1\n\nOutput\n0 1 3 2 \n\nInput\n55 4 3 2 11 2 12 3 12 4 14 5 1\n\nOutput\n0 1 4 2 3", "difficulty": 2000, "url": "https://codeforces.com/problemset/problem/82/C"}
{"header": "D. Two out of Three\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Vasya has recently developed a new algorithm to optimize the reception of customer flow and he considered the following problem.\nLet the queue to the cashier contain\nn\npeople, at that each of them is characterized by a positive integer\na\ni\n\u2014 that is the time needed to work with this customer. What is special about this very cashier is that it can serve two customers simultaneously. However, if two customers need\na\ni\nand\na\nj\nof time to be served, the time needed to work with both of them customers is equal to\nmax\n(\na\ni\n,\na\nj\n)\n. Please note that working with customers is an uninterruptable process, and therefore, if two people simultaneously come to the cashier, it means that they begin to be served simultaneously, and will both finish simultaneously (it is possible that one of them will have to wait).\nVasya used in his algorithm an ingenious heuristic \u2014 as long as the queue has more than one person waiting, then\nsome two people of the first three standing in front of the queue are sent simultaneously\n. If the queue has only one customer number\ni\n, then he goes to the cashier, and is served within\na\ni\nof time. Note that the total number of phases of serving a customer will always be equal to\n\u2308\nn\n/\u20092\u2309\n.\nVasya thinks that this method will help to cope with the queues we all hate. That's why he asked you to work out a program that will determine the minimum time during which the whole queue will be served using this algorithm.", "input_specification": "Input\n\nThe first line of the input file contains a single number *n* ( 1\u2009\u2264\u2009 *n* \u2009\u2264\u20091000 ), which is the number of people in the sequence. The second line contains space-separated integers *a* 1 ,\u2009 *a* 2 ,\u2009...,\u2009 *a* *n* ( 1\u2009\u2264\u2009 *a* *i* \u2009\u2264\u200910 6 ). The people are numbered starting from the cashier to the end of the queue.", "output_specification": "Output\n\nPrint on the first line a single number \u2014 the minimum time needed to process all *n* people. Then on \u2308 *n* \u2009/\u20092\u2309 lines print the order in which customers will be served. Each line (probably, except for the last one) must contain two numbers separated by a space \u2014 the numbers of customers who will be served at the current stage of processing. If *n* is odd, then the last line must contain a single number \u2014 the number of the last served customer in the queue. The customers are numbered starting from 1 .", "sample_tests": "Examples\n\nInput\n41 2 3 4\n\nOutput\n61 23 4\n\nInput\n52 4 3 1 4\n\nOutput\n81 32 54", "difficulty": 2000, "url": "https://codeforces.com/problemset/problem/82/D"}
{"header": "A. Polycarp's Pockets\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Polycarp has $n$ coins, the value of the $i$-th coin is $a_i$. Polycarp wants to distribute all the coins between his pockets, but he cannot put two coins with the same value into the same pocket.\nFor example, if Polycarp has got six coins represented as an array $a = [1, 2, 4, 3, 3, 2]$, he can distribute the coins into two pockets as follows: $[1, 2, 3], [2, 3, 4]$.\nPolycarp wants to distribute all the coins with the minimum number of used pockets. Help him to do that.", "input_specification": "Input\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the number of coins.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$) \u2014 values of coins.", "output_specification": "Output\n\nPrint only one integer \u2014 the minimum number of pockets Polycarp needs to distribute all the coins so no two coins with the same value are put into the same pocket.", "sample_tests": "Examples\n\nInput\n61 2 4 3 3 2\n\nOutput\n2\n\nInput\n1100\n\nOutput\n1", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1003/A"}
{"header": "B. Binary String Constructing\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given three integers $a$, $b$ and $x$. Your task is to construct a binary string $s$ of length $n = a + b$ such that there are exactly $a$ zeroes, exactly $b$ ones and exactly $x$ indices $i$ (where $1 \\le i < n$) such that $s_i \\ne s_{i + 1}$. It is guaranteed that the answer always exists.\nFor example, for the string \"\n01010\n\" there are four indices $i$ such that $1 \\le i < n$ and $s_i \\ne s_{i + 1}$ ($i = 1, 2, 3, 4$). For the string \"\n111001\n\" there are two such indices $i$ ($i = 3, 5$).\nRecall that binary string is a non-empty sequence of characters where each character is either\n0\nor\n1\n.\nNote\nAll possible answers for the first example:\n1100\n;\n0011\n.\nAll possible answers for the second example:\n110100\n;\n101100\n;\n110010\n;\n100110\n;\n011001\n;\n001101\n;\n010011\n;\n001011\n.", "input_specification": "Input\n\nThe first line of the input contains three integers $a$, $b$ and $x$ ($1 \\le a, b \\le 100, 1 \\le x < a + b)$.", "output_specification": "Output\n\nPrint only one string $s$, where $s$ is any binary string satisfying conditions described above. It is guaranteed that the answer always exists.", "sample_tests": "Examples\n\nInput\n2 2 1\n\nOutput\n1100\n\nInput\n3 3 3\n\nOutput\n101100\n\nInput\n5 3 6\n\nOutput\n01010100", "difficulty": 1300, "url": "https://codeforces.com/problemset/problem/1003/B"}
{"header": "C. Intense Heat\n\ntime limit per test\n 4 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "The heat during the last few days has been really intense. Scientists from all over the Berland study how the temperatures and weather change, and they claim that this summer is abnormally hot. But any scientific claim sounds a lot more reasonable if there are some numbers involved, so they have decided to actually calculate some value which would represent how high the temperatures are.\nMathematicians of Berland State University came up with a special\nheat intensity value\n. This value is calculated as follows:\nSuppose we want to analyze the segment of $n$ consecutive days. We have measured the temperatures during these $n$ days; the temperature during $i$-th day equals $a_i$.\nWe denote the\naverage temperature\nof a segment of some consecutive days as the arithmetic mean of the temperature measures during this segment of days. So, if we want to analyze the\naverage temperature\nfrom day $x$ to day $y$, we calculate it as $\\frac{\\sum \\limits_{i = x}^{y} a_i}{y - x + 1}$ (note that division is performed without any rounding). The\nheat intensity value\nis the maximum of\naverage temperatures\nover all segments of not less than $k$ consecutive days. For example, if analyzing the measures $[3, 4, 1, 2]$ and $k = 3$, we are interested in segments $[3, 4, 1]$, $[4, 1, 2]$ and $[3, 4, 1, 2]$ (we want to find the maximum value of\naverage temperature\nover these segments).\nYou have been hired by Berland State University to write a program that would compute the\nheat intensity value\nof a given period of days. Are you up to this task?", "input_specification": "Input\n\nThe first line contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 5000$) \u2014 the number of days in the given period, and the minimum number of days in a segment we consider when calculating heat intensity value , respectively.\n\nThe second line contains $n$ integers $a_1$, $a_2$, ..., $a_n$ ($1 \\le a_i \\le 5000$) \u2014 the temperature measures during given $n$ days.", "output_specification": "Output\n\nPrint one real number \u2014 the heat intensity value , i. e., the maximum of average temperatures over all segments of not less than $k$ consecutive days.\n\nYour answer will be considered correct if the following condition holds: $|res - res_0| < 10^{-6}$, where $res$ is your answer, and $res_0$ is the answer given by the jury's solution.", "sample_tests": "Example\n\nInput\n4 33 4 1 2\n\nOutput\n2.666666666666667", "difficulty": 1300, "url": "https://codeforces.com/problemset/problem/1003/C"}
{"header": "D. Coins and Queries\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Polycarp has $n$ coins, the value of the $i$-th coin is $a_i$. It is guaranteed that all the values are integer powers of $2$ (i.e. $a_i = 2^d$ for some\nnon-negative\ninteger number $d$).\nPolycarp wants to know answers on $q$ queries. The $j$-th query is described as integer number $b_j$. The answer to the query is the minimum number of coins that is necessary to obtain the value $b_j$ using some subset of coins (Polycarp can use only coins he has). If Polycarp can't obtain the value $b_j$, the answer to the $j$-th query is\n-1\n.\nThe queries are independent (the answer on the query doesn't affect Polycarp's coins).", "input_specification": "Input\n\nThe first line of the input contains two integers $n$ and $q$ ($1 \\le n, q \\le 2 \\cdot 10^5$) \u2014 the number of coins and the number of queries.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ \u2014 values of coins ($1 \\le a_i \\le 2 \\cdot 10^9$). It is guaranteed that all $a_i$ are integer powers of $2$ (i.e. $a_i = 2^d$ for some non-negative integer number $d$).\n\nThe next $q$ lines contain one integer each. The $j$-th line contains one integer $b_j$ \u2014 the value of the $j$-th query ($1 \\le b_j \\le 10^9$).", "output_specification": "Output\n\nPrint $q$ integers $ans_j$. The $j$-th integer must be equal to the answer on the $j$-th query. If Polycarp can't obtain the value $b_j$ the answer to the $j$-th query is -1 .", "sample_tests": "Example\n\nInput\n5 42 4 8 2 4851410\n\nOutput\n1-132", "difficulty": 1600, "url": "https://codeforces.com/problemset/problem/1003/D"}
{"header": "E. Tree Constructing\n\ntime limit per test\n 4 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given three integers $n$, $d$ and $k$.\nYour task is to construct an undirected tree on $n$ vertices with diameter $d$ and degree of each vertex at most $k$, or say that it is impossible.\nAn undirected tree is a connected undirected graph with $n - 1$ edges.\nDiameter of a tree is the maximum length of a simple path (a path in which each vertex appears at most once) between all pairs of vertices of this tree.\nDegree of a vertex is the number of edges incident to this vertex (i.e. for a vertex $u$ it is the number of edges $(u, v)$ that belong to the tree, where $v$ is any other vertex of a tree).", "input_specification": "Input\n\nThe first line of the input contains three integers $n$, $d$ and $k$ ($1 \\le n, d, k \\le 4 \\cdot 10^5$).", "output_specification": "Output\n\nIf there is no tree satisfying the conditions above, print only one word \" NO \" (without quotes).\n\nOtherwise in the first line print \" YES \" (without quotes), and then print $n - 1$ lines describing edges of a tree satisfying the conditions above. Vertices of the tree must be numbered from $1$ to $n$. You can print edges and vertices connected by an edge in any order. If there are multiple answers, print any of them.1", "sample_tests": "Examples\n\nInput\n6 3 3\n\nOutput\nYES3 14 11 25 22 6\n\nInput\n6 2 3\n\nOutput\nNO\n\nInput\n10 4 3\n\nOutput\nYES2 92 1010 33 16 108 24 35 66 7\n\nInput\n8 5 3\n\nOutput\nYES2 57 23 73 11 68 74 3", "difficulty": 2100, "url": "https://codeforces.com/problemset/problem/1003/E"}
{"header": "F. Abbreviation\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given a text consisting of $n$ space-separated words. There is exactly one space character between any pair of adjacent words. There are no spaces before the first word and no spaces after the last word. The length of text is the number of letters and spaces in it. $w_i$ is the $i$-th word of text. All words consist only of lowercase Latin letters.\nLet's denote a segment of words $w[i..j]$ as a sequence of words $w_i, w_{i + 1}, \\dots, w_j$. Two segments of words $w[i_1 .. j_1]$ and $w[i_2 .. j_2]$ are considered\nequal\nif $j_1 - i_1 = j_2 - i_2$, $j_1 \\ge i_1$, $j_2 \\ge i_2$, and for every $t \\in [0, j_1 - i_1]$ $w_{i_1 + t} = w_{i_2 + t}$. For example, for the text \"\nto be or not to be\n\" the segments $w[1..2]$ and $w[5..6]$ are equal, they correspond to the words \"\nto be\n\".\nAn abbreviation is a replacement of some segments of words with their first\nuppercase\nletters. In order to perform an abbreviation, you have to choose\nat least two\nnon-intersecting equal segments of words, and replace each chosen segment with the string consisting of first letters of the words in the segment (written in uppercase). For example, for the text \"\na ab a a b ab a a b c\n\" you can replace segments of words $w[2..4]$ and $w[6..8]$ with an abbreviation \"\nAAA\n\" and obtain the text \"\na AAA b AAA b c\n\", or you can replace segments of words $w[2..5]$ and $w[6..9]$ with an abbreviation \"\nAAAB\n\" and obtain the text \"\na AAAB AAAB c\n\".\nWhat is the minimum length of the text after at most one abbreviation?\nNote\nIn the first example you can obtain the text \"\nTB or not TB\n\".\nIn the second example you can obtain the text \"\na AAAB AAAB c\n\".\nIn the third example you can obtain the text \"\nAB aa AB bb\n\".", "input_specification": "Input\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 300$) \u2014 the number of words in the text.\n\nThe next line contains $n$ space-separated words of the text $w_1, w_2, \\dots, w_n$. Each word consists only of lowercase Latin letters.\n\nIt is guaranteed that the length of text does not exceed $10^5$.", "output_specification": "Output\n\nPrint one integer \u2014 the minimum length of the text after at most one abbreviation.", "sample_tests": "Examples\n\nInput\n6to be or not to be\n\nOutput\n12\n\nInput\n10a ab a a b ab a a b c\n\nOutput\n13\n\nInput\n6aa bb aa aa bb bb\n\nOutput\n11", "difficulty": 2200, "url": "https://codeforces.com/problemset/problem/1003/F"}
{"header": "F. Abbreviation\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given a text consisting of $n$ space-separated words. There is exactly one space character between any pair of adjacent words. There are no spaces before the first word and no spaces after the last word. The length of text is the number of letters and spaces in it. $w_i$ is the $i$-th word of text. All words consist only of lowercase Latin letters.\nLet's denote a segment of words $w[i..j]$ as a sequence of words $w_i, w_{i + 1}, \\dots, w_j$. Two segments of words $w[i_1 .. j_1]$ and $w[i_2 .. j_2]$ are considered\nequal\nif $j_1 - i_1 = j_2 - i_2$, $j_1 \\ge i_1$, $j_2 \\ge i_2$, and for every $t \\in [0, j_1 - i_1]$ $w_{i_1 + t} = w_{i_2 + t}$. For example, for the text \"\nto be or not to be\n\" the segments $w[1..2]$ and $w[5..6]$ are equal, they correspond to the words \"\nto be\n\".\nAn abbreviation is a replacement of some segments of words with their first\nuppercase\nletters. In order to perform an abbreviation, you have to choose\nat least two\nnon-intersecting equal segments of words, and replace each chosen segment with the string consisting of first letters of the words in the segment (written in uppercase). For example, for the text \"\na ab a a b ab a a b c\n\" you can replace segments of words $w[2..4]$ and $w[6..8]$ with an abbreviation \"\nAAA\n\" and obtain the text \"\na AAA b AAA b c\n\", or you can replace segments of words $w[2..5]$ and $w[6..9]$ with an abbreviation \"\nAAAB\n\" and obtain the text \"\na AAAB AAAB c\n\".\nWhat is the minimum length of the text after at most one abbreviation?\nNote\nIn the first example you can obtain the text \"\nTB or not TB\n\".\nIn the second example you can obtain the text \"\na AAAB AAAB c\n\".\nIn the third example you can obtain the text \"\nAB aa AB bb\n\".", "input_specification": "Input\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 300$) \u2014 the number of words in the text.\n\nThe next line contains $n$ space-separated words of the text $w_1, w_2, \\dots, w_n$. Each word consists only of lowercase Latin letters.\n\nIt is guaranteed that the length of text does not exceed $10^5$.", "output_specification": "Output\n\nPrint one integer \u2014 the minimum length of the text after at most one abbreviation.", "sample_tests": "Examples\n\nInput\n6to be or not to be\n\nOutput\n12\n\nInput\n10a ab a a b ab a a b c\n\nOutput\n13\n\nInput\n6aa bb aa aa bb bb\n\nOutput\n11", "difficulty": 2200, "url": "https://codeforces.com/problemset/problem/1003/G"}
