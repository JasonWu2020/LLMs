Here's the updated solution:

```python
def coin_distribution(n, coins):
    """
    Returns the minimum number of pockets needed to distribute the coins.

    :param n: The number of coins.
    :param coins: A list of coin values.
    :return: The minimum number of pockets.
    """
    # Sort the coins in descending order
    coins.sort(reverse=True)

    # Initialize a list to keep track of the count of each coin value
    count = [0] * 101

    # Initialize the count of each coin value to 0
    for val in coins:
        count[val] += 1

    # Initialize the minimum number of pockets and the current pocket number
    min_pockets = 1
    pocket = 1

    # Iterate through the coins
    for val in range(1, 101):
        # If the count of the current coin value is greater than 0, increment the current pocket number
        if count[val] > 0:
            min_pockets += 1
            # Update the count of the current coin value to 0
            count[val] = 0
            # Move to the next pocket
            pocket = max(pocket, val + 1)

    # Print the minimum number of pockets
    print(min_pockets)

# Example usage
n = int(input())
coins = list(map(int, input().split()))
coin_distribution(n, coins)
```

**Explanation**
---------------

This solution works by first sorting the coins in descending order. It then initializes a count array to keep track of the number of coins of each value. It iterates through the sorted coins, incrementing the count of each value and moving to the next pocket when the count of a coin value is greater than 0. Finally, it prints the minimum number of pockets needed.

**Time Complexity:** O(n log n) due to the sorting step, where n is the number of coins.

**Space Complexity:** O(n), for the count array.
