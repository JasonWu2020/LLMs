{"header": "A. Equality\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given a string $s$ of length $n$, which consists only of the first $k$ letters of the Latin alphabet. All letters in string $s$ are uppercase.\nA\nsubsequence\nof string $s$ is a string that can be derived from $s$ by deleting some of its symbols without changing the order of the remaining symbols. For example, \"\nADE\n\" and \"\nBD\n\" are subsequences of \"\nABCDE\n\", but \"\nDEA\n\" is not.\nA subsequence of $s$ called\ngood\nif the number of occurences of each of the first $k$ letters of the alphabet is the same.\nFind the length of the longest good subsequence of $s$.\nNote\nIn the first example, \"\nACBCAB\n\" (\"\nAC\nAA\nBC\nC\nAB\n\") is one of the subsequences that has the same frequency of '\nA\n', '\nB\n' and '\nC\n'. Subsequence \"\nCAB\n\" also has the same frequency of these letters, but doesn't have the maximum possible length.\nIn the second example, none of the subsequences can have '\nD\n', hence the answer is $0$.", "input_specification": "Input\n\nThe first line of the input contains integers $n$ ($1\\le n \\le 10^5$) and $k$ ($1 \\le k \\le 26$).\n\nThe second line of the input contains the string $s$ of length $n$. String $s$ only contains uppercase letters from ' A ' to the $k$-th letter of Latin alphabet.", "output_specification": "Output\n\nPrint the only integer — the length of the longest good subsequence of string $s$.", "sample_tests": "Examples\n\nInput\n9 3ACAABCCAB\n\nOutput\n6\n\nInput\n9 4ABCABCABC\n\nOutput\n0", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1038/A"}
{"header": "A. Two Friends\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Monocarp wants to throw a party. He has $n$ friends, and he wants to have at least $2$ of them at his party.\nThe $i$-th friend's best friend is $p_i$. All $p_i$ are distinct, and for every $i \\in [1, n]$, $p_i \\ne i$.\nMonocarp can send invitations to friends. The $i$-th friend comes to the party if\nboth the $i$-th friend and the $p_i$-th friend\nreceive an invitation (note that the $p_i$-th friend doesn't have to actually come to the party). Each invitation is sent to exactly one of the friends.\nFor example, if $p = [3, 1, 2, 5, 4]$, and Monocarp sends invitations to the friends $[1, 2, 4, 5]$, then the friends $[2, 4, 5]$ will come to the party. The friend $1$ won't come since his best friend didn't receive an invitation; the friend $3$ won't come since he didn't receive an invitation.\nCalculate the minimum number of invitations Monocarp has to send so that\nat least $2$\nfriends come to the party.\nNote\nIn the first testcase, Monocarp can send invitations to friends $4$ and $5$. Both of them will come to the party since they are each other's best friends, and both of them have invitations.\nIn the second testcase, Monocarp can send invitations to friends $1, 2$ and $3$, for example. Then friends $1$ and $2$ will attend: friend $1$ and his best friend $2$ have invitations, friend $2$ and his best friend $3$ have invitations. Friend $3$ won't attend since his friend $4$ doesn't have an invitation. It's impossible to send invitations to fewer than $3$ friends in such a way that at least $2$ come.\nIn the third testcase, Monocarp can send invitations to both friends $1$ and $2$, and both of them will attend.", "input_specification": "Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 5000$) — the number of test cases.\n\nEach test case consists of two lines:\n\n the first line contains one integer $n$ ($2 \\le n \\le 50$) — the number of friends; the second line contains $n$ integers $p_1, p_2, \\dots, p_n$ ($1 \\le p_i \\le n$; $p_i \\ne i$; all $p_i$ are distinct).", "output_specification": "Output\n\nPrint one integer — the minimum number of invitations Monocarp has to send.", "sample_tests": "Example\n\nInput\n\n3\n\n5\n\n3 1 2 5 4\n\n4\n\n2 3 4 1\n\n2\n\n2 1\n\nOutput\n2\n3\n2", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1969/A"}
{"header": "A. Two Permutations\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given three integers $n$, $a$, and $b$. Determine if there exist two permutations $p$ and $q$ of length $n$, for which the following conditions hold:\nThe length of the longest common prefix of $p$ and $q$ is $a$.\nThe length of the longest common suffix of $p$ and $q$ is $b$.\nA permutation of length $n$ is an array containing each integer from $1$ to $n$ exactly once. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array), and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\nNote\nIn the first test case, $[1]$ and $[1]$ form a valid pair.\nIn the second test case and the third case, we can show that such a pair of permutations doesn't exist.\nIn the fourth test case, $[1,2,3,4]$ and $[1,3,2,4]$ form a valid pair.", "input_specification": "Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1\\leq t\\leq 10^4$) — the number of test cases. The description of test cases follows.\n\nThe only line of each test case contains three integers $n$, $a$, and $b$ ($1\\leq a,b\\leq n\\leq 100$).", "output_specification": "Output\n\nFor each test case, if such a pair of permutations exists, output \" Yes \"; otherwise, output \" No \". You can output each letter in any case (upper or lower).", "sample_tests": "Example\n\nInput\n\n4\n\n1 1 1\n\n2 1 2\n\n3 1 1\n\n4 1 1\n\nOutput\nYes\nNo\nNo\nYes", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1761/A"}
{"header": "A. Stable Arrangement of Rooks\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You have an $n \\times n$ chessboard and $k$ rooks. Rows of this chessboard are numbered by integers from $1$ to $n$ from top to bottom and columns of this chessboard are numbered by integers from $1$ to $n$ from left to right. The cell $(x, y)$ is the cell on the intersection of row $x$ and collumn $y$ for $1 \\leq x \\leq n$ and $1 \\leq y \\leq n$.\nThe arrangement of rooks on this board is called\ngood\n, if no rook is beaten by another rook.\nA rook beats all the rooks that shares the same row or collumn with it.\nThe\ngood\narrangement of rooks on this board is called\nnot stable\n, if it is possible to move one rook to the adjacent cell so arrangement becomes not good. Otherwise, the\ngood\narrangement is\nstable\n. Here, adjacent cells are the cells\nthat share a side\n.\nSuch arrangement of $3$ rooks on the $4 \\times 4$ chessboard is good, but it is not stable: the rook from $(1, 1)$ can be moved to the adjacent cell $(2, 1)$ and rooks on cells $(2, 1)$ and $(2, 4)$ will beat each other.\nPlease, find any stable arrangement of $k$ rooks on the $n \\times n$ chessboard or report that there is no such arrangement.\nNote\nIn the first test case, you should find stable arrangement of $2$ rooks on the $3 \\times 3$ chessboard. Placing them in cells $(3, 1)$ and $(1, 3)$ gives stable arrangement.\nIn the second test case it can be shown that it is impossbile to place $3$ rooks on the $3 \\times 3$ chessboard to get stable arrangement.", "input_specification": "Input\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 100$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$, $k$ ($1 \\leq k \\leq n \\leq 40$) — the size of the chessboard and the number of rooks.", "output_specification": "Output\n\nIf there is a stable arrangement of $k$ rooks on the $n \\times n$ chessboard, output $n$ lines of symbols . and R . The $j$-th symbol of the $i$-th line should be equals R if and only if there is a rook on the cell $(i, j)$ in your arrangement.\n\nIf there are multiple solutions, you may output any of them.\n\nIf there is no stable arrangement, output $-1$.", "sample_tests": "Example\n\nInput\n\n5\n\n3 2\n\n3 3\n\n1 1\n\n5 2\n\n40 33\n\nOutput\n..R\n...\nR..\n-1\nR\n.....\nR....\n.....\n....R\n.....\n-1", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1621/A"}
{"header": "A. Cipher Shifer\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "There is a string $a$ (unknown to you), consisting of lowercase Latin letters, encrypted according to the following rule into string $s$:\nafter each character of string $a$, an arbitrary (possibly zero) number of any lowercase Latin letters, different from the character itself, is added;\nafter each such addition, the character that we supplemented is added.\nYou are given string $s$, and you need to output the initial string $a$. In other words, you need to decrypt string $s$.\nNote that each string encrypted in this way is decrypted\nuniquely\n.\nNote\nIn the first encrypted message, the letter $a$ is encrypted as $aba$, and the letter $c$ is encrypted as $cabac$.\nIn the second encrypted message, only one letter $q$ is encrypted as $qzxcq$.\nIn the third encrypted message, zero characters are added to each letter.", "input_specification": "Input\n\nThe first line of the input contains a single integer $t$ ($1 \\le t \\le 1000$) — the number of test cases.\n\nThe descriptions of the test cases follow.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 100$) — the length of the encrypted message.\n\nThe second line of each test case contains a string $s$ of length $n$ — the encrypted message obtained from some string $a$.", "output_specification": "Output\n\nFor each test case, output the decrypted message $a$ on a separate line.", "sample_tests": "Example\n\nInput\n\n3\n\n8\n\nabacabac\n\n5\n\nqzxcq\n\n20\n\nccooddeeffoorrcceess\n\nOutput\nac\nq\ncodeforces", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1840/A"}
{"header": "A. Divisibility Problem\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given two positive integers $a$ and $b$. In one move you can increase $a$ by $1$ (replace $a$ with $a+1$). Your task is to find the minimum number of moves you need to do in order to make $a$ divisible by $b$. It is possible, that you have to make $0$ moves, as $a$ is already divisible by $b$. You have to answer $t$ independent test cases.", "input_specification": "Input\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases. Then $t$ test cases follow.\n\nThe only line of the test case contains two integers $a$ and $b$ ($1 \\le a, b \\le 10^9$).", "output_specification": "Output\n\nFor each test case print the answer — the minimum number of moves you need to do in order to make $a$ divisible by $b$.", "sample_tests": "Example\n\nInput\n5\n10 4\n13 9\n100 13\n123 456\n92 46\n\nOutput\n2\n5\n4\n333\n0", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1328/A"}
{"header": "A. Gennady and a Card Game\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Gennady owns a small hotel in the countryside where he lives a peaceful life. He loves to take long walks, watch sunsets and play cards with tourists staying in his hotel. His favorite game is called \"Mau-Mau\".\nTo play Mau-Mau, you need a pack of $52$ cards. Each card has a suit (Diamonds —\nD\n, Clubs —\nC\n, Spades —\nS\n, or Hearts —\nH\n), and a rank (\n2\n,\n3\n,\n4\n,\n5\n,\n6\n,\n7\n,\n8\n,\n9\n,\nT\n,\nJ\n,\nQ\n,\nK\n, or\nA\n).\nAt the start of the game, there is one card on the table and you have five cards in your hand. You can play a card from your hand if and only if it has the same rank or the same suit as the card on the table.\nIn order to check if you'd be a good playing partner, Gennady has prepared a task for you. Given the card on the table and five cards in your hand, check if you can play at least one card.\nNote\nIn the first example, there is an Ace of Spades (\nAS\n) on the table. You can play an Ace of Diamonds (\nAD\n) because both of them are Aces.\nIn the second example, you cannot play any card.\nIn the third example, you can play an Ace of Diamonds (\nAD\n) because it has the same suit as a Four of Diamonds (\n4D\n), which lies on the table.", "input_specification": "Input\n\nThe first line of the input contains one string which describes the card on the table. The second line contains five strings which describe the cards in your hand.\n\nEach string is two characters long. The first character denotes the rank and belongs to the set $\\{{\\tt 2}, {\\tt 3}, {\\tt 4}, {\\tt 5}, {\\tt 6}, {\\tt 7}, {\\tt 8}, {\\tt 9}, {\\tt T}, {\\tt J}, {\\tt Q}, {\\tt K}, {\\tt A}\\}$. The second character denotes the suit and belongs to the set $\\{{\\tt D}, {\\tt C}, {\\tt S}, {\\tt H}\\}$.\n\nAll the cards in the input are different.", "output_specification": "Output\n\nIf it is possible to play a card from your hand, print one word \" YES \". Otherwise, print \" NO \".\n\nYou can print each letter in any case (upper or lower).", "sample_tests": "Examples\n\nInput\nAS\n2H 4C TH JH AD\n\nOutput\nYES\n\nInput\n2H\n3D 4C AC KD AS\n\nOutput\nNO\n\nInput\n4D\nAS AC AD AH 5H\n\nOutput\nYES", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1097/A"}
{"header": "A. Forbidden Subsequence\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given strings $S$ and $T$, consisting of lowercase English letters. It is guaranteed that $T$ is a permutation of the string\nabc\n.\nFind string $S'$, the\nlexicographically smallest\npermutation of $S$ such that $T$ is\nnot\na subsequence of $S'$.\nString $a$ is a\npermutation\nof string $b$ if the number of occurrences of each distinct character is the same in both strings.\nA string $a$ is a\nsubsequence\nof a string $b$ if $a$ can be obtained from $b$ by deletion of several (possibly, zero or all) elements.\nA string $a$ is\nlexicographically smaller\nthan a string $b$ if and only if one of the following holds:\n$a$ is a prefix of $b$, but $a \\ne b$;\nin the first position where $a$ and $b$ differ, the string $a$ has a letter that appears earlier in the alphabet than the corresponding letter in $b$.\nNote\nIn the first test case, both\naaaabbc\nand\naaaabcb\nare lexicographically smaller than\naaaacbb\n, but they contain\nabc\nas a subsequence.\nIn the second test case,\nabccc\nis the smallest permutation of\ncccba\nand does not contain\nacb\nas a subsequence.\nIn the third test case,\nbcdis\nis the smallest permutation of\ndbsic\nand does not contain\nbac\nas a subsequence.", "input_specification": "Input\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 1000$) — the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains a string $S$ ($1 \\le |S| \\le 100$), consisting of lowercase English letters.\n\nThe second line of each test case contains a string $T$ that is a permutation of the string abc . (Hence, $|T| = 3$).\n\nNote that there is no limit on the sum of $|S|$ across all test cases.", "output_specification": "Output\n\nFor each test case, output a single string $S'$, the lexicographically smallest permutation of $S$ such that $T$ is not a subsequence of $S'$.", "sample_tests": "Example\n\nInput\n7\nabacaba\nabc\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabc\nac\nabc\n\nOutput\naaaacbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1617/A"}
{"header": "A. Stones\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Alice is playing with some stones.\nNow there are three numbered heaps of stones. The first of them contains $a$ stones, the second of them contains $b$ stones and the third of them contains $c$ stones.\nEach time she can do one of two operations:\ntake one stone from the first heap and two stones from the second heap (this operation can be done only if the first heap contains at least one stone and the second heap contains at least two stones);\ntake one stone from the second heap and two stones from the third heap (this operation can be done only if the second heap contains at least one stone and the third heap contains at least two stones).\nShe wants to get the maximum number of stones, but she doesn't know what to do. Initially, she has $0$ stones. Can you help her?\nNote\nFor the first test case in the first test, Alice can take two stones from the second heap and four stones from the third heap, making the second operation two times. Then she can take one stone from the first heap and two stones from the second heap, making the first operation one time. The summary number of stones, that Alice will take is $9$. It is impossible to make some operations to take more than $9$ stones, so the answer is $9$.", "input_specification": "Input\n\nThe first line contains one integer $t$ ($1 \\leq t \\leq 100$)  — the number of test cases. Next $t$ lines describe test cases in the following format:\n\nLine contains three non-negative integers $a$, $b$ and $c$, separated by spaces ($0 \\leq a,b,c \\leq 100$) — the number of stones in the first, the second and the third heap, respectively.\n\nIn hacks it is allowed to use only one test case in the input, so $t = 1$ should be satisfied.", "output_specification": "Output\n\nPrint $t$ lines, the answers to the test cases in the same order as in the input. The answer to the test case is the integer  — the maximum possible number of stones that Alice can take after making some operations.", "sample_tests": "Example\n\nInput\n3\n3 4 5\n1 0 5\n5 3 2\n\nOutput\n9\n0\n6", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1236/A"}
{"header": "A. Greg's Workout\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n stdin\n\noutput\n stdout", "body": "Greg is a beginner bodybuilder. Today the gym coach gave him the training plan. All it had was\nn\nintegers\na\n1\n,\na\n2\n, ...,\na\nn\n. These numbers mean that Greg needs to do exactly\nn\nexercises today. Besides, Greg should repeat the\ni\n-th in order exercise\na\ni\ntimes.\nGreg now only does three types of exercises: \"chest\" exercises, \"biceps\" exercises and \"back\" exercises. Besides, his training is cyclic, that is, the first exercise he does is a \"chest\" one, the second one is \"biceps\", the third one is \"back\", the fourth one is \"chest\", the fifth one is \"biceps\", and so on to the\nn\n-th exercise.\nNow Greg wonders, which muscle will get the most exercise during his training. We know that the exercise Greg repeats the maximum number of times, trains the corresponding muscle the most. Help Greg, determine which muscle will get the most training.\nNote\nIn the first sample Greg does 2 chest, 8 biceps and zero back exercises, so the biceps gets the most exercises.\nIn the second sample Greg does 5 chest, 1 biceps and 10 back exercises, so the back gets the most exercises.\nIn the third sample Greg does 18 chest, 12 biceps and 8 back exercises, so the chest gets the most exercise.", "input_specification": "Input\n\nThe first line contains integer *n* (1 ≤  *n*  ≤ 20) . The second line contains *n* integers *a* 1 ,  *a* 2 , ...,  *a* *n* (1 ≤  *a* *i*  ≤ 25) — the number of times Greg repeats the exercises.", "output_specification": "Output\n\nPrint word \" chest \" (without the quotes), if the chest gets the most exercise, \" biceps \" (without the quotes), if the biceps gets the most exercise and print \" back \" (without the quotes) if the back gets the most exercise.\n\nIt is guaranteed that the input is such that the answer to the problem is unambiguous .", "sample_tests": "Examples\n\nInput\n22 8\n\nOutput\nbiceps\n\nInput\n35 1 10\n\nOutput\nback\n\nInput\n73 3 2 7 9 6 8\n\nOutput\nchest", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/255/A"}
{"header": "A. Vasya the Hipster\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "One day Vasya the Hipster decided to count how many socks he had. It turned out that he had\na\nred socks and\nb\nblue socks.\nAccording to the latest fashion, hipsters should wear the socks of different colors: a red one on the left foot, a blue one on the right foot.\nEvery day Vasya puts on new socks in the morning and throws them away before going to bed as he doesn't want to wash them.\nVasya wonders, what is the maximum number of days when he can dress fashionable and wear different socks, and after that, for how many days he can then wear the same socks until he either runs out of socks or cannot make a single pair from the socks he's got.\nCan you help him?\nNote\nIn the first sample Vasya can first put on one pair of different socks, after that he has two red socks left to wear on the second day.", "input_specification": "Input\n\nThe single line of the input contains two positive integers *a* and *b* ( 1 ≤  *a* ,  *b*  ≤ 100 ) — the number of red and blue socks that Vasya's got.", "output_specification": "Output\n\nPrint two space-separated integers — the maximum number of days when Vasya can wear different socks and the number of days when he can wear the same socks until he either runs out of socks or cannot make a single pair from the socks he's got.\n\nKeep in mind that at the end of the day Vasya throws away the socks that he's been wearing on that day.", "sample_tests": "Examples\n\nInput\n3 1\n\nOutput\n1 1\n\nInput\n2 3\n\nOutput\n2 0\n\nInput\n7 3\n\nOutput\n3 2", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/581/A"}
{"header": "A. Buy a Shovel\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Polycarp urgently needs a shovel! He comes to the shop and chooses an appropriate one. The shovel that Policarp chooses is sold for\nk\nburles. Assume that there is an unlimited number of such shovels in the shop.\nIn his pocket Polycarp has an unlimited number of \"10-burle coins\" and exactly one coin of\nr\nburles (\n1 ≤\nr\n≤ 9\n).\nWhat is the minimum number of shovels Polycarp has to buy so that he can pay for the purchase without any change? It is obvious that he can pay for 10 shovels without any change (by paying the requied amount of 10-burle coins and not using the coin of\nr\nburles). But perhaps he can buy fewer shovels and pay without any change. Note that Polycarp should buy at least one shovel.\nNote\nIn the first example Polycarp can buy 9 shovels and pay\n9·117 = 1053\nburles. Indeed, he can pay this sum by using 10-burle coins and one 3-burle coin. He can't buy fewer shovels without any change.\nIn the second example it is enough for Polycarp to buy one shovel.\nIn the third example Polycarp should buy two shovels and pay\n2·15 = 30\nburles. It is obvious that he can pay this sum without any change.", "input_specification": "Input\n\nThe single line of input contains two integers *k* and *r* ( 1 ≤  *k*  ≤ 1000 , 1 ≤  *r*  ≤ 9 ) — the price of one shovel and the denomination of the coin in Polycarp's pocket that is different from \"10-burle coins\". \n\nRemember that he has an unlimited number of coins in the denomination of 10, that is, Polycarp has enough money to buy any number of shovels.", "output_specification": "Output\n\nPrint the required minimum number of shovels Polycarp has to buy so that he can pay for them without any change.", "sample_tests": "Examples\n\nInput\n117 3\n\nOutput\n9\n\nInput\n237 7\n\nOutput\n1\n\nInput\n15 2\n\nOutput\n2", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/732/A"}
{"header": "A. Balanced Substring\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given a string $s$, consisting of $n$ letters, each letter is either '\na\n' or '\nb\n'. The letters in the string are numbered from $1$ to $n$.\n$s[l; r]$ is a continuous substring of letters from index $l$ to $r$ of the string inclusive.\nA string is called balanced if the number of letters '\na\n' in it is equal to the number of letters '\nb\n'. For example, strings \"\nbaba\n\" and \"\naabbab\n\" are balanced and strings \"\naaab\n\" and \"\nb\n\" are not.\nFind any non-empty balanced substring $s[l; r]$ of string $s$. Print its $l$ and $r$ ($1 \\le l \\le r \\le n$). If there is no such substring, then print $-1$ $-1$.\nNote\nIn the first testcase there are no non-empty balanced subtrings.\nIn the second and third testcases there are multiple balanced substrings, including the entire string \"\nabbaba\n\" and substring \"\nbaba\n\".", "input_specification": "Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$) — the number of testcases.\n\nThen the descriptions of $t$ testcases follow.\n\nThe first line of the testcase contains a single integer $n$ ($1 \\le n \\le 50$) — the length of the string.\n\nThe second line of the testcase contains a string $s$, consisting of $n$ letters, each letter is either ' a ' or ' b '.", "output_specification": "Output\n\nFor each testcase print two integers. If there exists a non-empty balanced substring $s[l; r]$, then print $l$ $r$ ($1 \\le l \\le r \\le n$). Otherwise, print $-1$ $-1$.", "sample_tests": "Example\n\nInput\n4\n1\na\n6\nabbaba\n6\nabbaba\n9\nbabbabbaa\n\nOutput\n-1 -1\n1 6\n3 6\n2 5", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1569/A"}
{"header": "A. Omkar and Password\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Lord Omkar has permitted you to enter the Holy Church of Omkar! To test your worthiness, Omkar gives you a password which you must interpret!\nA password is an array $a$ of $n$ positive integers. You apply the following operation to the array: pick any two adjacent numbers that are not equal to each other and replace them with their sum. Formally, choose an index $i$ such that $1 \\leq i < n$ and $a_{i} \\neq a_{i+1}$, delete both $a_i$ and $a_{i+1}$ from the array and put $a_{i}+a_{i+1}$ in their place.\nFor example, for array $[7, 4, 3, 7]$ you can choose $i = 2$ and the array will become $[7, 4+3, 7] = [7, 7, 7]$. Note that in this array you can't apply this operation anymore.\nNotice that one operation will decrease the size of the password by $1$. What is the shortest possible length of the password after some number (possibly $0$) of operations?\nNote\nIn the first test case, you can do the following to achieve a length of $1$:\nPick $i=2$ to get $[2, 4, 1]$\nPick $i=1$ to get $[6, 1]$\nPick $i=1$ to get $[7]$\nIn the second test case, you can't perform any operations because there is no valid $i$ that satisfies the requirements mentioned above.", "input_specification": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). Description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) — the length of the password.\n\nThe second line of each test case contains $n$ integers $a_{1},a_{2},\\dots,a_{n}$ ($1 \\leq a_{i} \\leq 10^9$) — the initial contents of your password.\n\nThe sum of $n$ over all test cases will not exceed $2 \\cdot 10^5$.", "output_specification": "Output\n\nFor each password, print one integer: the shortest possible length of the password after some number of operations.", "sample_tests": "Example\n\nInput\n2\n4\n2 1 3 1\n2\n420 420\n\nOutput\n1\n2", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1392/A"}
{"header": "B. Omkar and Infinity Clock\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Being stuck at home, Ray became extremely bored. To pass time, he asks Lord Omkar to use his time bending power: Infinity Clock! However, Lord Omkar will only listen to mortals who can solve the following problem:\nYou are given an array $a$ of $n$ integers. You are also given an integer $k$. Lord Omkar wants you to do $k$ operations with this array.\nDefine one operation as the following:\nSet $d$ to be the maximum value of your array.\nFor every $i$ from $1$ to $n$, replace $a_{i}$ with $d-a_{i}$.\nThe goal is to predict the contents in the array after $k$ operations. Please help Ray determine what the final sequence will look like!\nNote\nIn the first test case the array changes as follows:\nInitially, the array is $[-199, 192]$. $d = 192$.\nAfter the operation, the array becomes $[d-(-199), d-192] = [391, 0]$.", "input_specification": "Input\n\nEach test contains multiple test cases. The first line contains the number of cases $t$ ($1 \\le t \\le 100$). Description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\leq n \\leq 2 \\cdot 10^5, 1 \\leq k \\leq 10^{18}$) – the length of your array and the number of operations to perform.\n\nThe second line of each test case contains $n$ integers $a_{1},a_{2},...,a_{n}$ $(-10^9 \\leq a_{i} \\leq 10^9)$ – the initial contents of your array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.", "output_specification": "Output\n\nFor each case, print the final version of array $a$ after $k$ operations described above.", "sample_tests": "Example\n\nInput\n3\n2 1\n-199 192\n5 19\n5 -1 4 2 0\n1 2\n69\n\nOutput\n391 0\n0 6 1 3 5\n0", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1392/B"}
{"header": "A. A Good Contest\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Codeforces user' handle color depends on his rating — it is red if his rating is greater or equal to\n2400\n; it is orange if his rating is less than\n2400\nbut greater or equal to\n2200\n, etc. Each time participant takes part in a rated contest, his rating is changed depending on his performance.\nAnton wants the color of his handle to become red. He considers his performance in the rated contest to be\ngood\nif he outscored some participant, whose handle was colored red before the contest and his rating has increased after it.\nAnton has written a program that analyses contest results and determines whether he performed good or not. Are you able to do the same?\nNote\nIn the first sample, Anton has outscored user with handle\nBurunduk1\n, whose handle was colored red before the contest and his rating has increased after the contest.\nIn the second sample,\nApplejack\n's rating has not increased after the contest, while both\nFluttershy\n's and\nPinkie_Pie\n's handles were not colored red before the contest.", "input_specification": "Input\n\nThe first line of the input contains a single integer *n* ( 1 ≤  *n*  ≤ 100 ) — the number of participants Anton has outscored in this contest .\n\nThe next *n* lines describe participants results: the *i* -th of them consists of a participant handle *name* *i* and two integers *before* *i* and *after* *i* (  - 4000 ≤  *before* *i* ,  *after* *i*  ≤ 4000 ) — participant's rating before and after the contest, respectively. Each handle is a non-empty string, consisting of no more than 10 characters, which might be lowercase and uppercase English letters, digits, characters « _ » and « - » characters.\n\nIt is guaranteed that all handles are distinct.", "output_specification": "Output\n\nPrint « YES » (quotes for clarity), if Anton has performed good in the contest and « NO » (quotes for clarity) otherwise.", "sample_tests": "Examples\n\nInput\n3Burunduk1 2526 2537BudAlNik 2084 2214subscriber 2833 2749\n\nOutput\nYES\n\nInput\n3Applejack 2400 2400Fluttershy 2390 2431Pinkie_Pie -2500 -2450\n\nOutput\nNO", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/681/A"}
{"header": "A. Digits Sum\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Let's define $S(x)$ to be the sum of digits of number $x$ written in decimal system. For example, $S(5) = 5$, $S(10) = 1$, $S(322) = 7$.\nWe will call an integer $x$\ninteresting\nif $S(x + 1) < S(x)$. In each test you will be given one integer $n$. Your task is to calculate the number of integers $x$ such that $1 \\le x \\le n$ and $x$ is interesting.\nNote\nThe first interesting number is equal to $9$.", "input_specification": "Input\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$)  — number of test cases.\n\nThen $t$ lines follow, the $i$-th line contains one integer $n$ ($1 \\le n \\le 10^9$) for the $i$-th test case.", "output_specification": "Output\n\nPrint $t$ integers, the $i$-th should be the answer for the $i$-th test case.", "sample_tests": "Example\n\nInput\n5\n1\n9\n10\n34\n880055535\n\nOutput\n0\n1\n1\n3\n88005553", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1553/A"}
{"header": "A. Combination Lock\n\ntime limit per test\n 2 seconds\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Scrooge McDuck keeps his most treasured savings in a home safe with a combination lock. Each time he wants to put there the treasures that he's earned fair and square, he has to open the lock.\nThe combination lock is represented by\nn\nrotating disks with digits from 0 to 9 written on them. Scrooge McDuck has to turn some disks so that the combination of digits on the disks forms a secret combination. In one move, he can rotate one disk one digit forwards or backwards. In particular, in one move he can go from digit 0 to digit 9 and vice versa. What minimum number of actions does he need for that?\nNote\nIn the sample he needs 13 moves:\n1 disk:\n2 disk:\n3 disk:\n4 disk:\n5 disk:", "input_specification": "Input\n\nThe first line contains a single integer *n* ( 1 ≤  *n*  ≤ 1000 ) — the number of disks on the combination lock.\n\nThe second line contains a string of *n* digits — the original state of the disks.\n\nThe third line contains a string of *n* digits — Scrooge McDuck's combination that opens the lock.", "output_specification": "Output\n\nPrint a single integer — the minimum number of moves Scrooge McDuck needs to open the lock.", "sample_tests": "Examples\n\nInput\n58219564723\n\nOutput\n13", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/540/A"}
{"header": "A. Common Subsequence\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "You are given two arrays of integers $a_1,\\ldots,a_n$ and $b_1,\\ldots,b_m$.\nYour task is to find a\nnon-empty\narray $c_1,\\ldots,c_k$ that is a subsequence of $a_1,\\ldots,a_n$, and also a subsequence of $b_1,\\ldots,b_m$. If there are multiple answers, find one of the\nsmallest\npossible length. If there are still multiple of the smallest possible length, find any. If there are no such arrays, you should report about it.\nA sequence $a$ is a subsequence of a sequence $b$ if $a$ can be obtained from $b$ by deletion of several (possibly, zero) elements. For example, $[3,1]$ is a subsequence of $[3,2,1]$ and $[4,3,1]$, but not a subsequence of $[1,3,3,7]$ and $[3,10,4]$.\nNote\nIn the first test case, $[4]$ is a subsequence of $[10, 8, 6, 4]$ and $[1, 2, 3, 4, 5]$. This array has length $1$, it is the smallest possible length of a subsequence of both $a$ and $b$.\nIn the third test case, no non-empty subsequences of both $[3]$ and $[2]$ exist, so the answer is \"\nNO\n\".", "input_specification": "Input\n\nThe first line contains a single integer $t$ ($1\\le t\\le 1000$)  — the number of test cases. Next $3t$ lines contain descriptions of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1\\le n,m\\le 1000$)  — the lengths of the two arrays.\n\nThe second line of each test case contains $n$ integers $a_1,\\ldots,a_n$ ($1\\le a_i\\le 1000$)  — the elements of the first array.\n\nThe third line of each test case contains $m$ integers $b_1,\\ldots,b_m$ ($1\\le b_i\\le 1000$)  — the elements of the second array.\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ across all test cases does not exceed $1000$ ($\\sum\\limits_{i=1}^t n_i, \\sum\\limits_{i=1}^t m_i\\le 1000$).", "output_specification": "Output\n\nFor each test case, output \" YES \" if a solution exists, or \" NO \" otherwise.\n\nIf the answer is \" YES \", on the next line output an integer $k$ ($1\\le k\\le 1000$)  — the length of the array, followed by $k$ integers $c_1,\\ldots,c_k$ ($1\\le c_i\\le 1000$)  — the elements of the array.\n\nIf there are multiple solutions with the smallest possible $k$, output any.", "sample_tests": "Example\n\nInput\n5\n4 5\n10 8 6 4\n1 2 3 4 5\n1 1\n3\n3\n1 1\n3\n2\n5 3\n1000 2 2 2 3\n3 1 5\n5 5\n1 2 3 4 5\n1 2 3 4 5\n\nOutput\nYES\n1 4\nYES\n1 3\nNO\nYES\n1 3\nYES\n1 2", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1382/A"}
{"header": "A. And Then There Were K\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Given an integer $n$, find the maximum value of integer $k$ such that the following condition holds:\n$n$ & ($n-1$) & ($n-2$) & ($n-3$) & ... ($k$) = $0$\nwhere & denotes the\nbitwise AND operation.\nNote\nIn the first testcase, the maximum value for which the continuous & operation gives 0 value, is 1.\nIn the second testcase, the maximum value for which the continuous & operation gives 0 value, is 3. No value greater then 3, say for example 4, will give the & sum 0.\n$5 \\, \\& \\, 4 \\neq 0$,\n$5 \\, \\& \\, 4 \\, \\& \\, 3 = 0$.\nHence, 3 is the answer.", "input_specification": "Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 3 \\cdot 10^4$). Then $t$ test cases follow.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^9$).", "output_specification": "Output\n\nFor each test case, output a single integer — the required integer $k$.", "sample_tests": "Example\n\nInput\n3\n2\n5\n17\n\nOutput\n1\n3\n15", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1527/A"}
{"header": "A. And Then There Were K\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Given an integer $n$, find the maximum value of integer $k$ such that the following condition holds:\n$n$ & ($n-1$) & ($n-2$) & ($n-3$) & ... ($k$) = $0$\nwhere & denotes the\nbitwise AND operation.\nNote\nIn the first testcase, the maximum value for which the continuous & operation gives 0 value, is 1.\nIn the second testcase, the maximum value for which the continuous & operation gives 0 value, is 3. No value greater then 3, say for example 4, will give the & sum 0.\n$5 \\, \\& \\, 4 \\neq 0$,\n$5 \\, \\& \\, 4 \\, \\& \\, 3 = 0$.\nHence, 3 is the answer.", "input_specification": "Input\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 3 \\cdot 10^4$). Then $t$ test cases follow.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^9$).", "output_specification": "Output\n\nFor each test case, output a single integer — the required integer $k$.", "sample_tests": "Example\n\nInput\n3\n2\n5\n17\n\nOutput\n1\n3\n15", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1527/B"}
{"header": "A. Polycarp's Pockets\n\ntime limit per test\n 1 second\n\nmemory limit per test\n 256 megabytes\n\ninput\n standard input\n\noutput\n standard output", "body": "Polycarp has $n$ coins, the value of the $i$-th coin is $a_i$. Polycarp wants to distribute all the coins between his pockets, but he cannot put two coins with the same value into the same pocket.\nFor example, if Polycarp has got six coins represented as an array $a = [1, 2, 4, 3, 3, 2]$, he can distribute the coins into two pockets as follows: $[1, 2, 3], [2, 3, 4]$.\nPolycarp wants to distribute all the coins with the minimum number of used pockets. Help him to do that.", "input_specification": "Input\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 100$) — the number of coins.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$) — values of coins.", "output_specification": "Output\n\nPrint only one integer — the minimum number of pockets Polycarp needs to distribute all the coins so no two coins with the same value are put into the same pocket.", "sample_tests": "Examples\n\nInput\n61 2 4 3 3 2\n\nOutput\n2\n\nInput\n1100\n\nOutput\n1", "difficulty": 800, "url": "https://codeforces.com/problemset/problem/1003/A"}
