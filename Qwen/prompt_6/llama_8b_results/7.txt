```python
from collections import Counter

for _ in range(int(input())):
    s = input()
    t = input()

    count = Counter(s)
    a, b, c = count['a'], count['b'], count['c']

    if c == 0:
        s = ''.join(sorted(s))
        print(s)
    elif a == 0 or b == 0:
        s = ''.join(sorted(s))
        print(s)
    elif a > 0 and b > 0:
        s = 'a' * a + 'b' * b + ''.join(sorted([c for c in s if c not in 'ab']))
        print(s)
    else:
        s = 'c' + ''.join(sorted([c for c in s if c not in 'ab']))
        print(s)
```

This code reads the input, counts the occurrences of each character in the string `s`, and then determines the lexicographically smallest permutation of `s` such that `t` is not a subsequence of `s`. The result is then printed to the console.
