```python
import sys

def print_arrangement(arrangement):
    for row in arrangement:
        print("".join("R" if cell else "." for cell in row))

def is_stable(board):
    for i in range(len(board)):
        row_rooks = [board[j][i] for j in range(len(board)) if board[j][i] == 1]
        col_rooks = [board[i][j] for j in range(len(board[0])) if board[i][j] == 1]
        if len(row_rooks) > 1 or len(col_rooks) > 1:
            return False
    return True


def place_rooks(n, k, board, row, col, rooks_placed):
    if len(rooks_placed) == k:
        if is_stable(board):
            print_arrangement(board)
            return True
        else:
            return False
    for i in range(row, n):
        for j in range(col, n):
            if board[i][j] == 0:
                board[i][j] = 1
                rooks_placed.append((i, j))
                if place_rooks(n, k, board, i + 1, col, rooks_placed):
                    return True
                board[i][j] = 0
                rooks_placed.pop()
    return False


def main():
    t = int(input())
    for _ in range(t):
        n, k = map(int, input().split())
        board = [[0] * n for _ in range(n)]
        if k > n:
            print(-1)
            continue
        if k == 1:
            for i in range(n):
                board[i][i] = 1
            print_arrangement(board)
            continue
        if k == 2:
            for i in range(1, n - 1):
                board[i][i] = 1
                board[i][i + 1] = 1
                print_arrangement(board)
                board[i][i] = 0
                board[i][i + 1] = 0
            print(-1)
            continue
        if k == 3:
            if n < 4:
                print(-1)
                continue
            board[1][1] = 1
            board[2][2] = 1
            board[3][3] = 1
            print_arrangement(board)
            continue
        if k > 3:
            print(-1)
            continue
        place_rooks(n, k, board, 0, 0, [])


if __name__ == "__main__":
    main()
```
