<start_of_turn>model
```python
t = int(input())

for _ in range(t):
    n = int(input())
    s = input().strip()

    # Find the balanced substring
    l, r = -1, -1
    for i in range(n):
        a_cnt, b_cnt = s[0:i].count('a'), s[0:i].count('b')
        if a_cnt == b_cnt and l == -1:
            l, r = i, i

    # Print the solution
    if l != -1 and r != -1:
        print(l, r)
    else:
        print(-1, -1)
```<eos>
