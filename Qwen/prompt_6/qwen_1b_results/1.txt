```python
import sys

def min_invitations(n):
    # Initialize the minimum number of invitations needed
    min_invitations_needed = float('inf')
    
    # Iterate through possible numbers of invitations from 1 to n
    for invitations in range(1, n + 1):
        current_min = float('inf')
        
        # Check combinations of invitations to find the minimum needed
        for subset_size in range(invitations + 1):
            remaining_friends = n - subset_size
            
            # Calculate the minimum invitations required for this combination
            if subset_size > 1:
                current_min = min(current_min, 2)
            
            for subset in combinations(range(1, n + 1), subset_size):
                if len(set(p[i] for i in subset)) == n:
                    continue
                
                # If there are no duplicates among the subset
                if len(set(subset)) != subset_size:
                    continue
                
                # Update the minimum number of invitations needed
                current_min = min(current_min, remaining_friends // subset_size)
                
                # Check if the current minimum is still optimal
                if current_min <= 2:
                    break
        
        # Update the overall minimum number of invitations needed
        min_invitations_needed = min(min_invitations_needed, current_min)
    
    return min_invitations_needed

# Read input
T = int(input())
for _ in range(T):
    N = int(input())
    P = list(map(int, input().split()))
    
    # Print the result
    print(min_invitations(N))
```
This Python script solves the given problem by iterating over possible numbers of invitations and checking all combinations to determine the minimum number of invitations needed to ensure at least 2 friends attend the party. It uses the `combinations` function from the itertools module to generate all possible subsets of friends.
