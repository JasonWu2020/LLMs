```python
def min_invitations():
    T = int(input())
    for _ in range(T):
        n = int(input())
        p = list(map(int, input().split()))
        graph = {i: [] for i in range(n)}
        for i in range(n):
            graph[i].append(p[i]-1)
            graph[p[i]-1].append(i)

        def dfs(node, visited):
            visited.add(node)
            for neighbor in graph[node]:
                if neighbor+1 not in visited:
                    visited.add(neighbor+1)
                    dfs(neighbor, visited)
            return len(visited)-1
        
        result = 0
        for node in range(n):
            visited = set()
            component_size = dfs(node, visited)
            result += max(0, component_size - 1)
        
        print(result // 2 + 1)

min_invitations()
```
