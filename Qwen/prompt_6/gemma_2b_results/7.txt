<start_of_turn>model
```python
def smallest_permutation(S, T):
    char_counts = {}
    for char in S:
        if char in char_counts:
            char_counts[char] += 1
        else:
            char_counts[char] = 1

    char_counts[T[0]] -= 1  
    char_counts[T[1]] -= 1
    char_counts[T[2]] -= 1

    
  	ans = ''
    for char in range(len(S)):
        if S[char] not in char_counts:
        	ans += S[char]
        else:
        	char_counts[S[char]] += 1
   

    return ans
    



t = int(input())
for _ in range(t):
    S = list(input().lower())
    T = list(input().lower())
    print(smallest_permutation(S,T))

``` 

**Explanation**
 
1. **Input Handling:** Reads an integer `t` representing the number of test cases.
2. **`smallest_permutation(S, T)` function:**
   - **Counting Character Occurrences:**  It creates a hashtable `char_counts` to store the frequency of each character in the string `S`. This is used to find the lexicographically smallest permutation later.
   - **Tracking Subsequence Position:** It adjusts the frequency of characters in `char_counts` based on the letters in `T`. Each letter is adjusted, and if the count is 0, then the next letter is added to the output
   
3. **Lexicographical Minimizing:**
   - The `char_counts` dictionary is then used to figure out the lexicographically small permutations. 

4.  **Output and Iteration:** The number of input test cases is determined,
