<start_of_turn>model
```python
t = int(input())  # Number of test cases

for _ in range(t):
    n, k = map(int, input().split())  
    
    if k == 0:  # Handle the case of no rooks
        print(-1)
        continue

     # Initialize stable arrangement as empty
    board = [['.' for _ in range(n)] for _ in range(n)]
    
    print(*board)
  
    
    def is_stable(row, col, rook_locations):  
        for i in range(1, n + 1):
            for j in range(1, n + 1): # i,j
                if (i, j) in rook_locations:  
                    # Check if conflicts if you rotate the rook on the board
                    # Implement the rules for rook moves to check stability

                else:
                    return True
                

    for i in range(1, n + 1):
        for j in range(1, n + 1
