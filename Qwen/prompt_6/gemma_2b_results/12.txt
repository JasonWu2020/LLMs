<start_of_turn>model
```python
t = int(input())
for _ in range(t):
    n = int(input())
    s = input()
    l, r = -1, -1
    count_a = 0
    count_b = 0

  for i in range(n):
      if s[i] == 'a':
          count_a +=1
      elif s[i] == 'b':
          count_b += 1
  if count_a == count_b:
      if l == -1:
        l = 0 
        r = n 
      else:
        l = l + 1
        r = n 
        if s[l] == 'a' and s[r - 1] == 'b':
          if l != 0:
            r = n - 1
        elif s[r] == 'b' and s[l - 1] == 'a':
          r = r - 1
      
```
     
  else:  
      while l != -1:
          if s[l] == 'a' and s[l + 1] == 'b':
              if l != 0:
                  l = l + 1
                  r =l  -1
          elif s[r] == 'b' and  s[r-1] == 'a':
              r = r -1
          else:
              break
  

  print(l, r)
     
```



**Explanation:**


1. **Input and Initialization**
   - The code reads the number of test cases `t`.  
   - For each test case, it reads the length `n` of the string and the string itself `s`.
   -  It initializes a `count_a` and `count_b` to keep track of the occurrences of 'a' and 'b', respectively.


2. **Core Logic**
   - This part looks for a balanced substring, and in case the substring is not balanced, it iterates through the string and checks if the substring starts and ends with the correct balance.



3. **Output**
   - The code prints the starting and ending indices of a valid balanced substring, if one was found (`-1 -1` indicates no balanced substring).




Let me know if you would like to explore any specific part of the code or need further clarifications! <end_of_turn>
