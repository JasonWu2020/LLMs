```python
def min_invitations(t):
    results = []
    for _ in range(t):
        n = int(input())
        p = list(map(int, input().split()))
        # Create a graph representation
        graph = [[] for _ in range(n)]
        for i in range(n):
            graph[i].append(p[i])
        
        # Find all strongly connected components
        def find_scc(graph):
            visited = [False] * n
            stack = []
            sccs = []
            component = 0
            
            def dfs(node):
                nonlocal component
                visited[node] = True
                stack.append(node)
                for neighbor in graph[node]:
                    if not visited[neighbor]:
                        dfs(neighbor)
                while stack:
                    node = stack.pop()
                    sccs[component].append(node)
                    visited[node] = False
                    component += 1
            
            for i in range(n):
                if not visited[i]:
                    dfs(i)
            
            return sccs
        
        sccs = find_scc(graph)
        # Count the size of each SCC
        sizes = [len(scc) for scc in sccs]
        # If there's only one SCC, we need at least half of its size plus one invitations
        if len(sizes) == 1:
            result = max(sizes[0] // 2 + 1, 2)
        else:
            # Otherwise, we can select one person from each SCC
            result = max(len(sccs), 2)
        
        results.append(result)
    
    for res in results:
        print(res)

# Example usage
min_invitations(int(input()))
```
