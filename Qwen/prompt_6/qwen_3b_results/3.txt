```python
def find_stable_arrangement(t):
    for _ in range(t):
        n, k = map(int, input().split())
        # Initialize the chessboard with empty slots '.'
        chessboard = [['.' for _ in range(n)] for _ in range(n)]
        
        # Try placing rooks one by one in different rows and columns
        for i in range(k):
            placed = False
            for col in range(n):
                if all(chessboard[row][col] == '.' for row in range(n)):
                    chessboard[i][col] = 'R'
                    placed = True
                    break
            if not placed:
                return -1
        
        # Check if the arrangement is stable
        for i in range(k):
            for j in range(k):
                if i != j and (chessboard[i][j] == 'R' or chessboard[j][i] == 'R'):
                    # Try moving the rook in the current position to the adjacent cell
                    for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                        nx, ny = i + dx, j + dy
                        if 0 <= nx < n and 0 <= ny < n and chessboard[nx][ny] == '.':
                            chessboard[i][j], chessboard[nx][ny] = chessboard[nx][ny], chessboard[i][j]
                            if all(all(chessboard[row][col] != 'R' for col in range(n)) for row in range(n)):
                                break
                            else:
                                chessboard[i][j], chessboard[nx][ny] = chessboard[nx][ny], chessboard[i][j]
                    else:
                        return -1
        
        # Output the stable arrangement
        for row in chessboard:
            print(''.join(row))

if __name__ == "__main__":
    t = int(input())
    find_stable_arrangement(t)
```
