[/INST] ```python
import sys

def is_permutation(s1, s2):
 return all(s1.count(c) == s2.count(c) for c in set(s1))

def next_permutation(s):
 n = len(s)
 if n < 2: return s
 i = n - 1
 while i > 0 and s[i - 1] > s[i]: i -= 1
 k = i
 j = n - 1
 while s[i - 1] > s[j]: j -= 1
 s[i - 1], s[j] = s[j], s[i - 1]
 s[i:] = reversed(s[i:])
 return s

def find_smallest_permutation(s, t):
 if not is_permutation(s, "abc"): return "Impossible."
 if is_subsequence(t, next_permutation(s)): return next_permutation(s)
 return next_permutation(next_permutation(s))

def is_subsequence(s1, s2):
 for sub in itertools.permutations(s1, len(t)):
 if t == ''.join(sub): return True
 return False

for _ in range(int(input())):
 s = input()
 t = input()
 print(find_smallest_permutation(s, t))
```

This code reads the input, processes each test case, and outputs the answer according to the problem description. It first checks if the given string is a permutation of abc. If not, it outputs "Impossible." Otherwise, it finds the next permutation of the string until it finds one that is not a subsequence of T. The functions `is_permutation` and `is_subsequence` are helper functions used to check if two strings are permutations of each other and if one is a subsequence of the other, respectively.</s>
