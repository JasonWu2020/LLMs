[/INST] ```python
import sys

def longest_common_subsequence(a, b):
    n = len(a)
    m = len(b)
    dp = [[0] * (m + 1) for _ in range(n + 1)]
    for i in range(1, n + 1):
        for j in range(1, m + 1):
            dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1] + int(a[i-1] == b[j-1]))
    if dp[n][m] == 0:
        return "NO"
    k = n + m - dp[n][m]
    i, j = n, m
    result = []
    while i > 0 and j > 0:
        if dp[i-1][j-1] + 1 == dp[i][j]:
            result.append(a[i-1])
            i -= 1
            j -= 1
        elif dp[i-1][j] >= dp[i][j-1]:
               i -= 1
            else:
               j -= 1
    return "YES\n{} {}".format(k, " ".join(map(str, result[::-1]))

for _ in range(int(sys.stdin.readline())):
    n, m = map(int, sys.stdin.readline().split())
    a = list(map(int, sys.stdin.readline().split()))
    b = list(map(int, sys.stdin.readline().split()))
    print(longest_common_subsequence(a, b))
```

This code reads the input as specified, calls the `longest_common_subsequence` function to find the longest common subsequence, and then outputs the result as required. The `longest_common_subsequence` function uses dynamic programming to find the longest common subsequence, and then backtracks to find one specific subsequence of that length.</s>
