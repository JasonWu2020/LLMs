Sure! Let's solve this problem using Python 3.8. We'll start by defining a function that calculates the minimum number of moves required to align all disks to the desired combination. We will use dynamic programming to find the solution efficiently.

Here's the plan:
1. Convert the strings of digits into lists of integers.
2. Use a dynamic programming approach to compute the minimum number of moves required for each disk.
3. Sum up the results for all disks to get the final answer.

Let's implement this:

```python
def min_moves_to_unlock(n, current_combination, target_combination):
    # Initialize a DP table where dp[i][j] represents the minimum moves to align the i-th disk to j
    dp = [[float('inf')] * 10 for _ in range(n)]
    
    # Base case: if the current state matches the target state, no moves are needed
    for i in range(10):
        dp[0][i] = abs(i - int(current_combination[0])) + abs(i - int(target_combination[0]))
    
    # Fill the DP table
    for i in range(1, n):
        for j in range(10):
            for k in range(10):
                dp[i][j] = min(dp[i][j], dp[i-1][k] + abs(j - k) + abs(j - int(current_combination[i])))
    
    # The answer is the sum of the minimum moves for each disk
    return sum(dp[-1])

# Read input
n = int(input())
current_combination = list(map(int, input()))
target_combination = list(map(int, input()))

# Compute the minimum number of moves
min_moves = min_moves_to_unlock(n, current_combination, target_combination)
print(min_moves)
```

### Explanation:
1. **Initialization**: We initialize a `dp` table where `dp[i][j]` represents the minimum number of moves to align the `i-th` disk to the `j-th` digit.
2. **Base Case**: If the current state matches the target state, no moves are needed, so we set `dp[0][j]` to the difference between the current and target digits.
3. **DP Table Filling**: For each disk `i`, we iterate over all possible digits `j` and `k`. We update `dp[i][j]` to be the minimum value among all previous states plus the cost of moving from `k` to `j`.
4. **Result**: The final answer is the sum of the minimum moves for all disks.

This approach ensures that we efficiently compute the minimum number of moves required to align all disks to the desired combination.
