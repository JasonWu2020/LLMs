Certainly! Let's break down the problem and provide a Python solution to calculate the minimum number of invitations required for Monocarp to ensure at least two friends come to the party. We'll use a greedy approach to solve this problem efficiently.

### Problem Breakdown
1. **Graph Representation**: We can represent the friendships as a directed graph where each node `i` points to its best friend `p_i`.
2. **Finding Connected Components**: We need to identify connected components in the graph. A connected component is a group of nodes where there is a path from any node to any other node within the same component.
3. **Minimum Invitations**: To ensure at least two friends come, we need to consider the smallest possible connected components. If there is only one connected component with more than one node, we can invite all friends in that component. Otherwise, we need to find the smallest number of nodes to invite to cover at least two friends.

### Steps
1. Construct the graph using adjacency lists.
2. Identify the connected components using Depth-First Search (DFS).
3. Calculate the minimum number of invitations needed to ensure at least two friends come.

### Implementation
Here's how we can implement this in Python:

```python
from collections import defaultdict, deque
from typing import List

def min_invitations(t):
    for _ in range(t):
        n = int(input())
        p = list(map(int, input().split()))
        
        # Build the graph
        graph = defaultdict(list)
        for i in range(n):
            graph[i].append(p[i])
        
        # Find connected components
        visited = [False] * n
        components = []
        def dfs(node):
            stack = [node]
            while stack:
                current = stack.pop()
                if not visited[current]:
                    visited[current] = True
                    stack.extend(graph[current])
            components.append(stack)
        
        for i in range(n):
            if not visited[i]:
                dfs(i)
        
        # Calculate the minimum number of invitations
        min_invitations = float('inf')
        for component in components:
            if len(component) >= 2:
                min_invitations = min(min_invitations, len(component))
        
        if min_invitations == float('inf'):
            min_invitations = 2
        
        print(min_invitations)

# Example usage
t = int(input())
min_invitations(t)
```

### Explanation
1. **Graph Construction**: We build an adjacency list representation of the graph using the given `p` values.
2. **Connected Components**: We use DFS to find all connected components in the graph.
3. **Min Invitations Calculation**:
   - For each connected component, we check if it has at least two nodes.
   - We keep track of the minimum number of nodes needed to cover at least two friends.
   - If no component has at least two nodes, we set the minimum number of invitations to 2.

### Testing the Solution
This solution should handle the constraints effectively and provide the correct output for each test case. Make sure to run the provided function with the appropriate input format to validate the correctness.

Feel free to ask if you have any further questions or need additional clarifications!
