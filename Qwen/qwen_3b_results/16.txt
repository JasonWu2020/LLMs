To solve this problem efficiently, we need to determine if a number \( x \) is "interesting" by checking if \( S(x+1) < S(x) \). We can iterate through numbers from 1 to \( n \) and count how many of them are interesting.

Hereâ€™s a step-by-step approach:

1. **Define the function `sum_of_digits`**: This function will compute the sum of the digits of a given number.
2. **Iterate through numbers from 1 to \( n \)**: For each number, check if it is interesting.
3. **Count the number of interesting numbers**.

Let's implement this in Python 3.8:

```python
def sum_of_digits(x):
    """Returns the sum of the digits of x."""
    return sum(int(digit) for digit in str(x))

def count_interesting_numbers(n):
    """Counts the number of interesting numbers from 1 to n."""
    interesting_count = 0
    
    for x in range(1, n + 1):
        if sum_of_digits(x + 1) < sum_of_digits(x):
            interesting_count += 1
            
    return interesting_count

# Read input
t = int(input().strip())
for _ in range(t):
    n = int(input().strip())
    result = count_interesting_numbers(n)
    print(result)
```

### Explanation:
1. **sum_of_digits Function**:
   - Converts the number to a string and iterates over each character (digit).
   - Converts each character back to an integer and sums them up.

2. **count_interesting_numbers Function**:
   - Iterates from 1 to \( n \).
   - Checks if the sum of digits of \( x + 1 \) is less than the sum of digits of \( x \).
   - Counts and returns the total number of interesting numbers.

3. **Input Handling**:
   - Reads the number of test cases \( t \).
   - For each test case, reads \( n \), and prints the count of interesting numbers.

This solution is efficient because it only requires iterating through the range once for each test case, making it suitable for the given constraints.
