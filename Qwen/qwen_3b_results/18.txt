Sure, let's start by writing the Python3.8 script to solve this problem according to the given specifications. We will iterate through each test case, check for common subsequences, and output the results accordingly.

Here's the plan:
1. Read the number of test cases `t`.
2. For each test case:
   - Read the lengths of the two arrays `n` and `m`.
   - Read the elements of the first array `a`.
   - Read the elements of the second array `b`.
   - Use dynamic programming to find the longest common subsequence (LCS).
   - If the LCS length is greater than zero, print "YES" followed by the LCS.
   - Otherwise, print "NO".

Let's implement this step-by-step:

```python
def find_lcs(a, b):
    # Initialize the DP table
    dp = [[0] * (len(b) + 1) for _ in range(len(a) + 1)]
    
    # Fill the DP table
    for i in range(1, len(a) + 1):
        for j in range(1, len(b) + 1):
            if a[i-1] == b[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])
                
    return dp[len(a)][len(b)]

def main():
    t = int(input())
    for _ in range(t):
        n, m = map(int, input().split())
        a = list(map(int, input().split()))
        b = list(map(int, input().split()))
        
        # Find the LCS
        lcs_length = find_lcs(a, b)
        
        # Check if there is a non-empty LCS
        if lcs_length > 0:
            print("YES")
            print(lcs_length)
            # Output the LCS
            for i, ai in enumerate(a):
                if ai in b[:lcs_length]:
                    print(ai, end=" ")
        else:
            print("NO")

if __name__ == "__main__":
    main()
```

### Explanation:
1. **Dynamic Programming Table Initialization**: The `dp` table is initialized to store the lengths of the longest common subsequences up to each pair `(i, j)` where `i` is the index in `a` and `j` is the index in `b`.

2. **Filling the DP Table**: 
   - If `a[i-1]` matches `b[j-1]`, then the length of the LCS ending at these positions is `dp[i-1][j-1] + 1`.
   - Otherwise, the length of the LCS is the maximum of the LCS ending before `a[i-1]` or `b[j-1]`.

3. **Finding the LCS Length**: After filling the table, the value at `dp[n][m]` gives the length of the LCS.

4. **Outputting the Result**:
   - If the LCS length is greater than zero, we print "YES" followed by the LCS.
   - If the LCS length is zero, we print "NO".

This approach ensures that we efficiently find the smallest possible subsequence that is common to both arrays. Let's run this code and verify its correctness against the provided examples.
