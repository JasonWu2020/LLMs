To solve this problem, we need to find a non-empty balanced substring within the given string \( s \). A balanced substring means that the number of 'a's equals the number of 'b's. Let's break down the steps for solving this:

1. **Iterate through the string**: For each possible starting point \( l \) (from 1 to \( n \)), calculate the balance up to that point.
2. **Maintain a running balance**: As we iterate, keep track of the balance of 'a's and 'b's. If at any point the balance becomes zero, it indicates a balanced substring.
3. **Check for balanced substrings**: Ensure the substring from \( l \) to \( r \) is indeed balanced and update the maximum possible \( r \).

Here is a Python implementation following these steps:

```python
def find_balanced_substring():
    # Read the number of test cases
    t = int(input())
    
    for _ in range(t):
        # Read the length of the string
        n = int(input())
        
        # Read the string
        s = input()
        
        # Initialize variables
        max_l, max_r = -1, -1
        balance = 0
        count_a = 0
        
        # Iterate through the string
        for r in range(n):
            # Update balance
            if s[r] == 'a':
                balance -= 1
            elif s[r] == 'b':
                balance += 1
            
            # Check if the current substring is balanced
            if balance == 0:
                max_l, max_r = 1, r + 1  # Start from the beginning if no balanced substring was found yet
                count_a = 1
            elif balance < 0:
                balance = 0  # Reset balance if imbalance occurs
            
            # Track the count of 'a's
            if s[r] == 'a':
                count_a += 1
        
        # Print the result
        if max_l == -1:
            print(-1, -1)
        else:
            print(max_l, max_r)

# Call the function to execute the solution
find_balanced_substring()
```

### Explanation of the Solution

1. **Input Reading**: We read the number of test cases `t`, followed by the lengths of strings and their contents for each case.
2. **Initialization**: We initialize `max_l` and `max_r` to `-1` to indicate no balanced substring has been found yet. We also maintain a running balance (`balance`) and a counter for the number of 'a's (`count_a`).
3. **Iteration**: We iterate through the string using a right boundary `r`. 
   - For each character, we update the balance accordingly.
   - If the balance is zero, we have found a balanced substring, so we update `max_l` and `max_r`.
   - If the balance becomes negative, we reset it to zero since the previous substring was not balanced.
4. **Counting 'a's**: We also keep track of the number of 'a's encountered, which helps in ensuring the substring is balanced.
5. **Output**: Finally, we print the indices `max_l` and `max_r` if a balanced substring is found, otherwise `-1 -1`.

This solution ensures that we correctly identify and print any non-empty balanced substrings efficiently.
