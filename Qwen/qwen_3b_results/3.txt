To solve this problem, we need to ensure that no rook can be moved to an adjacent cell without causing another rook to beat it. This means that no two rooks can be placed in the same row or column because they would then be able to beat each other.

Here's how we can approach this:

1. **Check Stability**: We need to check if it's possible to place $k$ rooks on the board such that no rook can be moved to an adjacent cell without causing another rook to beat it. This means that each row and each column can have at most one rook.

2. **Place Rooks**: If it is possible to place $k$ rooks on the board while satisfying the stability condition, we place them accordingly. Otherwise, we output `-1`.

Let's implement this in Python 3.8:

```python
def find_stable_arrangement(n, k):
    # If k > n, it's impossible to place k rooks without violating the stability condition
    if k > n:
        return -1
    
    # Create a list to represent the placement of rooks
    placement = [['.' for _ in range(n)] for _ in range(n)]
    
    # Place rooks row by row
    for i in range(k):
        row = -1
        col = -1
        
        # Try placing rooks in each row
        for r in range(n):
            if placement[r][i] == '.':
                row = r
                break
        
        # Try placing rooks in each column
        for c in range(n):
            if placement[i][c] == '.':
                col = c
                break
        
        # Place the rook if it's not already occupied
        if row != -1 and col != -1:
            placement[row][col] = 'R'
    
    return '\n'.join(''.join(row) for row in placement)

# Read input
import sys
input = sys.stdin.read
data = input().split()

t = int(data[0])
test_cases = [list(map(int, data[i].split())) for i in range(1, len(data), 2)]

# Process each test case
for n, k in test_cases:
    print(find_stable_arrangement(n, k))
```

### Explanation:
1. **Input Parsing**: We read the input as specified. Each test case consists of the size `n` and the number of rooks `k`.
2. **Stability Check**: 
   - If `k` exceeds `n`, it's impossible to place `k` rooks without violating the stability condition, so we return `-1`.
   - Otherwise, we try to place `k` rooks in a stable manner.
3. **Placement Logic**:
   - For each rook, we try to place it in a row and a column that doesn't already contain a rook.
   - Once we find a suitable position, we mark it as a rook (`'R'`) and continue.
4. **Output**: We format the placement and print it.

This solution ensures that the arrangement of rooks is stable and follows the constraints given in the problem.
