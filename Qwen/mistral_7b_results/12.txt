[/INST] The outputted solution is correct in terms of logic, but there are some issues with the input and output format. Here's an updated solution that reads the input according to the problem statement and prints the output in the required format.

```python
def find_balanced_substring(s):
    n = len(s)
    left = 0
    right = 0
    a_count = 0
    b_count = 0
    ans_l = ans_r = -1

    while right < n:
        if s[right] == 'a':
            a_count += 1
        else:
            b_count += 1

        while a_count != b_count:
            if s[left] == 'a':
                a_count -= 1
            else:
                b_count -= 1
            left += 1

            if left > right:
                return -1, -1

        ans_l, ans_r = left, right
        left += 1
        right += 1

        if right >= n:
            break

    return ans_l, ans_r

def main():
    t = int(input().strip())
    for _ in range(t):
        n = int(input().strip())
        s = input().strip()
        l, r = find_balanced_substring(s)
        print(f'{l} {r}')

if __name__ == "__main__":
    main()
```

The main difference is that we now read the input using `input()` with the `strip()` method to remove any leading or trailing whitespaces, and we print the output using an f-string to format the output as required by the problem statement.</s>
