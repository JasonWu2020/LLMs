To solve this problem, we need to determine the minimum number of invitations Monocarp needs to send so that at least two friends come to the party. Let's break down the steps needed to implement this logic in Python.

### Step-by-Step Plan:
1. **Read Input**: Read the number of test cases `t` followed by pairs of numbers representing `n` and `p`.
2. **Process Each Test Case**:
   - For each test case, find the maximum value among the `p` array elements.
   - Calculate the sum of indices corresponding to these values in the `p` array.
   - Subtract this sum from `n` to get the minimum number of invitations required to ensure at least two friends attend the party.

### Implementation in Python 3.8:

```python
def min_invitations(n, p):
    # Find the maximum value in the list p
    max_value = max(p)
    
    # Calculate the sum of indices where p[i] equals max_value
    sum_indices = sum(i for i, x in enumerate(p) if x == max_value)
    
    # Return the minimum number of invitations required
    return n - sum_indices

# Reading input
import sys
input = sys.stdin.read
data = input().split()

T = int(data.pop(0))

for _ in range(T):
    N = int(data.pop(0))
    P = list(map(int, data.pop(0).split()))
    result = min_invitations(N, P)
    print(result)
```

### Explanation:
- **max_value**: This function finds the maximum element in the list `P`. 
- **sum_indices**: This calculates the sum of indices where the elements in `P` equal `max_value`.
- **result**: Finally, it returns the difference between the total number of friends (`N`) and the sum of indices with `max_value`, which gives the minimum number of invitations needed.

This approach ensures that we correctly calculate the minimum number of invitations needed based on the given constraints and requirements.
