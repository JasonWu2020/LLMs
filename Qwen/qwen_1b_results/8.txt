Here's a Python 3.8 solution for the given problem:

```python
def max_stones(t):
    # Iterate through each test case
    for _ in range(t):
        # Read the inputs
        a, b, c = map(int, input().split())
        
        # Calculate the maximum number of stones Alice can take
        if a >= 2:
            stones_taken = min(a, 2)
            a -= stones_taken
        else:
            stones_taken = 0
        
        if b >= 1:
            stones_taken += min(b, 4)
            b -= stones_taken
        else:
            stones_taken = 0
        
        if c >= 2:
            stones_taken += min(c, 6)
            c -= stones_taken
        else:
            stones_taken = 0
        
        # Print the result
        print(stones_taken)

# Example usage:
max_stones(1)  # This would run the example provided in the problem statement
```

### Explanation:

1. **Reading Inputs**: The program reads the number of test cases `t` followed by `t` sets of three numbers representing the number of stones in each of the three heaps.

2. **Calculating Stones Taken**:
   - For the first heap (`a`), since Alice can only take up to twice as many stones as are available, we check if taking all available stones is beneficial or just taking half.
   - Similarly, for the second heap (`b`) and the third heap (`c`), we calculate the minimum number of stones that can be taken based on their availability.

3. **Updating Heaps**: After calculating how many stones can be taken, we subtract those stones from the respective heaps to simulate the actions.

4. **Printing Result**: Finally, the total number of stones taken is printed.

This approach ensures that Alice takes the optimal number of stones using the specified operations, adhering to the constraints provided in the problem.
