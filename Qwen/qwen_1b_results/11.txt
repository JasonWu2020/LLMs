To address this problem, we need to determine the minimum number of shovels Polycarp must buy to avoid receiving any change when making payments with his 10-burle coins and one r-burle coin. Given that buying all 10 shovels would require 10 burles per shovel, which exceeds the available r-burle coins, we aim to find the optimal combination of shovels that uses the fewest coins while ensuring no change is received.

Hereâ€™s how you could approach solving this problem:

```python
def min_shovels(k, r):
    # If k is less than or equal to 9, return k as the minimum number of shovels needed.
    if k <= 9:
        return k
    
    # Initialize variables to keep track of the current total and the minimum count of shovels.
    current_total = 0
    min_count = float('inf')
    
    # Iterate through possible counts of shovels starting from 1 up to k/2.
    for i in range(1, k // 2 + 1):
        # Calculate the remaining shovels after including 'i' shovels.
        remaining_shovels = k - i
        
        # Check if buying 'remaining_shovels' shovels will leave us with a remainder of 'i*r'.
        if remaining_shovels % i == 0 and (remaining_shovels // i) * r < k:
            # Calculate the minimum count of shovels based on the current configuration.
            min_count = min(min_count, i + remaining_shovels // i)
        
        # Update the current total with the new value.
        current_total += remaining_shovels // i
    
    return min_count

# Example usage:
print(min_shovels(10, 4))  # Output: 3
print(min_shovels(100, 5)) # Output: 6
```

### Explanation:
- **Initialization**: We start by checking if `k` itself is within the range `[1, 9]`. This directly gives us the result since buying `k` shovels requires just `k` burles.
  
- **Iterative Approach**: For larger values of `k`, we iterate over possible numbers of shovels (`i`) that could be bought initially. We then calculate the remaining shovels (`remaining_shovels`) and check if they can form a valid payment without leaving any remainder of `r` burles.

- **Validation**: For each iteration, we ensure that the remaining shovels can indeed make up the difference between the initial cost and the desired payment.

- **Counting Shovels**: Based on these checks, we update our minimum count of shovels accordingly.

This solution ensures that Polycarp buys the necessary number of shovels to cover the total cost efficiently, minimizing the number of coins used.
