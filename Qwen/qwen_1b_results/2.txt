Here's a Python 3.8 solution to the problem:

```python
def find_permutation_pairs(n, a, b):
    # Check if it's possible to have both prefixes and suffixes match the required lengths
    if (n - a) % 2 == 0 or (n - b) % 2 == 0:
        return "No"
    
    # If one of the conditions is met, check if they can be satisfied simultaneously
    if (n - a) * 2 < b <= (n - a + 1) * 2:
        return "Yes"
    elif (n - b) * 2 < a <= (n - b + 1) * 2:
        return "Yes"
    else:
        return "No"

# Read input
t = int(input())

for _ in range(t):
    n, a, b = map(int, input().split())
    result = find_permutation_pairs(n, a, b)
    print(result)

```

### Explanation:

1. **Prefix Length Constraint**: We need to ensure that `(n - a)` is even because `a` must appear on both sides of the middle of the sequence. Similarly, `b` must be odd (`(n - b)` being even).

2. **Suffix Condition**: If either `a` or `b` matches the condition where their combined length with its half is less than the other value, then it's possible to satisfy both constraints simultaneously.

3. **Check Constraints**: If neither of these conditions is met, it means no valid pairs of permutations exist.

This approach ensures that we correctly identify whether valid pairs of permutations can exist based on the given constraints.
