To solve this problem, we need to follow these steps:

1. Sort the array `coins` based on their values.
2. Iterate through the sorted list and assign each coin to the next available pocket until all coins are distributed.
3. Count the number of pockets used and return it as the result.

Here's how you could implement this in Python 3.8:

```python
def min_pockets(coins):
    # Step 1: Sort the coins array based on their values
    coins.sort()
    
    # Initialize variables
    pocket_count = 1  # Start with at least one pocket for the smallest coin
    current_value = coins[0]
    
    # Step 2 & 3: Assign each coin to the next available pocket
    for i in range(1, len(coins)):
        if coins[i] != current_value:
            pocket_count += 1
            current_value = coins[i]
    
    return pocket_count

# Example usage
if __name__ == "__main__":
    n = int(input().strip())
    coins = list(map(int, input().strip().split()))
    
    result = min_pockets(coins)
    print(result)
```

### Explanation:
1. **Sorting**: The `sort()` method sorts the array in ascending order based on the values of the coins.
2. **Initialization**: We start with one pocket (since every coin must go into a different pocket).
3. **Iterate Through Coins**: For each coin, we check if its value is different from the previous coin's value (`current_value`). If they differ, we increment the pocket count and update `current_value`.
4. **Return Result**: After iterating through all coins, the variable `pocket_count` will hold the minimum number of pockets needed.

This approach ensures that no two coins with the same value are placed in the same pocket, meeting the problem requirements.
