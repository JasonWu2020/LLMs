To address this problem, we need to understand how the `sum_of_digits` function works. This function calculates the sum of the digits of a given integer. However, since Python doesn't have a built-in function like Java's `String.valueOf(int)` or C++'s `%`, we'll need to implement our own digit summing logic.

Here's a step-by-step approach:

1. **Read the Number of Test Cases**: We start by reading the number of test cases (`t`).
2. **Iterate Through Each Test Case**: For each test case, read the integer `n`.
3. **Calculate Interesting Numbers**: For each value from 1 to `n`, check if it satisfies the condition \( S(x+1) < S(x) \). If so, count it as an interesting number.
4. **Output the Results**: Print the count of interesting numbers for each test case.

Let's implement this solution in Python 3.8:
```python
def sum_of_digits(n):
    """Helper function to calculate the sum of digits of a number."""
    return sum(map(int, str(abs(n))))

# Read the number of test cases
t = int(input())

for _ in range(t):
    n = int(input())
    
    # Counting interesting numbers
    interesting_count = 0
    
    for i in range(1, n + 1):
        if sum_of_digits(i + 1) < sum_of_digits(i):
            interesting_count += 1
            
    # Output the result
    print(interesting_count)
```

### Explanation:
- The `sum_of_digits` function converts the absolute value of `n` into its string representation, then maps each character back to an integer, sums them up, and returns the total sum.
- We iterate through all numbers from 1 to `n`, calculating whether each number is interesting based on the defined criteria.
- Finally, we print out the count of interesting numbers for each test case.

This implementation efficiently checks each number within the given range to determine if it meets the "interesting" criterion. It handles both positive and negative values appropriately due to the use of `abs()`.
