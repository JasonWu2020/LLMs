```python
from collections import defaultdict

def find_subsequences():
    t = int(input())
    
    for _ in range(t):
        n, m = map(int, input().split())
        a = list(map(int, input().split()))
        b = list(map(int, input().split()))
        
        dp = [[False] * (len(b)+1) for _ in range(n+1)]
        
        # Initialize DP table
        for i in range(1, len(dp)):
            for j in range(len(dp[i])):
                dp[i][j] = dp[i-1][j]
                if a[i-1] == b[j]:
                    dp[i][j] = True
        
        # Check for valid subsequences
        for i in range(1, len(a)+1):
            for j in range(len(b)+1):
                if dp[i][j]:
                    k = min(i, j)
                    while k > 0:
                        if dp[k-1][j-k+1]:
                            break
                        else:
                            k -= 1
                    else:
                        print("YES")
                        print(k)
                        for x in reversed(range(i, i+k)):
                            print(x, end=" ")
                        return
            
        print("NO")

find_subsequences()
```

This Python script implements the logic described in the reference solution, using dynamic programming to check for subsequences and finding the smallest possible subsequence length that satisfies the conditions. It reads input for each test case, processes them according to the rules provided, and outputs the results as specified.
