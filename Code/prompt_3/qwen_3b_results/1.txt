Here is a Python solution following the input and output specifications provided:

```python
def min_invitations():
    import sys
    input = sys.stdin.read
    data = input().split()

    t = int(data[0])
    result = []

    for _ in range(t):
        n = int(data[1 + 2 * _])
        p = list(map(int, data[2 + 2 * _ : 4 + 2 * _]))
        visited = set()
        count = 0

        for i in range(n):
            if i not in visited:
                if p[i] in visited or p[p[i]] in visited:
                    visited.update([i, p[i], p[p[i]]])
                    count += 1

        result.append(count)

    return "\n".join(map(str, result))

print(min_invitations())
```

### Critique of the Provided Solution
1. **Input Handling**: The provided solution reads the entire input string into memory, which might not be efficient for large inputs. A more efficient approach would be to read input line-by-line.
2. **Loop Over Test Cases**: The loop over test cases could be improved by handling each test case separately rather than using a single loop with multiple variables.
3. **Set Operations**: Using `set` operations like `update` and `add` can be inefficient due to the overhead of maintaining a set. For this specific problem, we can use a different approach to keep track of the friends who attended the party.
4. **Count Invitations**: The current logic checks if a friend or their best friend is already visited. However, it might be simpler to just check if the friendâ€™s best friend is invited.
5. **Output Formatting**: The solution outputs the results as a single string, which is correct but could be formatted better for clarity.

### Revised Solution
Here is a revised version of the solution that addresses the above critiques:

```python
def min_invitations():
    import sys
    input = sys.stdin.readline

    t = int(input())
    result = []

    for _ in range(t):
        n = int(input())
        p = list(map(int, input().split()))

        visited = set()
        count = 0

        for i in range(n):
            if i not in visited:
                if p[i] in visited or p[p[i]] in visited:
                    visited.update([i, p[i]])
                    count += 1

        result.append(count)

    return "\n".join(map(str, result))

print(min_invitations())
```

### Explanation of the Revised Solution
1. **Input Reading**: Uses `sys.stdin.readline` to read input line by line, which is more efficient for large inputs.
2. **Loop Over Test Cases**: Simplifies the logic by iterating through each test case independently.
3. **Set Operations**: Uses simple set operations to track which friends have attended the party.
4. **Count Invitations**: Ensures that only one invitation is needed per friend who attends the party.
5. **Output Formatting**: Outputs the results as a single string, ensuring clear formatting.

This revised solution should perform efficiently and adhere to the specified input and output format.
